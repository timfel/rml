
functor RMLLrValsFn(structure Token : TOKEN
			     structure Absyn : ABSYN
			     structure Cache : CACHE
			     structure LexArg : LEXARG where type poz = Cache.poz
			     sharing type Cache.restriction = LexArg.restriction
			     sharing type Cache.visibility = LexArg.visibility
			     ) : RML_LRVALS = 
struct
structure ParserData=
struct
structure Header = 
struct
(* parser/rml.grm -- ML-Yacc grammar for RML *)

fun mymax(x:int, y:int, z:int) =
    (print (Int.toString x); print ":"; print(Int.toString y); print (":");  print(Int.toString(z)); print("\n");
     if ((x>y) andalso (x>z)) then x
     else (if (y>z) then y else z));

fun mklst(xlst, xnil, xcons, info) =
  let fun loop([], rest) = rest
	| loop(x::xlst, rest) = loop(xlst, xcons(x,rest,info))
  in
    loop(rev xlst, xnil(info))
  end

fun sayErr s = TextIO.output(TextIO.stdErr, s)

exception SyntaxErrorParse
fun bug s =
    (sayErr "Internal error: "; sayErr s; sayErr "\n"; raise SyntaxErrorParse)

fun error s =
    (sayErr "Error: "; sayErr s; sayErr "\n"; raise SyntaxErrorParse)
    
fun warn s =
    (sayErr "Warning: "; sayErr s; sayErr "\n")      

fun makeInfo lexArg (left as (x,_,_), right as (y,_,_)) =
	let val {fileName, sline, scolumn, eline, ecolumn} = LexArg.getLoc lexArg (left, right)
		val loc = Absyn.LOC(sline, scolumn, eline, ecolumn)
	in
		Absyn.INFO(fileName, x, y, loc)
	end


fun printErrInfo lexArg (left as (x,_,_), right as (y,_,_)) =
	let val {fileName, sline, scolumn, eline, ecolumn} = LexArg.getLoc lexArg (left, right)
	in
	  sayErr(
		 fileName^":"^
		(Int.toString sline)^"."^
		(Int.toString scolumn)^"-"^
		(Int.toString eline)^"."^
		(Int.toString ecolumn)^" ")
	end

fun printInfo lexArg (left as (x,_,_), right as (y,_,_)) =
	let val {fileName, sline, scolumn, eline, ecolumn} = LexArg.getLoc lexArg (left, right)
	in
	  print (fileName);print ":";
	  print(Int.toString sline);print ".";
	  print(Int.toString scolumn);print "-";
	  print(Int.toString eline);print ".";
	  print(Int.toString ecolumn);print "\n"
	end


fun modidRML(info) = SOME(Absyn.IDENT("RML", info))
fun id_cons(info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("cons",info), info)
fun ctor_cons(info) = SOME (id_cons(info))
fun id_nil(info) = Absyn.LONGID(modidRML info, Absyn.IDENT("nil",info), info)

(* operators *)
(* ///////--- int operators ---////////*)
fun op_add_int (info) = Absyn.LONGID(modidRML info, Absyn.IDENT("int_add", info), info)
fun op_sub_int (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("int_sub", info), info)
fun op_neg_int (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("int_neg", info), info)
fun op_mul_int (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("int_mul", info), info)
fun op_div_int (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("int_div", info), info)
fun op_mod_int (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("int_mod", info), info)
fun op_eq_int (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("int_eq", info), info)
fun op_ge_int (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("int_ge", info), info)
fun op_gt_int (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("int_gt", info), info)
fun op_le_int (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("int_le", info), info)
fun op_lt_int (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("int_lt", info), info)
fun op_ne_int (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("int_ne", info), info)
(* ///////--- real operators ---////////*)
fun op_add_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_add", info), info)
fun op_sub_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_sub", info), info)
fun op_neg_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_neg", info), info)
fun op_mul_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_mul", info), info)
fun op_div_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_div", info), info)
fun op_mod_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_mod", info), info)
fun op_pow_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_pow", info), info)
fun op_eq_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_eq", info), info)
fun op_ge_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_ge", info), info)
fun op_gt_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_gt", info), info)
fun op_le_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_le", info), info)
fun op_lt_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_lt", info), info)
fun op_ne_real (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("real_ne", info), info)
(* ///////--- string operators ---////////*)
fun op_add_string (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("string_append", info), info)
fun op_eq_string (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("string_equal", info), info)
(* ///////--- list operators ---////////*)
fun op_add_list (info) = Absyn.LONGID(modidRML (info), Absyn.IDENT("list_append", info), info)


fun exp_nil(info) = Absyn.CONexp(id_nil(info), info)
fun exp_cons(e,es,info) = Absyn.STRUCTexp(ctor_cons(info), [e,es], info)
fun mkexplst(lst,info) = mklst(lst, exp_nil, exp_cons, info)

fun pat_nil(info) = Absyn.CONpat(id_nil(info), info)
fun pat_cons(p,ps,info) = Absyn.STRUCTpat(ctor_cons(info), [p,ps], ref [], info)
fun mkpatlst(lst,info) = mklst(lst, pat_nil, pat_cons, info)

fun mktuplety([ty], _) = ty
  | mktuplety(tyseq, info) = Absyn.TUPLEty(tyseq, info)

fun mkCtxInfo(Absyn.INFO(file1,loc1,loc2,Absyn.LOC(sl1,sc1,el1,ec1)),
              Absyn.INFO(file2,loc3,loc4,Absyn.LOC(sl2,sc2,el2,ec2))) =
				Absyn.INFO(file1,loc1,loc4,Absyn.LOC(sl1,sc1,el2,ec2))

fun join_default(c1, NONE) = c1
  | join_default(c1, SOME(c2 as Absyn.CLAUSE1(_,_,_,_,_,_,infoC2))) =
      let fun join(c1 as Absyn.CLAUSE1(_,_,_,_,_,_,infoC1)) = 
			Absyn.CLAUSE2(c1, c2, mkCtxInfo(infoC1,infoC2))
	    | join(Absyn.CLAUSE2(c11,c12, infoC1)) = 
			Absyn.CLAUSE2(c11, join c12, mkCtxInfo(infoC1, infoC2))
      in
		join c1
      end
  | join_default(c1, SOME(c2 as Absyn.CLAUSE2(_,_,infoC2))) =
      let fun join(c1 as Absyn.CLAUSE1(_,_,_,_,_,_,infoC1)) = 
			Absyn.CLAUSE2(c1, c2, mkCtxInfo(infoC1,infoC2))
	    | join(Absyn.CLAUSE2(c11,c12, infoC1)) = 
			Absyn.CLAUSE2(c11, join c12, mkCtxInfo(infoC1, infoC2))
      in
		join c1
      end      
 

end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\163\001\010\000\163\001\032\000\163\001\000\000\
\\001\000\001\000\164\001\010\000\164\001\032\000\164\001\000\000\
\\001\000\001\000\165\001\010\000\165\001\032\000\165\001\000\000\
\\001\000\001\000\166\001\010\000\166\001\032\000\166\001\000\000\
\\001\000\001\000\167\001\010\000\167\001\032\000\167\001\000\000\
\\001\000\001\000\168\001\010\000\168\001\032\000\168\001\000\000\
\\001\000\001\000\169\001\010\000\169\001\032\000\169\001\000\000\
\\001\000\001\000\170\001\010\000\170\001\032\000\170\001\000\000\
\\001\000\001\000\171\001\010\000\171\001\032\000\171\001\000\000\
\\001\000\001\000\172\001\010\000\172\001\032\000\172\001\000\000\
\\001\000\001\000\173\001\010\000\173\001\032\000\173\001\000\000\
\\001\000\001\000\174\001\010\000\174\001\032\000\174\001\000\000\
\\001\000\001\000\175\001\010\000\175\001\032\000\175\001\000\000\
\\001\000\001\000\176\001\010\000\176\001\032\000\176\001\000\000\
\\001\000\001\000\177\001\010\000\177\001\032\000\177\001\000\000\
\\001\000\001\000\178\001\010\000\178\001\032\000\178\001\000\000\
\\001\000\001\000\179\001\010\000\179\001\032\000\179\001\000\000\
\\001\000\001\000\180\001\010\000\180\001\032\000\180\001\000\000\
\\001\000\001\000\181\001\010\000\181\001\032\000\181\001\000\000\
\\001\000\001\000\182\001\010\000\182\001\032\000\182\001\000\000\
\\001\000\001\000\183\001\010\000\183\001\032\000\183\001\000\000\
\\001\000\001\000\184\001\010\000\184\001\032\000\184\001\000\000\
\\001\000\001\000\185\001\010\000\185\001\032\000\185\001\000\000\
\\001\000\001\000\186\001\010\000\186\001\032\000\186\001\000\000\
\\001\000\001\000\187\001\010\000\187\001\032\000\187\001\000\000\
\\001\000\001\000\188\001\010\000\188\001\032\000\188\001\000\000\
\\001\000\001\000\189\001\010\000\189\001\032\000\189\001\000\000\
\\001\000\001\000\190\001\010\000\190\001\032\000\190\001\000\000\
\\001\000\001\000\191\001\010\000\191\001\032\000\191\001\000\000\
\\001\000\001\000\192\001\010\000\192\001\020\000\229\000\032\000\192\001\000\000\
\\001\000\001\000\193\001\010\000\193\001\032\000\193\001\000\000\
\\001\000\001\000\194\001\010\000\194\001\032\000\194\001\000\000\
\\001\000\001\000\195\001\010\000\195\001\032\000\195\001\000\000\
\\001\000\001\000\196\001\010\000\196\001\032\000\196\001\000\000\
\\001\000\001\000\197\001\009\000\197\001\010\000\197\001\011\000\197\001\
\\016\000\197\001\030\000\197\001\031\000\197\001\032\000\197\001\
\\038\000\197\001\040\000\197\001\042\000\197\001\000\000\
\\001\000\001\000\198\001\008\000\104\000\009\000\198\001\010\000\198\001\
\\011\000\198\001\016\000\198\001\030\000\198\001\031\000\198\001\
\\032\000\198\001\038\000\198\001\040\000\198\001\042\000\198\001\000\000\
\\001\000\001\000\199\001\008\000\199\001\009\000\199\001\010\000\199\001\
\\011\000\199\001\016\000\199\001\030\000\199\001\031\000\199\001\
\\032\000\199\001\038\000\199\001\040\000\199\001\042\000\199\001\000\000\
\\001\000\001\000\200\001\008\000\200\001\009\000\200\001\010\000\200\001\
\\011\000\200\001\016\000\200\001\030\000\200\001\031\000\200\001\
\\032\000\200\001\038\000\200\001\040\000\200\001\042\000\200\001\000\000\
\\001\000\001\000\201\001\008\000\201\001\009\000\201\001\010\000\201\001\
\\011\000\201\001\016\000\201\001\030\000\201\001\031\000\201\001\
\\032\000\201\001\038\000\201\001\040\000\201\001\042\000\201\001\000\000\
\\001\000\001\000\202\001\008\000\202\001\009\000\202\001\010\000\202\001\
\\011\000\202\001\016\000\202\001\030\000\202\001\031\000\202\001\
\\032\000\202\001\038\000\202\001\040\000\202\001\042\000\202\001\000\000\
\\001\000\001\000\203\001\004\000\203\001\010\000\203\001\012\000\203\001\
\\014\000\203\001\020\000\203\001\032\000\203\001\033\000\203\001\000\000\
\\001\000\001\000\204\001\004\000\204\001\008\000\230\000\010\000\204\001\
\\012\000\204\001\014\000\204\001\020\000\204\001\032\000\204\001\
\\033\000\204\001\000\000\
\\001\000\001\000\205\001\004\000\205\001\008\000\205\001\009\000\205\001\
\\010\000\205\001\011\000\205\001\012\000\205\001\014\000\205\001\
\\016\000\205\001\020\000\205\001\030\000\205\001\031\000\205\001\
\\032\000\205\001\033\000\205\001\038\000\205\001\040\000\205\001\
\\042\000\205\001\000\000\
\\001\000\001\000\206\001\004\000\206\001\008\000\206\001\009\000\206\001\
\\010\000\206\001\011\000\206\001\012\000\206\001\014\000\206\001\
\\016\000\206\001\020\000\206\001\030\000\206\001\031\000\206\001\
\\032\000\206\001\033\000\206\001\038\000\206\001\040\000\206\001\
\\042\000\206\001\000\000\
\\001\000\001\000\207\001\004\000\207\001\008\000\207\001\009\000\207\001\
\\010\000\207\001\011\000\207\001\012\000\207\001\014\000\207\001\
\\016\000\207\001\020\000\207\001\030\000\207\001\031\000\207\001\
\\032\000\207\001\033\000\207\001\038\000\207\001\040\000\207\001\
\\042\000\207\001\000\000\
\\001\000\001\000\208\001\004\000\208\001\008\000\208\001\009\000\208\001\
\\010\000\208\001\011\000\208\001\012\000\208\001\014\000\208\001\
\\016\000\208\001\020\000\208\001\030\000\208\001\031\000\208\001\
\\032\000\208\001\033\000\208\001\035\000\208\001\038\000\208\001\
\\040\000\208\001\042\000\208\001\044\000\208\001\045\000\208\001\
\\047\000\208\001\048\000\208\001\049\000\208\001\050\000\208\001\
\\051\000\208\001\052\000\208\001\053\000\208\001\054\000\208\001\
\\055\000\208\001\056\000\208\001\058\000\208\001\059\000\208\001\
\\060\000\208\001\061\000\208\001\062\000\208\001\063\000\208\001\
\\064\000\208\001\065\000\208\001\066\000\208\001\067\000\208\001\
\\068\000\208\001\069\000\208\001\070\000\208\001\000\000\
\\001\000\001\000\209\001\004\000\209\001\006\000\076\000\008\000\209\001\
\\009\000\209\001\010\000\209\001\011\000\209\001\012\000\209\001\
\\014\000\209\001\016\000\209\001\020\000\209\001\021\000\075\000\
\\022\000\009\000\023\000\074\000\025\000\103\000\029\000\072\000\
\\030\000\209\001\031\000\209\001\032\000\209\001\033\000\209\001\
\\034\000\071\000\038\000\209\001\040\000\209\001\042\000\209\001\000\000\
\\001\000\001\000\209\001\004\000\209\001\008\000\209\001\009\000\209\001\
\\010\000\209\001\011\000\209\001\012\000\209\001\014\000\209\001\
\\016\000\209\001\020\000\209\001\030\000\209\001\031\000\209\001\
\\032\000\209\001\033\000\209\001\038\000\209\001\040\000\209\001\
\\042\000\209\001\000\000\
\\001\000\001\000\210\001\004\000\210\001\008\000\210\001\009\000\210\001\
\\010\000\210\001\011\000\210\001\012\000\210\001\014\000\210\001\
\\016\000\210\001\020\000\210\001\030\000\210\001\031\000\210\001\
\\032\000\210\001\033\000\210\001\035\000\210\001\038\000\210\001\
\\040\000\210\001\042\000\210\001\044\000\210\001\045\000\210\001\
\\047\000\210\001\048\000\210\001\049\000\210\001\050\000\210\001\
\\051\000\210\001\052\000\210\001\053\000\210\001\054\000\210\001\
\\055\000\210\001\056\000\210\001\058\000\210\001\059\000\210\001\
\\060\000\210\001\061\000\210\001\062\000\210\001\063\000\210\001\
\\064\000\210\001\065\000\210\001\066\000\210\001\067\000\210\001\
\\068\000\210\001\069\000\210\001\070\000\210\001\000\000\
\\001\000\001\000\211\001\006\000\076\000\010\000\211\001\020\000\211\001\
\\021\000\075\000\022\000\009\000\023\000\074\000\025\000\103\000\
\\029\000\072\000\032\000\211\001\034\000\071\000\035\000\209\001\
\\044\000\209\001\045\000\209\001\047\000\209\001\048\000\209\001\
\\049\000\209\001\050\000\209\001\051\000\209\001\052\000\209\001\
\\053\000\209\001\054\000\209\001\055\000\209\001\056\000\209\001\
\\058\000\209\001\059\000\209\001\060\000\209\001\061\000\209\001\
\\062\000\209\001\063\000\209\001\064\000\209\001\065\000\209\001\
\\066\000\209\001\067\000\209\001\068\000\209\001\069\000\209\001\
\\070\000\209\001\000\000\
\\001\000\001\000\212\001\004\000\212\001\010\000\212\001\012\000\212\001\
\\014\000\212\001\020\000\212\001\032\000\212\001\033\000\212\001\000\000\
\\001\000\001\000\213\001\004\000\213\001\010\000\213\001\012\000\213\001\
\\014\000\213\001\020\000\213\001\032\000\213\001\033\000\213\001\000\000\
\\001\000\001\000\214\001\004\000\214\001\008\000\214\001\009\000\214\001\
\\010\000\214\001\011\000\214\001\012\000\214\001\014\000\214\001\
\\016\000\214\001\020\000\214\001\030\000\214\001\031\000\214\001\
\\032\000\214\001\033\000\214\001\038\000\214\001\040\000\214\001\
\\042\000\214\001\000\000\
\\001\000\001\000\228\001\004\000\228\001\010\000\228\001\012\000\228\001\
\\014\000\228\001\020\000\228\001\032\000\228\001\033\000\228\001\000\000\
\\001\000\001\000\229\001\004\000\229\001\008\000\021\001\010\000\229\001\
\\012\000\229\001\014\000\229\001\020\000\229\001\032\000\229\001\
\\033\000\229\001\000\000\
\\001\000\001\000\230\001\004\000\230\001\008\000\230\001\009\000\230\001\
\\010\000\230\001\012\000\230\001\014\000\230\001\017\000\230\001\
\\020\000\230\001\031\000\230\001\032\000\230\001\033\000\230\001\000\000\
\\001\000\001\000\231\001\004\000\231\001\008\000\231\001\009\000\231\001\
\\010\000\231\001\012\000\231\001\014\000\231\001\017\000\231\001\
\\020\000\231\001\031\000\231\001\032\000\231\001\033\000\231\001\000\000\
\\001\000\001\000\232\001\004\000\232\001\008\000\232\001\009\000\232\001\
\\010\000\232\001\012\000\232\001\014\000\232\001\017\000\232\001\
\\020\000\232\001\031\000\232\001\032\000\232\001\033\000\232\001\000\000\
\\001\000\001\000\233\001\004\000\233\001\008\000\233\001\009\000\233\001\
\\010\000\233\001\012\000\233\001\014\000\233\001\017\000\233\001\
\\020\000\233\001\031\000\233\001\032\000\233\001\033\000\233\001\000\000\
\\001\000\001\000\234\001\004\000\234\001\008\000\234\001\009\000\234\001\
\\010\000\234\001\012\000\234\001\014\000\234\001\017\000\234\001\
\\020\000\234\001\031\000\234\001\032\000\234\001\033\000\234\001\000\000\
\\001\000\001\000\235\001\004\000\235\001\006\000\022\002\008\000\235\001\
\\009\000\235\001\010\000\235\001\012\000\235\001\014\000\235\001\
\\017\000\235\001\020\000\235\001\021\000\022\002\022\000\022\002\
\\023\000\022\002\025\000\022\002\029\000\022\002\031\000\235\001\
\\032\000\235\001\033\000\235\001\034\000\022\002\041\000\022\002\000\000\
\\001\000\001\000\235\001\004\000\235\001\008\000\235\001\009\000\235\001\
\\010\000\235\001\012\000\235\001\014\000\235\001\017\000\235\001\
\\020\000\235\001\031\000\235\001\032\000\235\001\033\000\235\001\000\000\
\\001\000\001\000\236\001\004\000\236\001\006\000\023\002\008\000\236\001\
\\009\000\236\001\010\000\236\001\012\000\236\001\013\000\099\000\
\\014\000\236\001\017\000\236\001\020\000\236\001\021\000\023\002\
\\022\000\023\002\023\000\023\002\025\000\023\002\029\000\023\002\
\\031\000\236\001\032\000\236\001\033\000\236\001\034\000\023\002\
\\041\000\023\002\000\000\
\\001\000\001\000\236\001\004\000\236\001\008\000\236\001\009\000\236\001\
\\010\000\236\001\012\000\236\001\013\000\099\000\014\000\236\001\
\\017\000\236\001\020\000\236\001\031\000\236\001\032\000\236\001\
\\033\000\236\001\000\000\
\\001\000\001\000\237\001\004\000\237\001\008\000\237\001\009\000\237\001\
\\010\000\237\001\012\000\237\001\014\000\237\001\017\000\237\001\
\\020\000\237\001\031\000\237\001\032\000\237\001\033\000\237\001\000\000\
\\001\000\001\000\238\001\006\000\076\000\010\000\238\001\021\000\075\000\
\\022\000\009\000\023\000\213\000\025\000\219\000\029\000\072\000\
\\032\000\238\001\034\000\071\000\041\000\211\000\000\000\
\\001\000\001\000\239\001\004\000\239\001\010\000\239\001\012\000\239\001\
\\014\000\239\001\020\000\239\001\032\000\239\001\033\000\239\001\000\000\
\\001\000\001\000\240\001\004\000\240\001\010\000\240\001\012\000\240\001\
\\014\000\240\001\020\000\240\001\032\000\240\001\033\000\240\001\000\000\
\\001\000\001\000\241\001\004\000\241\001\008\000\241\001\009\000\241\001\
\\010\000\241\001\012\000\241\001\014\000\241\001\017\000\241\001\
\\020\000\241\001\031\000\241\001\032\000\241\001\033\000\241\001\000\000\
\\001\000\001\000\252\001\004\000\252\001\008\000\252\001\009\000\252\001\
\\010\000\252\001\011\000\252\001\012\000\252\001\014\000\252\001\
\\016\000\252\001\017\000\252\001\020\000\252\001\030\000\252\001\
\\031\000\252\001\032\000\252\001\033\000\252\001\035\000\252\001\
\\038\000\252\001\040\000\252\001\042\000\252\001\044\000\252\001\
\\045\000\252\001\047\000\252\001\048\000\252\001\049\000\252\001\
\\050\000\252\001\051\000\252\001\052\000\252\001\053\000\252\001\
\\054\000\252\001\055\000\252\001\056\000\252\001\058\000\252\001\
\\059\000\252\001\060\000\252\001\061\000\252\001\062\000\252\001\
\\063\000\252\001\064\000\252\001\065\000\252\001\066\000\252\001\
\\067\000\252\001\068\000\252\001\069\000\252\001\070\000\252\001\000\000\
\\001\000\001\000\253\001\004\000\253\001\008\000\253\001\009\000\253\001\
\\010\000\253\001\011\000\253\001\012\000\253\001\014\000\253\001\
\\016\000\253\001\017\000\253\001\020\000\253\001\030\000\253\001\
\\031\000\253\001\032\000\253\001\033\000\253\001\035\000\253\001\
\\038\000\253\001\040\000\253\001\042\000\253\001\044\000\253\001\
\\045\000\253\001\047\000\253\001\048\000\253\001\049\000\253\001\
\\050\000\253\001\051\000\253\001\052\000\253\001\053\000\253\001\
\\054\000\253\001\055\000\253\001\056\000\253\001\058\000\253\001\
\\059\000\253\001\060\000\253\001\061\000\253\001\062\000\253\001\
\\063\000\253\001\064\000\253\001\065\000\253\001\066\000\253\001\
\\067\000\253\001\068\000\253\001\069\000\253\001\070\000\253\001\000\000\
\\001\000\001\000\254\001\004\000\254\001\008\000\254\001\009\000\254\001\
\\010\000\254\001\011\000\254\001\012\000\254\001\014\000\254\001\
\\016\000\254\001\017\000\254\001\020\000\254\001\030\000\254\001\
\\031\000\254\001\032\000\254\001\033\000\254\001\035\000\254\001\
\\038\000\254\001\040\000\254\001\042\000\254\001\044\000\254\001\
\\045\000\254\001\047\000\254\001\048\000\254\001\049\000\254\001\
\\050\000\254\001\051\000\254\001\052\000\254\001\053\000\254\001\
\\054\000\254\001\055\000\254\001\056\000\254\001\058\000\254\001\
\\059\000\254\001\060\000\254\001\061\000\254\001\062\000\254\001\
\\063\000\254\001\064\000\254\001\065\000\254\001\066\000\254\001\
\\067\000\254\001\068\000\254\001\069\000\254\001\070\000\254\001\000\000\
\\001\000\001\000\255\001\004\000\255\001\008\000\255\001\009\000\255\001\
\\010\000\255\001\011\000\255\001\012\000\255\001\014\000\255\001\
\\016\000\255\001\017\000\255\001\020\000\255\001\030\000\255\001\
\\031\000\255\001\032\000\255\001\033\000\255\001\035\000\255\001\
\\038\000\255\001\040\000\255\001\042\000\255\001\044\000\255\001\
\\045\000\255\001\047\000\255\001\048\000\255\001\049\000\255\001\
\\050\000\255\001\051\000\255\001\052\000\255\001\053\000\255\001\
\\054\000\255\001\055\000\255\001\056\000\255\001\058\000\255\001\
\\059\000\255\001\060\000\255\001\061\000\255\001\062\000\255\001\
\\063\000\255\001\064\000\255\001\065\000\255\001\066\000\255\001\
\\067\000\255\001\068\000\255\001\069\000\255\001\070\000\255\001\000\000\
\\001\000\001\000\021\002\002\000\021\002\004\000\021\002\005\000\021\002\
\\006\000\021\002\008\000\021\002\009\000\021\002\010\000\021\002\
\\011\000\021\002\012\000\021\002\014\000\021\002\016\000\021\002\
\\017\000\021\002\018\000\021\002\020\000\021\002\021\000\021\002\
\\022\000\021\002\023\000\021\002\025\000\021\002\029\000\021\002\
\\030\000\021\002\031\000\021\002\032\000\021\002\033\000\021\002\
\\034\000\021\002\035\000\021\002\038\000\021\002\040\000\021\002\
\\041\000\021\002\042\000\021\002\043\000\021\002\044\000\021\002\
\\045\000\021\002\047\000\021\002\048\000\021\002\049\000\021\002\
\\050\000\021\002\051\000\021\002\052\000\021\002\053\000\021\002\
\\054\000\021\002\055\000\021\002\056\000\021\002\058\000\021\002\
\\059\000\021\002\060\000\021\002\061\000\021\002\062\000\021\002\
\\063\000\021\002\064\000\021\002\065\000\021\002\066\000\021\002\
\\067\000\021\002\068\000\021\002\069\000\021\002\070\000\021\002\000\000\
\\001\000\001\000\022\002\002\000\022\002\004\000\022\002\005\000\022\002\
\\006\000\022\002\008\000\022\002\009\000\022\002\010\000\022\002\
\\011\000\022\002\012\000\022\002\014\000\022\002\016\000\022\002\
\\017\000\022\002\018\000\022\002\020\000\022\002\021\000\022\002\
\\022\000\022\002\023\000\022\002\025\000\022\002\029\000\022\002\
\\030\000\022\002\031\000\022\002\032\000\022\002\033\000\022\002\
\\034\000\022\002\035\000\022\002\038\000\022\002\040\000\022\002\
\\042\000\022\002\043\000\022\002\044\000\022\002\045\000\022\002\
\\047\000\022\002\048\000\022\002\049\000\022\002\050\000\022\002\
\\051\000\022\002\052\000\022\002\053\000\022\002\054\000\022\002\
\\055\000\022\002\056\000\022\002\058\000\022\002\059\000\022\002\
\\060\000\022\002\061\000\022\002\062\000\022\002\063\000\022\002\
\\064\000\022\002\065\000\022\002\066\000\022\002\067\000\022\002\
\\068\000\022\002\069\000\022\002\070\000\022\002\000\000\
\\001\000\001\000\023\002\002\000\023\002\004\000\023\002\005\000\023\002\
\\006\000\023\002\008\000\023\002\009\000\023\002\010\000\023\002\
\\011\000\023\002\012\000\023\002\013\000\099\000\014\000\023\002\
\\016\000\023\002\017\000\023\002\018\000\023\002\020\000\023\002\
\\021\000\023\002\022\000\023\002\023\000\023\002\025\000\023\002\
\\029\000\023\002\030\000\023\002\031\000\023\002\032\000\023\002\
\\033\000\023\002\034\000\023\002\035\000\023\002\038\000\023\002\
\\040\000\023\002\042\000\023\002\043\000\023\002\000\000\
\\001\000\001\000\023\002\006\000\023\002\010\000\023\002\013\000\099\000\
\\017\000\165\000\020\000\023\002\021\000\023\002\022\000\023\002\
\\023\000\023\002\025\000\023\002\029\000\023\002\032\000\023\002\
\\034\000\023\002\035\000\023\002\044\000\023\002\045\000\023\002\
\\047\000\023\002\048\000\023\002\049\000\023\002\050\000\023\002\
\\051\000\023\002\052\000\023\002\053\000\023\002\054\000\023\002\
\\055\000\023\002\056\000\023\002\058\000\023\002\059\000\023\002\
\\060\000\023\002\061\000\023\002\062\000\023\002\063\000\023\002\
\\064\000\023\002\065\000\023\002\066\000\023\002\067\000\023\002\
\\068\000\023\002\069\000\023\002\070\000\023\002\000\000\
\\001\000\001\000\024\002\002\000\024\002\003\000\024\002\004\000\024\002\
\\005\000\024\002\006\000\024\002\007\000\024\002\008\000\024\002\
\\009\000\024\002\010\000\024\002\011\000\024\002\012\000\024\002\
\\013\000\024\002\014\000\024\002\016\000\024\002\017\000\024\002\
\\018\000\024\002\020\000\024\002\021\000\024\002\022\000\024\002\
\\023\000\024\002\025\000\024\002\028\000\024\002\029\000\024\002\
\\030\000\024\002\031\000\024\002\032\000\024\002\033\000\024\002\
\\034\000\024\002\035\000\024\002\038\000\024\002\040\000\024\002\
\\041\000\024\002\042\000\024\002\043\000\024\002\044\000\024\002\
\\045\000\024\002\047\000\024\002\048\000\024\002\049\000\024\002\
\\050\000\024\002\051\000\024\002\052\000\024\002\053\000\024\002\
\\054\000\024\002\055\000\024\002\056\000\024\002\058\000\024\002\
\\059\000\024\002\060\000\024\002\061\000\024\002\062\000\024\002\
\\063\000\024\002\064\000\024\002\065\000\024\002\066\000\024\002\
\\067\000\024\002\068\000\024\002\069\000\024\002\070\000\024\002\000\000\
\\001\000\001\000\196\000\010\000\160\001\032\000\160\001\000\000\
\\001\000\002\000\133\001\011\000\133\001\016\000\133\001\030\000\133\001\
\\038\000\133\001\040\000\133\001\042\000\133\001\000\000\
\\001\000\002\000\140\001\011\000\140\001\014\000\140\001\016\000\140\001\
\\018\000\140\001\030\000\140\001\038\000\140\001\040\000\140\001\
\\042\000\140\001\000\000\
\\001\000\002\000\143\001\011\000\143\001\014\000\143\001\016\000\143\001\
\\018\000\143\001\030\000\143\001\038\000\143\001\040\000\143\001\
\\042\000\143\001\043\000\143\001\000\000\
\\001\000\002\000\144\001\011\000\144\001\014\000\144\001\016\000\144\001\
\\018\000\144\001\030\000\144\001\038\000\144\001\040\000\144\001\
\\042\000\144\001\043\000\144\001\000\000\
\\001\000\002\000\145\001\005\000\159\000\011\000\145\001\014\000\145\001\
\\016\000\145\001\018\000\145\001\030\000\145\001\038\000\145\001\
\\040\000\145\001\042\000\145\001\043\000\145\001\000\000\
\\001\000\002\000\146\001\005\000\146\001\011\000\146\001\014\000\146\001\
\\016\000\146\001\018\000\146\001\028\000\158\000\030\000\146\001\
\\038\000\146\001\040\000\146\001\042\000\146\001\043\000\146\001\000\000\
\\001\000\002\000\147\001\005\000\147\001\011\000\147\001\014\000\147\001\
\\016\000\147\001\018\000\147\001\030\000\147\001\038\000\147\001\
\\040\000\147\001\042\000\147\001\043\000\147\001\000\000\
\\001\000\002\000\000\002\009\000\000\002\011\000\000\002\014\000\000\002\
\\016\000\000\002\017\000\000\002\018\000\000\002\030\000\000\002\
\\032\000\000\002\038\000\000\002\040\000\000\002\042\000\000\002\000\000\
\\001\000\002\000\001\002\009\000\001\002\011\000\001\002\014\000\001\002\
\\016\000\001\002\017\000\001\002\018\000\001\002\020\000\015\002\
\\030\000\001\002\032\000\001\002\038\000\001\002\040\000\001\002\
\\042\000\001\002\000\000\
\\001\000\002\000\002\002\005\000\002\002\009\000\002\002\011\000\002\002\
\\014\000\002\002\016\000\002\002\017\000\002\002\018\000\002\002\
\\020\000\002\002\030\000\002\002\032\000\002\002\038\000\002\002\
\\040\000\002\002\042\000\002\002\043\000\002\002\000\000\
\\001\000\002\000\003\002\005\000\003\002\009\000\003\002\011\000\003\002\
\\014\000\003\002\016\000\003\002\017\000\003\002\018\000\003\002\
\\020\000\003\002\022\000\009\000\030\000\003\002\032\000\003\002\
\\035\000\119\000\038\000\003\002\040\000\003\002\042\000\003\002\
\\043\000\003\002\000\000\
\\001\000\002\000\004\002\005\000\004\002\009\000\004\002\011\000\004\002\
\\014\000\004\002\016\000\004\002\017\000\004\002\018\000\004\002\
\\020\000\004\002\022\000\009\000\030\000\004\002\032\000\004\002\
\\035\000\220\000\038\000\004\002\040\000\004\002\042\000\004\002\
\\043\000\004\002\000\000\
\\001\000\002\000\005\002\005\000\005\002\009\000\005\002\011\000\005\002\
\\014\000\005\002\016\000\005\002\017\000\005\002\018\000\005\002\
\\020\000\005\002\030\000\005\002\032\000\005\002\038\000\005\002\
\\040\000\005\002\042\000\005\002\043\000\005\002\000\000\
\\001\000\002\000\006\002\005\000\006\002\009\000\006\002\011\000\006\002\
\\014\000\006\002\016\000\006\002\017\000\006\002\018\000\006\002\
\\020\000\006\002\022\000\006\002\030\000\006\002\032\000\006\002\
\\035\000\006\002\038\000\006\002\040\000\006\002\042\000\006\002\
\\043\000\006\002\000\000\
\\001\000\002\000\007\002\005\000\007\002\009\000\007\002\011\000\007\002\
\\014\000\007\002\016\000\007\002\017\000\007\002\018\000\007\002\
\\020\000\007\002\022\000\007\002\030\000\007\002\032\000\007\002\
\\035\000\007\002\038\000\007\002\040\000\007\002\042\000\007\002\
\\043\000\007\002\000\000\
\\001\000\002\000\008\002\005\000\008\002\009\000\008\002\011\000\008\002\
\\014\000\008\002\016\000\008\002\017\000\008\002\018\000\008\002\
\\020\000\008\002\022\000\008\002\030\000\008\002\032\000\008\002\
\\035\000\008\002\038\000\008\002\040\000\008\002\042\000\008\002\
\\043\000\008\002\000\000\
\\001\000\002\000\009\002\005\000\009\002\009\000\009\002\011\000\009\002\
\\014\000\009\002\016\000\009\002\017\000\009\002\018\000\009\002\
\\020\000\009\002\022\000\009\002\030\000\009\002\032\000\009\002\
\\035\000\009\002\038\000\009\002\040\000\009\002\042\000\009\002\
\\043\000\009\002\000\000\
\\001\000\002\000\010\002\005\000\010\002\009\000\010\002\011\000\010\002\
\\014\000\010\002\016\000\010\002\017\000\010\002\018\000\010\002\
\\020\000\010\002\022\000\010\002\030\000\010\002\032\000\010\002\
\\035\000\010\002\038\000\010\002\040\000\010\002\042\000\010\002\
\\043\000\010\002\000\000\
\\001\000\002\000\013\002\009\000\013\002\011\000\013\002\014\000\013\002\
\\016\000\013\002\017\000\013\002\018\000\013\002\020\000\013\002\
\\030\000\013\002\032\000\013\002\038\000\013\002\040\000\013\002\
\\042\000\013\002\000\000\
\\001\000\002\000\014\002\009\000\014\002\011\000\014\002\014\000\014\002\
\\016\000\014\002\017\000\014\002\018\000\014\002\020\000\014\002\
\\022\000\009\000\030\000\014\002\032\000\014\002\038\000\014\002\
\\040\000\014\002\042\000\014\002\000\000\
\\001\000\002\000\015\002\009\000\015\002\011\000\015\002\014\000\015\002\
\\016\000\015\002\017\000\015\002\018\000\015\002\030\000\015\002\
\\032\000\015\002\038\000\015\002\040\000\015\002\042\000\015\002\000\000\
\\001\000\002\000\023\002\005\000\023\002\007\000\116\000\009\000\023\002\
\\011\000\023\002\013\000\099\000\014\000\023\002\016\000\023\002\
\\017\000\023\002\018\000\023\002\020\000\023\002\022\000\023\002\
\\030\000\023\002\032\000\023\002\035\000\023\002\038\000\023\002\
\\040\000\023\002\042\000\023\002\043\000\023\002\000\000\
\\001\000\002\000\025\002\005\000\025\002\009\000\025\002\011\000\025\002\
\\014\000\025\002\016\000\025\002\017\000\025\002\018\000\025\002\
\\020\000\025\002\022\000\025\002\030\000\025\002\032\000\025\002\
\\035\000\025\002\038\000\025\002\040\000\025\002\042\000\025\002\
\\043\000\025\002\000\000\
\\001\000\002\000\044\000\011\000\139\001\014\000\139\001\016\000\139\001\
\\018\000\139\001\030\000\139\001\038\000\139\001\040\000\139\001\
\\042\000\139\001\000\000\
\\001\000\002\000\049\000\011\000\132\001\016\000\132\001\030\000\132\001\
\\038\000\132\001\040\000\132\001\042\000\132\001\000\000\
\\001\000\002\000\051\000\011\000\142\001\014\000\142\001\016\000\142\001\
\\018\000\142\001\030\000\142\001\038\000\142\001\040\000\142\001\
\\042\000\142\001\043\000\142\001\000\000\
\\001\000\003\000\006\001\006\000\023\002\008\000\236\001\009\000\236\001\
\\013\000\099\000\017\000\236\001\021\000\023\002\022\000\023\002\
\\023\000\023\002\025\000\023\002\029\000\023\002\031\000\236\001\
\\032\000\236\001\034\000\023\002\041\000\023\002\000\000\
\\001\000\003\000\006\001\006\000\023\002\008\000\236\001\009\000\236\001\
\\013\000\099\000\017\000\062\001\021\000\023\002\022\000\023\002\
\\023\000\023\002\025\000\023\002\029\000\023\002\032\000\236\001\
\\034\000\023\002\041\000\023\002\000\000\
\\001\000\003\000\006\001\006\000\023\002\008\000\236\001\009\000\236\001\
\\013\000\099\000\017\000\070\001\021\000\023\002\022\000\023\002\
\\023\000\023\002\025\000\023\002\029\000\023\002\031\000\236\001\
\\032\000\236\001\034\000\023\002\041\000\023\002\000\000\
\\001\000\004\000\152\001\012\000\152\001\014\000\152\001\033\000\152\001\000\000\
\\001\000\004\000\153\001\012\000\153\001\014\000\153\001\033\000\153\001\000\000\
\\001\000\004\000\154\001\012\000\154\001\014\000\154\001\020\000\020\001\
\\033\000\154\001\000\000\
\\001\000\004\000\155\001\012\000\155\001\014\000\155\001\020\000\020\001\
\\033\000\155\001\000\000\
\\001\000\004\000\156\001\012\000\156\001\014\000\156\001\033\000\156\001\000\000\
\\001\000\004\000\157\001\012\000\157\001\014\000\157\001\033\000\157\001\000\000\
\\001\000\004\000\211\001\006\000\076\000\012\000\211\001\014\000\211\001\
\\019\000\068\001\021\000\075\000\022\000\009\000\023\000\074\000\
\\025\000\103\000\029\000\072\000\033\000\211\001\034\000\071\000\000\000\
\\001\000\004\000\238\001\006\000\076\000\012\000\238\001\014\000\238\001\
\\020\000\238\001\021\000\075\000\022\000\009\000\023\000\213\000\
\\025\000\219\000\029\000\072\000\033\000\238\001\034\000\071\000\
\\041\000\211\000\000\000\
\\001\000\004\000\115\000\012\000\150\001\014\000\150\001\033\000\114\000\000\000\
\\001\000\004\000\115\000\033\000\114\000\000\000\
\\001\000\006\000\076\000\010\000\158\001\021\000\075\000\022\000\009\000\
\\023\000\074\000\024\000\148\000\025\000\147\000\027\000\146\000\
\\029\000\072\000\034\000\071\000\045\000\145\000\056\000\144\000\000\000\
\\001\000\006\000\076\000\010\000\162\001\021\000\075\000\022\000\009\000\
\\023\000\074\000\024\000\148\000\025\000\147\000\027\000\146\000\
\\029\000\072\000\032\000\162\001\034\000\071\000\045\000\145\000\
\\056\000\144\000\000\000\
\\001\000\006\000\076\000\021\000\075\000\022\000\009\000\023\000\074\000\
\\024\000\148\000\025\000\147\000\027\000\146\000\029\000\072\000\
\\034\000\071\000\045\000\145\000\056\000\144\000\000\000\
\\001\000\006\000\076\000\021\000\075\000\022\000\009\000\023\000\074\000\
\\025\000\073\000\029\000\072\000\031\000\215\001\034\000\071\000\000\000\
\\001\000\006\000\076\000\021\000\075\000\022\000\009\000\023\000\074\000\
\\025\000\073\000\029\000\072\000\032\000\215\001\034\000\071\000\000\000\
\\001\000\006\000\076\000\021\000\075\000\022\000\009\000\023\000\074\000\
\\025\000\073\000\029\000\072\000\032\000\106\000\034\000\071\000\000\000\
\\001\000\006\000\076\000\021\000\075\000\022\000\009\000\023\000\074\000\
\\025\000\073\000\029\000\072\000\034\000\071\000\000\000\
\\001\000\006\000\076\000\021\000\075\000\022\000\009\000\023\000\074\000\
\\029\000\072\000\034\000\071\000\000\000\
\\001\000\006\000\076\000\021\000\075\000\022\000\009\000\023\000\213\000\
\\025\000\212\000\029\000\072\000\031\000\242\001\034\000\071\000\
\\041\000\211\000\000\000\
\\001\000\006\000\076\000\021\000\075\000\022\000\009\000\023\000\213\000\
\\025\000\212\000\029\000\072\000\032\000\246\001\034\000\071\000\
\\041\000\211\000\000\000\
\\001\000\006\000\076\000\021\000\075\000\022\000\009\000\023\000\213\000\
\\025\000\212\000\029\000\072\000\032\000\015\001\034\000\071\000\
\\041\000\211\000\000\000\
\\001\000\006\000\076\000\021\000\075\000\022\000\009\000\023\000\213\000\
\\025\000\212\000\029\000\072\000\034\000\071\000\041\000\211\000\000\000\
\\001\000\006\000\076\000\021\000\075\000\022\000\009\000\023\000\213\000\
\\025\000\219\000\029\000\072\000\034\000\071\000\041\000\211\000\000\000\
\\001\000\006\000\076\000\021\000\075\000\022\000\009\000\023\000\213\000\
\\029\000\072\000\034\000\071\000\041\000\211\000\000\000\
\\001\000\007\000\017\000\000\000\
\\001\000\007\000\048\000\017\000\135\001\000\000\
\\001\000\007\000\094\000\000\000\
\\001\000\007\000\096\000\000\000\
\\001\000\008\000\223\001\009\000\223\001\017\000\223\001\031\000\223\001\
\\032\000\223\001\000\000\
\\001\000\008\000\224\001\009\000\224\001\017\000\224\001\031\000\224\001\
\\032\000\224\001\000\000\
\\001\000\008\000\225\001\009\000\225\001\017\000\225\001\031\000\225\001\
\\032\000\225\001\000\000\
\\001\000\008\000\226\001\009\000\226\001\017\000\226\001\031\000\226\001\
\\032\000\226\001\000\000\
\\001\000\008\000\227\001\009\000\227\001\017\000\227\001\031\000\227\001\
\\032\000\227\001\000\000\
\\001\000\008\000\011\001\009\000\222\001\017\000\222\001\031\000\222\001\
\\032\000\222\001\000\000\
\\001\000\009\000\219\001\017\000\219\001\031\000\219\001\032\000\219\001\000\000\
\\001\000\009\000\220\001\017\000\220\001\031\000\220\001\032\000\220\001\000\000\
\\001\000\009\000\221\001\017\000\221\001\031\000\221\001\032\000\221\001\000\000\
\\001\000\009\000\079\000\032\000\020\002\000\000\
\\001\000\009\000\132\000\032\000\131\000\000\000\
\\001\000\009\000\134\000\031\000\217\001\032\000\217\001\000\000\
\\001\000\009\000\157\000\032\000\012\002\000\000\
\\001\000\009\000\157\000\032\000\156\000\000\000\
\\001\000\009\000\064\001\032\000\063\001\000\000\
\\001\000\009\000\066\001\031\000\244\001\000\000\
\\001\000\009\000\072\001\031\000\248\001\032\000\248\001\000\000\
\\001\000\009\000\105\001\000\000\
\\001\000\009\000\107\001\031\000\250\001\032\000\250\001\000\000\
\\001\000\010\000\159\001\000\000\
\\001\000\010\000\161\001\032\000\161\001\000\000\
\\001\000\010\000\197\000\000\000\
\\001\000\011\000\000\000\015\000\000\000\016\000\000\000\018\000\000\000\
\\030\000\000\000\038\000\000\000\040\000\000\000\042\000\000\000\000\000\
\\001\000\011\000\112\001\015\000\112\001\016\000\112\001\018\000\112\001\
\\030\000\112\001\038\000\112\001\040\000\112\001\042\000\112\001\000\000\
\\001\000\011\000\113\001\015\000\113\001\016\000\113\001\018\000\113\001\
\\030\000\113\001\038\000\113\001\040\000\113\001\042\000\113\001\000\000\
\\001\000\011\000\114\001\015\000\114\001\016\000\114\001\018\000\114\001\
\\030\000\114\001\038\000\114\001\040\000\114\001\042\000\114\001\000\000\
\\001\000\011\000\117\001\014\000\117\001\018\000\117\001\030\000\117\001\
\\038\000\117\001\040\000\117\001\042\000\117\001\000\000\
\\001\000\011\000\118\001\014\000\118\001\017\000\077\000\018\000\118\001\
\\030\000\118\001\038\000\118\001\040\000\118\001\042\000\118\001\000\000\
\\001\000\011\000\119\001\014\000\119\001\018\000\119\001\030\000\119\001\
\\038\000\119\001\040\000\119\001\042\000\119\001\000\000\
\\001\000\011\000\120\001\014\000\120\001\018\000\120\001\030\000\120\001\
\\038\000\120\001\040\000\120\001\042\000\120\001\000\000\
\\001\000\011\000\121\001\014\000\121\001\018\000\121\001\030\000\121\001\
\\038\000\121\001\040\000\121\001\042\000\121\001\000\000\
\\001\000\011\000\122\001\014\000\122\001\018\000\122\001\030\000\122\001\
\\038\000\122\001\040\000\122\001\042\000\122\001\000\000\
\\001\000\011\000\123\001\014\000\123\001\018\000\123\001\030\000\123\001\
\\038\000\123\001\040\000\123\001\042\000\123\001\000\000\
\\001\000\011\000\126\001\016\000\126\001\030\000\126\001\038\000\126\001\
\\040\000\126\001\042\000\126\001\000\000\
\\001\000\011\000\127\001\016\000\127\001\030\000\127\001\038\000\127\001\
\\040\000\127\001\042\000\127\001\000\000\
\\001\000\011\000\128\001\016\000\128\001\030\000\128\001\038\000\128\001\
\\040\000\128\001\042\000\128\001\000\000\
\\001\000\011\000\129\001\016\000\129\001\030\000\129\001\038\000\129\001\
\\040\000\129\001\042\000\129\001\000\000\
\\001\000\011\000\130\001\016\000\130\001\030\000\130\001\038\000\130\001\
\\040\000\130\001\042\000\130\001\000\000\
\\001\000\011\000\131\001\016\000\131\001\030\000\131\001\038\000\131\001\
\\040\000\131\001\042\000\131\001\000\000\
\\001\000\011\000\136\001\014\000\136\001\018\000\136\001\030\000\136\001\
\\038\000\136\001\040\000\136\001\042\000\136\001\043\000\053\000\000\000\
\\001\000\011\000\136\001\016\000\136\001\030\000\136\001\038\000\136\001\
\\040\000\136\001\042\000\136\001\043\000\053\000\000\000\
\\001\000\011\000\137\001\014\000\137\001\016\000\137\001\018\000\137\001\
\\030\000\137\001\038\000\137\001\040\000\137\001\042\000\137\001\000\000\
\\001\000\011\000\138\001\014\000\138\001\016\000\138\001\018\000\138\001\
\\030\000\138\001\038\000\138\001\040\000\138\001\042\000\138\001\000\000\
\\001\000\011\000\141\001\014\000\141\001\016\000\141\001\018\000\141\001\
\\030\000\141\001\038\000\141\001\040\000\141\001\042\000\141\001\
\\043\000\141\001\000\000\
\\001\000\011\000\016\000\016\000\124\001\030\000\015\000\038\000\014\000\
\\040\000\013\000\042\000\012\000\000\000\
\\001\000\011\000\041\000\014\000\115\001\018\000\040\000\030\000\039\000\
\\038\000\038\000\040\000\037\000\042\000\036\000\000\000\
\\001\000\012\000\151\001\014\000\151\001\000\000\
\\001\000\012\000\137\000\014\000\148\001\000\000\
\\001\000\014\000\116\001\000\000\
\\001\000\014\000\149\001\000\000\
\\001\000\014\000\055\000\000\000\
\\001\000\014\000\163\000\000\000\
\\001\000\016\000\125\001\000\000\
\\001\000\016\000\019\000\000\000\
\\001\000\017\000\134\001\000\000\
\\001\000\017\000\042\000\000\000\
\\001\000\017\000\077\000\000\000\
\\001\000\017\000\081\000\000\000\
\\001\000\017\000\091\000\000\000\
\\001\000\017\000\012\001\000\000\
\\001\000\020\000\117\000\000\000\
\\001\000\020\000\003\001\000\000\
\\001\000\020\000\004\001\000\000\
\\001\000\020\000\030\001\000\000\
\\001\000\020\000\031\001\000\000\
\\001\000\020\000\032\001\000\000\
\\001\000\020\000\033\001\000\000\
\\001\000\020\000\034\001\000\000\
\\001\000\020\000\035\001\000\000\
\\001\000\020\000\036\001\000\000\
\\001\000\020\000\037\001\000\000\
\\001\000\020\000\038\001\000\000\
\\001\000\020\000\039\001\000\000\
\\001\000\020\000\040\001\000\000\
\\001\000\020\000\041\001\000\000\
\\001\000\020\000\042\001\000\000\
\\001\000\020\000\043\001\000\000\
\\001\000\020\000\044\001\000\000\
\\001\000\020\000\045\001\000\000\
\\001\000\020\000\046\001\000\000\
\\001\000\020\000\047\001\000\000\
\\001\000\020\000\048\001\000\000\
\\001\000\020\000\049\001\000\000\
\\001\000\020\000\050\001\000\000\
\\001\000\020\000\051\001\000\000\
\\001\000\020\000\052\001\000\000\
\\001\000\020\000\053\001\000\000\
\\001\000\020\000\054\001\000\000\
\\001\000\020\000\055\001\000\000\
\\001\000\022\000\016\002\025\000\027\000\039\000\026\000\000\000\
\\001\000\022\000\017\002\000\000\
\\001\000\022\000\018\002\000\000\
\\001\000\022\000\009\000\000\000\
\\001\000\022\000\009\000\025\000\089\000\032\000\122\000\039\000\026\000\000\000\
\\001\000\022\000\009\000\025\000\089\000\039\000\026\000\000\000\
\\001\000\022\000\009\000\025\000\151\000\039\000\026\000\000\000\
\\001\000\026\000\006\000\000\000\
\\001\000\031\000\216\001\032\000\216\001\000\000\
\\001\000\031\000\218\001\032\000\218\001\000\000\
\\001\000\031\000\243\001\000\000\
\\001\000\031\000\245\001\000\000\
\\001\000\031\000\249\001\032\000\249\001\000\000\
\\001\000\031\000\251\001\032\000\251\001\000\000\
\\001\000\031\000\133\000\000\000\
\\001\000\031\000\065\001\000\000\
\\001\000\032\000\247\001\000\000\
\\001\000\032\000\011\002\000\000\
\\001\000\032\000\019\002\000\000\
\\001\000\032\000\080\000\000\000\
\\001\000\032\000\155\000\000\000\
\\001\000\032\000\160\000\000\000\
\\001\000\032\000\227\000\000\000\
\\001\000\032\000\005\001\000\000\
\\001\000\032\000\027\001\000\000\
\\001\000\032\000\071\001\000\000\
\\001\000\032\000\106\001\000\000\
\\001\000\032\000\110\001\000\000\
\\001\000\034\000\020\000\000\000\
\\001\000\034\000\056\000\000\000\
\\001\000\035\000\195\000\044\000\194\000\045\000\193\000\047\000\192\000\
\\048\000\191\000\049\000\190\000\050\000\189\000\051\000\188\000\
\\052\000\187\000\053\000\186\000\054\000\185\000\055\000\184\000\
\\056\000\183\000\058\000\182\000\059\000\181\000\060\000\180\000\
\\061\000\179\000\062\000\178\000\063\000\177\000\064\000\176\000\
\\065\000\175\000\066\000\174\000\067\000\173\000\068\000\172\000\
\\069\000\171\000\070\000\170\000\000\000\
\\001\000\036\000\004\000\037\000\003\000\000\000\
\\001\000\039\000\026\000\000\000\
\"
val actionRowNumbers =
"\000\001\232\000\232\000\160\000\
\\228\000\180\000\132\000\077\000\
\\180\000\189\000\253\000\228\000\
\\225\000\228\000\225\000\181\000\
\\188\000\159\000\169\000\191\000\
\\226\000\228\000\102\000\170\000\
\\101\000\001\001\133\000\173\000\
\\103\000\228\000\104\000\176\000\
\\181\000\186\000\254\000\228\000\
\\225\000\228\000\225\000\225\000\
\\124\000\192\000\225\000\145\000\
\\244\000\193\000\230\000\228\000\
\\194\000\225\000\171\000\225\000\
\\184\000\161\000\162\000\134\000\
\\228\000\165\000\135\000\228\000\
\\175\000\075\000\046\000\074\000\
\\045\000\044\000\039\000\035\000\
\\172\000\072\000\071\000\123\000\
\\121\000\070\000\069\000\230\000\
\\178\000\001\001\227\000\117\000\
\\095\000\100\000\096\000\196\000\
\\089\000\087\000\190\000\229\000\
\\174\000\228\000\179\000\177\000\
\\230\000\163\000\230\000\164\000\
\\166\000\228\000\047\000\042\000\
\\043\000\122\000\124\000\146\000\
\\036\000\233\000\239\000\147\000\
\\080\000\243\000\116\000\183\000\
\\118\000\228\000\231\000\230\000\
\\092\000\231\000\245\000\149\000\
\\097\000\084\000\083\000\081\000\
\\167\000\168\000\073\000\246\000\
\\034\000\037\000\124\000\048\000\
\\124\000\182\000\187\000\117\000\
\\076\000\049\000\255\000\078\000\
\\155\000\157\000\125\000\125\000\
\\120\000\120\000\129\000\115\000\
\\090\000\230\000\086\000\099\000\
\\088\000\098\000\094\000\230\000\
\\231\000\228\000\052\000\247\000\
\\234\000\079\000\185\000\124\000\
\\051\000\029\000\041\000\050\000\
\\125\000\125\000\125\000\125\000\
\\125\000\125\000\125\000\125\000\
\\125\000\125\000\125\000\125\000\
\\125\000\125\000\125\000\125\000\
\\125\000\125\000\125\000\125\000\
\\125\000\125\000\125\000\125\000\
\\125\000\125\000\119\000\228\000\
\\197\000\198\000\032\000\248\000\
\\105\000\130\000\060\000\059\000\
\\057\000\139\000\141\000\143\000\
\\195\000\058\000\128\000\126\000\
\\062\000\067\000\111\000\054\000\
\\066\000\127\000\231\000\249\000\
\\093\000\242\000\148\000\085\000\
\\082\000\038\000\030\000\065\000\
\\125\000\199\000\200\000\201\000\
\\202\000\203\000\204\000\205\000\
\\206\000\207\000\208\000\209\000\
\\210\000\211\000\212\000\213\000\
\\214\000\215\000\216\000\217\000\
\\218\000\219\000\220\000\221\000\
\\222\000\223\000\224\000\156\000\
\\115\000\065\000\065\000\033\000\
\\129\000\063\000\061\000\055\000\
\\056\000\129\000\124\000\106\000\
\\150\000\136\000\235\000\240\000\
\\151\000\109\000\114\000\131\000\
\\107\000\241\000\250\000\152\000\
\\091\000\228\000\028\000\040\000\
\\065\000\065\000\065\000\065\000\
\\065\000\065\000\065\000\065\000\
\\065\000\065\000\065\000\065\000\
\\065\000\065\000\065\000\065\000\
\\065\000\065\000\065\000\065\000\
\\065\000\065\000\065\000\065\000\
\\065\000\065\000\110\000\014\000\
\\002\000\142\000\144\000\031\000\
\\129\000\137\000\129\000\064\000\
\\129\000\112\000\113\000\053\000\
\\129\000\068\000\129\000\027\000\
\\026\000\025\000\024\000\023\000\
\\022\000\021\000\020\000\019\000\
\\018\000\017\000\016\000\015\000\
\\013\000\012\000\011\000\010\000\
\\009\000\008\000\007\000\006\000\
\\005\000\004\000\001\000\000\000\
\\003\000\108\000\153\000\251\000\
\\236\000\154\000\237\000\129\000\
\\138\000\129\000\252\000\238\000\
\\140\000\158\000"
val gotoT =
"\
\\001\000\109\001\000\000\
\\002\000\003\000\000\000\
\\002\000\005\000\000\000\
\\000\000\
\\056\000\006\000\000\000\
\\005\000\009\000\006\000\008\000\000\000\
\\000\000\
\\000\000\
\\005\000\016\000\006\000\008\000\000\000\
\\000\000\
\\000\000\
\\056\000\019\000\000\000\
\\011\000\023\000\012\000\022\000\052\000\021\000\057\000\020\000\000\000\
\\007\000\028\000\008\000\027\000\056\000\026\000\000\000\
\\013\000\031\000\014\000\030\000\052\000\029\000\057\000\020\000\000\000\
\\003\000\033\000\004\000\032\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\056\000\041\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\053\000\044\000\057\000\043\000\000\000\
\\009\000\045\000\000\000\
\\000\000\
\\000\000\
\\056\000\048\000\000\000\
\\000\000\
\\010\000\050\000\000\000\
\\003\000\052\000\004\000\032\000\000\000\
\\000\000\
\\000\000\
\\056\000\055\000\000\000\
\\011\000\057\000\012\000\022\000\052\000\056\000\057\000\020\000\000\000\
\\056\000\058\000\000\000\
\\052\000\059\000\057\000\020\000\000\000\
\\013\000\060\000\014\000\030\000\052\000\029\000\057\000\020\000\000\000\
\\024\000\068\000\025\000\067\000\027\000\066\000\028\000\065\000\
\\046\000\064\000\054\000\063\000\055\000\062\000\056\000\061\000\000\000\
\\000\000\
\\011\000\076\000\012\000\022\000\052\000\021\000\057\000\020\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\047\000\086\000\048\000\085\000\049\000\084\000\051\000\083\000\
\\054\000\063\000\055\000\082\000\056\000\081\000\057\000\080\000\000\000\
\\007\000\028\000\008\000\088\000\056\000\026\000\000\000\
\\000\000\
\\013\000\090\000\014\000\030\000\052\000\029\000\057\000\020\000\000\000\
\\000\000\
\\011\000\091\000\012\000\022\000\052\000\021\000\057\000\020\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\056\000\093\000\000\000\
\\000\000\
\\000\000\
\\056\000\095\000\000\000\
\\010\000\096\000\000\000\
\\000\000\
\\028\000\100\000\030\000\099\000\046\000\064\000\054\000\063\000\
\\055\000\098\000\056\000\061\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\024\000\103\000\025\000\067\000\027\000\066\000\028\000\065\000\
\\046\000\064\000\054\000\063\000\055\000\062\000\056\000\061\000\000\000\
\\024\000\107\000\025\000\067\000\027\000\066\000\028\000\065\000\
\\031\000\106\000\032\000\105\000\046\000\064\000\054\000\063\000\
\\055\000\062\000\056\000\061\000\000\000\
\\000\000\
\\000\000\
\\047\000\108\000\048\000\085\000\049\000\084\000\051\000\083\000\
\\054\000\063\000\055\000\082\000\056\000\081\000\057\000\080\000\000\000\
\\000\000\
\\053\000\109\000\057\000\043\000\000\000\
\\000\000\
\\018\000\111\000\019\000\110\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\054\000\063\000\055\000\116\000\056\000\061\000\000\000\
\\000\000\
\\000\000\
\\047\000\119\000\048\000\085\000\049\000\084\000\050\000\118\000\
\\051\000\083\000\054\000\063\000\055\000\082\000\056\000\081\000\
\\057\000\080\000\000\000\
\\000\000\
\\015\000\123\000\016\000\122\000\056\000\121\000\000\000\
\\000\000\
\\000\000\
\\047\000\124\000\048\000\085\000\049\000\084\000\051\000\083\000\
\\054\000\063\000\055\000\082\000\056\000\081\000\057\000\080\000\000\000\
\\000\000\
\\047\000\125\000\048\000\085\000\049\000\084\000\051\000\083\000\
\\054\000\063\000\055\000\082\000\056\000\081\000\057\000\080\000\000\000\
\\000\000\
\\000\000\
\\056\000\126\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\024\000\107\000\025\000\067\000\027\000\066\000\028\000\065\000\
\\031\000\127\000\032\000\105\000\046\000\064\000\054\000\063\000\
\\055\000\062\000\056\000\061\000\000\000\
\\024\000\128\000\025\000\067\000\027\000\066\000\028\000\065\000\
\\046\000\064\000\054\000\063\000\055\000\062\000\056\000\061\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\133\000\019\000\110\000\000\000\
\\017\000\134\000\000\000\
\\021\000\141\000\022\000\140\000\023\000\139\000\028\000\138\000\
\\046\000\064\000\054\000\063\000\055\000\137\000\056\000\136\000\000\000\
\\056\000\147\000\000\000\
\\049\000\148\000\054\000\063\000\055\000\082\000\056\000\061\000\
\\057\000\080\000\000\000\
\\048\000\151\000\049\000\084\000\051\000\150\000\054\000\063\000\
\\055\000\082\000\056\000\081\000\057\000\080\000\000\000\
\\000\000\
\\048\000\152\000\049\000\084\000\054\000\063\000\055\000\082\000\
\\056\000\081\000\057\000\080\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\024\000\107\000\025\000\067\000\027\000\066\000\028\000\065\000\
\\032\000\159\000\046\000\064\000\054\000\063\000\055\000\062\000\
\\056\000\061\000\000\000\
\\000\000\
\\024\000\107\000\025\000\067\000\027\000\066\000\028\000\065\000\
\\032\000\160\000\046\000\064\000\054\000\063\000\055\000\062\000\
\\056\000\061\000\000\000\
\\000\000\
\\000\000\
\\018\000\162\000\019\000\110\000\000\000\
\\000\000\
\\026\000\167\000\027\000\166\000\028\000\065\000\029\000\165\000\
\\030\000\164\000\046\000\064\000\054\000\063\000\055\000\062\000\
\\056\000\061\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\028\000\196\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\197\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\023\000\198\000\028\000\138\000\046\000\064\000\054\000\063\000\
\\055\000\137\000\056\000\136\000\000\000\
\\022\000\199\000\023\000\139\000\028\000\138\000\046\000\064\000\
\\054\000\063\000\055\000\137\000\056\000\136\000\000\000\
\\033\000\208\000\034\000\207\000\035\000\206\000\037\000\205\000\
\\038\000\204\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\200\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\214\000\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\054\000\063\000\055\000\116\000\056\000\061\000\000\000\
\\047\000\119\000\048\000\085\000\049\000\084\000\050\000\219\000\
\\051\000\083\000\054\000\063\000\055\000\082\000\056\000\081\000\
\\057\000\080\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\054\000\063\000\055\000\220\000\056\000\061\000\000\000\
\\000\000\
\\047\000\222\000\048\000\085\000\049\000\084\000\050\000\221\000\
\\051\000\083\000\054\000\063\000\055\000\082\000\056\000\081\000\
\\057\000\080\000\000\000\
\\048\000\223\000\049\000\084\000\054\000\063\000\055\000\082\000\
\\056\000\081\000\057\000\080\000\000\000\
\\015\000\224\000\016\000\122\000\056\000\121\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\024\000\226\000\025\000\067\000\027\000\066\000\028\000\065\000\
\\046\000\064\000\054\000\063\000\055\000\062\000\056\000\061\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\028\000\229\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\230\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\231\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\232\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\233\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\234\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\235\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\236\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\237\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\238\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\239\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\240\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\241\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\242\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\243\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\244\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\245\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\246\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\247\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\248\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\249\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\250\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\251\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\252\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\253\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\028\000\254\000\046\000\064\000\054\000\063\000\055\000\098\000\
\\056\000\061\000\000\000\
\\022\000\255\000\023\000\139\000\028\000\138\000\046\000\064\000\
\\054\000\063\000\055\000\137\000\056\000\136\000\000\000\
\\056\000\000\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\038\000\008\001\041\000\007\001\046\000\203\000\054\000\006\001\
\\056\000\005\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\033\000\012\001\034\000\207\000\035\000\206\000\037\000\205\000\
\\038\000\204\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\011\001\000\000\
\\033\000\016\001\034\000\207\000\035\000\206\000\037\000\205\000\
\\038\000\204\000\044\000\015\001\045\000\014\001\046\000\203\000\
\\054\000\202\000\055\000\201\000\056\000\200\000\000\000\
\\000\000\
\\000\000\
\\020\000\017\001\000\000\
\\000\000\
\\000\000\
\\033\000\023\001\034\000\207\000\035\000\206\000\037\000\205\000\
\\038\000\204\000\042\000\022\001\043\000\021\001\046\000\203\000\
\\054\000\202\000\055\000\201\000\056\000\020\001\000\000\
\\048\000\024\001\049\000\084\000\054\000\063\000\055\000\082\000\
\\056\000\081\000\057\000\080\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\026\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\026\000\027\001\027\000\166\000\028\000\065\000\046\000\064\000\
\\054\000\063\000\055\000\062\000\056\000\061\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\054\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\055\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\056\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\000\000\
\\033\000\057\001\034\000\207\000\035\000\206\000\037\000\205\000\
\\038\000\204\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\200\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\034\000\058\001\035\000\206\000\037\000\205\000\038\000\204\000\
\\046\000\203\000\054\000\202\000\055\000\201\000\056\000\212\000\000\000\
\\024\000\059\001\025\000\067\000\027\000\066\000\028\000\065\000\
\\046\000\064\000\054\000\063\000\055\000\062\000\056\000\061\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\167\000\027\000\166\000\028\000\065\000\029\000\065\001\
\\030\000\164\000\046\000\064\000\054\000\063\000\055\000\062\000\
\\056\000\061\000\000\000\
\\036\000\067\001\037\000\215\000\038\000\204\000\046\000\203\000\
\\054\000\202\000\055\000\201\000\056\000\212\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\054\000\063\000\055\000\220\000\056\000\061\000\000\000\
\\000\000\
\\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\071\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\072\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\073\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\074\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\075\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\076\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\077\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\078\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\079\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\080\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\081\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\082\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\083\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\084\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\085\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\086\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\087\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\088\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\089\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\090\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\091\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\092\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\093\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\094\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\095\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\036\000\216\000\037\000\215\000\038\000\204\000\040\000\096\001\
\\041\000\213\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\212\000\000\000\
\\020\000\097\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\033\000\098\001\034\000\207\000\035\000\206\000\037\000\205\000\
\\038\000\204\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\200\000\000\000\
\\000\000\
\\033\000\023\001\034\000\207\000\035\000\206\000\037\000\205\000\
\\038\000\204\000\043\000\099\001\046\000\203\000\054\000\202\000\
\\055\000\201\000\056\000\020\001\000\000\
\\000\000\
\\033\000\023\001\034\000\207\000\035\000\206\000\037\000\205\000\
\\038\000\204\000\043\000\100\001\046\000\203\000\054\000\202\000\
\\055\000\201\000\056\000\020\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\033\000\101\001\034\000\207\000\035\000\206\000\037\000\205\000\
\\038\000\204\000\046\000\203\000\054\000\202\000\055\000\201\000\
\\056\000\200\000\000\000\
\\000\000\
\\033\000\023\001\034\000\207\000\035\000\206\000\037\000\205\000\
\\038\000\204\000\043\000\102\001\046\000\203\000\054\000\202\000\
\\055\000\201\000\056\000\020\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\033\000\023\001\034\000\207\000\035\000\206\000\037\000\205\000\
\\038\000\204\000\043\000\106\001\046\000\203\000\054\000\202\000\
\\055\000\201\000\056\000\020\001\000\000\
\\000\000\
\\033\000\023\001\034\000\207\000\035\000\206\000\037\000\205\000\
\\038\000\204\000\043\000\107\001\046\000\203\000\054\000\202\000\
\\055\000\201\000\056\000\020\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 366
val numrules = 170
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = Cache.poz
type arg = LexArg.lexarg
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | TYVAR of unit ->  (string) | SCON of unit ->  (string)
 | RCON of unit ->  (real) | IDENT of unit ->  (string)
 | ICON of unit ->  (int) | CCON of unit ->  (char)
 | tyvar of unit ->  (Absyn.ident) | ident of unit ->  (Absyn.ident)
 | longorshortid of unit ->  (Absyn.longid)
 | longid of unit ->  (Absyn.longid)
 | tyvar_comma_plus of unit ->  (Absyn.ident list)
 | tyvarseq of unit ->  (Absyn.ident list)
 | seq_ty of unit ->  (Absyn.ty list)
 | ty_comma_seq2 of unit ->  (Absyn.ty list)
 | ty_sans_star of unit ->  (Absyn.ty)
 | tuple_ty of unit ->  (Absyn.ty list) | ty of unit ->  (Absyn.ty)
 | literal of unit ->  (Absyn.lit)
 | pat_comma_plus_list of unit ->  (Absyn.pat list)
 | pat_comma_star_list of unit ->  (Absyn.pat list)
 | pat_comma_plus of unit ->  (Absyn.pat list)
 | pat_comma_star of unit ->  (Absyn.pat list)
 | pat_star of unit ->  (Absyn.pat list)
 | seq_pat of unit ->  (Absyn.pat list)
 | res_pat of unit ->  (Absyn.pat list)
 | pat_e of unit ->  (Absyn.pat) | pat_d of unit ->  (Absyn.pat)
 | pat_c of unit ->  (Absyn.pat) | pat_b of unit ->  (Absyn.pat)
 | pat_a of unit ->  (Absyn.pat) | pat of unit ->  (Absyn.pat)
 | exp_comma_plus of unit ->  (Absyn.exp list)
 | exp_comma_star of unit ->  (Absyn.exp list)
 | exp_star of unit ->  (Absyn.exp list)
 | seq_exp of unit ->  (Absyn.exp list)
 | exp_d of unit ->  (Absyn.exp) | exp_c of unit ->  (Absyn.exp)
 | exp_b of unit ->  (Absyn.exp) | exp_a of unit ->  (Absyn.exp)
 | exp of unit ->  (Absyn.exp) | atomic_goal of unit ->  (Absyn.goal)
 | conjunctive_goal of unit ->  (Absyn.goal)
 | conjunctive_goal_opt of unit ->  (Absyn.goal option)
 | result of unit ->  (Absyn.result)
 | clause of unit ->  (Absyn.clause)
 | clause_plus of unit ->  (Absyn.clause)
 | default_opt of unit ->  (Absyn.clause option)
 | conbind of unit ->  (Absyn.conbind)
 | conbind_plus of unit ->  (Absyn.conbind list)
 | datbind of unit ->  (Absyn.datbind)
 | datbind_plus of unit ->  (Absyn.datbind list)
 | typbind of unit ->  (Absyn.typbind)
 | typbind_plus of unit ->  (Absyn.typbind list)
 | withbind of unit ->  (Absyn.typbind list)
 | relbind_ty_opt of unit ->  (Absyn.ty option)
 | relbind_plus of unit ->  (Absyn.relbind list)
 | relbind of unit ->  (Absyn.relbind) | dec of unit ->  (Absyn.dec)
 | dec_star of unit ->  (Absyn.dec list)
 | spec of unit ->  (Absyn.spec)
 | spec_star of unit ->  (Absyn.spec list)
 | interface of unit ->  (Absyn.interface)
 | module of unit ->  (Absyn.module)
end
type svalue = MlyValue.svalue
type result = Absyn.module
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 1) => true | (T 2) => true | (T 3) => true | (T 10) => true | 
(T 11) => true | (T 13) => true | (T 17) => true | (T 18) => true | 
(T 23) => true | (T 25) => true | (T 26) => true | (T 27) => true | 
(T 29) => true | (T 32) => true | (T 37) => true | (T 39) => true | 
(T 41) => true | (T 42) => true | _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn (T 14) => true | _ => false
val showTerminal =
fn (T 0) => "AMPERSAND"
  | (T 1) => "AND"
  | (T 2) => "AS"
  | (T 3) => "AXIOM"
  | (T 4) => "BAR"
  | (T 5) => "CCON"
  | (T 6) => "COLON"
  | (T 7) => "COLONCOLON"
  | (T 8) => "COMMA"
  | (T 9) => "DASHES"
  | (T 10) => "DATATYPE"
  | (T 11) => "DEFAULT"
  | (T 12) => "DOT"
  | (T 13) => "END"
  | (T 14) => "EOF_HARD"
  | (T 15) => "EOF_SOFT"
  | (T 16) => "EQ"
  | (T 17) => "EQTYPE"
  | (T 18) => "FAIL"
  | (T 19) => "FATARROW"
  | (T 20) => "ICON"
  | (T 21) => "IDENT"
  | (T 22) => "LBRACK"
  | (T 23) => "LET"
  | (T 24) => "LPAREN"
  | (T 25) => "MODULE"
  | (T 26) => "NOT"
  | (T 27) => "OF"
  | (T 28) => "RCON"
  | (T 29) => "RELATION"
  | (T 30) => "RBRACK"
  | (T 31) => "RPAREN"
  | (T 32) => "RULE"
  | (T 33) => "SCON"
  | (T 34) => "STAR"
  | (T 35) => "START_MODULE"
  | (T 36) => "START_INTERFACE"
  | (T 37) => "TYPE"
  | (T 38) => "TYVAR"
  | (T 39) => "VAL"
  | (T 40) => "WILD"
  | (T 41) => "WITH"
  | (T 42) => "WITHTYPE"
  | (T 43) => "ADD_INT"
  | (T 44) => "SUB_INT"
  | (T 45) => "NEG_INT"
  | (T 46) => "DIV_INT"
  | (T 47) => "MOD_INT"
  | (T 48) => "EQEQ_INT"
  | (T 49) => "GE_INT"
  | (T 50) => "GT_INT"
  | (T 51) => "LE_INT"
  | (T 52) => "LT_INT"
  | (T 53) => "NE_INT"
  | (T 54) => "ADD_REAL"
  | (T 55) => "SUB_REAL"
  | (T 56) => "NEG_REAL"
  | (T 57) => "MUL_REAL"
  | (T 58) => "DIV_REAL"
  | (T 59) => "MOD_REAL"
  | (T 60) => "POW_REAL"
  | (T 61) => "EQ_REAL"
  | (T 62) => "GE_REAL"
  | (T 63) => "GT_REAL"
  | (T 64) => "LE_REAL"
  | (T 65) => "LT_REAL"
  | (T 66) => "NE_REAL"
  | (T 67) => "ADD_STRING"
  | (T 68) => "EQEQ_STRING"
  | (T 69) => "ADD_LIST"
  | (T 70) => "UNARY"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 70) $$ (T 69) $$ (T 68) $$ (T 67) $$ (T 66) $$ (T 65) $$ (T 64)
 $$ (T 63) $$ (T 62) $$ (T 61) $$ (T 60) $$ (T 59) $$ (T 58) $$ (T 57)
 $$ (T 56) $$ (T 55) $$ (T 54) $$ (T 53) $$ (T 52) $$ (T 51) $$ (T 50)
 $$ (T 49) $$ (T 48) $$ (T 47) $$ (T 46) $$ (T 45) $$ (T 44) $$ (T 43)
 $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39) $$ (T 37) $$ (T 36) $$ (T 35)
 $$ (T 34) $$ (T 32) $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 27) $$ (T 26)
 $$ (T 25) $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 19) $$ (T 18) $$ (T 17)
 $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10)
 $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 4) $$ (T 3) $$ (T 2) $$ (T 
1) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (lexArg):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( _, _, EOF_SOFT1right)) :: ( _, ( MlyValue.dec_star 
dec_star1, _, dec_starright)) :: ( _, ( MlyValue.interface interface1,
 interfaceleft, _)) :: ( _, ( _, START_MODULE1left, _)) :: rest671))
 => let val  result = MlyValue.module (fn _ => let val  (interface as 
interface1) = interface1 ()
 val  (dec_star as dec_star1) = dec_star1 ()
 in (
 Absyn.MODULE(interface, dec_star, 
			makeInfo lexArg (interfaceleft, dec_starright)) 
)
end)
 in ( LrTable.NT 0, ( result, START_MODULE1left, EOF_SOFT1right), 
rest671)
end
|  ( 1, ( ( _, ( MlyValue.interface interface1, _, (interfaceright as 
interface1right))) :: ( _, ( _, (START_INTERFACEleft as 
START_INTERFACE1left), _)) :: rest671)) => let val  result = 
MlyValue.module (fn _ => let val  (interface as interface1) = 
interface1 ()
 in (
 Absyn.MODULE(interface, [], 
			makeInfo lexArg (START_INTERFACEleft, interfaceright)) 
)
end)
 in ( LrTable.NT 0, ( result, START_INTERFACE1left, interface1right), 
rest671)
end
|  ( 2, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.spec_star spec_star1, _, _)) :: ( _, ( _, COLONleft, _)) :: (
 _, ( MlyValue.ident ident1, _, _)) :: ( _, ( _, MODULE1left, _)) :: 
rest671)) => let val  result = MlyValue.interface (fn _ => let val  (
ident as ident1) = ident1 ()
 val  (spec_star as spec_star1) = spec_star1 ()
 in (
 Absyn.INTERFACE({modid=ident, specs=spec_star, source=Absyn.Source.dummy},
		  makeInfo lexArg (COLONleft, ENDright)) 
)
end)
 in ( LrTable.NT 1, ( result, MODULE1left, END1right), rest671)
end
|  ( 3, ( rest671)) => let val  result = MlyValue.spec_star (fn _ => (
 [] ))
 in ( LrTable.NT 2, ( result, defaultPos, defaultPos), rest671)
end
|  ( 4, ( ( _, ( MlyValue.spec_star spec_star1, _, spec_star1right))
 :: ( _, ( MlyValue.spec spec1, spec1left, _)) :: rest671)) => let
 val  result = MlyValue.spec_star (fn _ => let val  (spec as spec1) = 
spec1 ()
 val  (spec_star as spec_star1) = spec_star1 ()
 in ( spec :: spec_star )
end)
 in ( LrTable.NT 2, ( result, spec1left, spec_star1right), rest671)

end
|  ( 5, ( ( _, ( MlyValue.SCON SCON1, SCONleft, (SCONright as 
SCON1right))) :: ( _, ( _, (WITHleft as WITH1left), _)) :: rest671))
 => let val  result = MlyValue.spec (fn _ => let val  (SCON as SCON1)
 = SCON1 ()
 in (
 
		LexArg.addImport(
		lexArg, 
		SCON,
		SCONleft, SCONright,
		Cache.PUBLIC);
	
		Absyn.WITHspec(SCON, ref(Absyn.dummyInterface), 
			makeInfo lexArg (WITHleft, SCONright)) 
	
)
end)
 in ( LrTable.NT 3, ( result, WITH1left, SCON1right), rest671)
end
|  ( 6, ( ( _, ( MlyValue.ident ident1, _, (identright as ident1right)
)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, (
TYPEleft as TYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.spec (fn _ => let val  (tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (ident as ident1) = ident1 ()
 in (
 Absyn.ABSTYPEspec(false, tyvarseq, ident,
			makeInfo lexArg (TYPEleft, identright)) 
)
end)
 in ( LrTable.NT 3, ( result, TYPE1left, ident1right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.ident ident1, _, (identright as ident1right)
)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, (
EQTYPEleft as EQTYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.spec (fn _ => let val  (tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (ident as ident1) = ident1 ()
 in (
 Absyn.ABSTYPEspec(true, tyvarseq, ident, 
			makeInfo lexArg (EQTYPEleft, identright)) 
)
end)
 in ( LrTable.NT 3, ( result, EQTYPE1left, ident1right), rest671)
end
|  ( 8, ( ( _, ( MlyValue.typbind_plus typbind_plus1, _, (
typbind_plusright as typbind_plus1right))) :: ( _, ( _, (TYPEleft as 
TYPE1left), _)) :: rest671)) => let val  result = MlyValue.spec (fn _
 => let val  (typbind_plus as typbind_plus1) = typbind_plus1 ()
 in (
 Absyn.TYPEspec(typbind_plus,
			makeInfo lexArg (TYPEleft, typbind_plusright)) 
)
end)
 in ( LrTable.NT 3, ( result, TYPE1left, typbind_plus1right), rest671)

end
|  ( 9, ( ( _, ( MlyValue.withbind withbind1, _, (withbindright as 
withbind1right))) :: ( _, ( MlyValue.datbind_plus datbind_plus1, _, _)
) :: ( _, ( _, (DATATYPEleft as DATATYPE1left), _)) :: rest671)) =>
 let val  result = MlyValue.spec (fn _ => let val  (datbind_plus as 
datbind_plus1) = datbind_plus1 ()
 val  (withbind as withbind1) = withbind1 ()
 in (
 
		Absyn.DATAspec(datbind_plus, withbind,
			makeInfo lexArg (DATATYPEleft, withbindright)) 
	
)
end)
 in ( LrTable.NT 3, ( result, DATATYPE1left, withbind1right), rest671)

end
|  ( 10, ( ( _, ( MlyValue.ty ty1, _, (tyright as ty1right))) :: _ :: 
( _, ( MlyValue.ident ident1, _, _)) :: ( _, ( _, (VALleft as VAL1left
), _)) :: rest671)) => let val  result = MlyValue.spec (fn _ => let
 val  (ident as ident1) = ident1 ()
 val  (ty as ty1) = ty1 ()
 in (
 
		Absyn.VALspec(ident, ty,
			makeInfo lexArg (VALleft, tyright)) 
	
)
end)
 in ( LrTable.NT 3, ( result, VAL1left, ty1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.ty ty1, _, (tyright as ty1right))) :: _ :: 
( _, ( MlyValue.ident ident1, _, _)) :: ( _, ( _, (RELATIONleft as 
RELATION1left), _)) :: rest671)) => let val  result = MlyValue.spec
 (fn _ => let val  (ident as ident1) = ident1 ()
 val  (ty as ty1) = ty1 ()
 in (
	
		LexArg.addRestriction(
			lexArg, Absyn.identName ident, 
			Cache.FUN,
			Cache.PROTECTED);
		
		Absyn.RELspec(ident, ty,
			makeInfo lexArg (RELATIONleft, tyright)) 
	
)
end)
 in ( LrTable.NT 3, ( result, RELATION1left, ty1right), rest671)
end
|  ( 12, ( rest671)) => let val  result = MlyValue.dec_star (fn _ => (
 [] ))
 in ( LrTable.NT 4, ( result, defaultPos, defaultPos), rest671)
end
|  ( 13, ( ( _, ( MlyValue.dec_star dec_star1, _, dec_star1right)) :: 
( _, ( MlyValue.dec dec1, dec1left, _)) :: rest671)) => let val  
result = MlyValue.dec_star (fn _ => let val  (dec as dec1) = dec1 ()
 val  (dec_star as dec_star1) = dec_star1 ()
 in ( dec :: dec_star )
end)
 in ( LrTable.NT 4, ( result, dec1left, dec_star1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.SCON SCON1, SCONleft, (SCONright as 
SCON1right))) :: ( _, ( _, (WITHleft as WITH1left), _)) :: rest671))
 => let val  result = MlyValue.dec (fn _ => let val  (SCON as SCON1) =
 SCON1 ()
 in (
 
		LexArg.addImport(
		lexArg, 
		SCON,
		SCONleft, SCONright,
		Cache.PROTECTED);
	
		Absyn.WITHdec(SCON, ref(Absyn.dummyInterface),
			makeInfo lexArg (WITHleft, SCONright)) 
	
)
end)
 in ( LrTable.NT 5, ( result, WITH1left, SCON1right), rest671)
end
|  ( 15, ( ( _, ( MlyValue.typbind_plus typbind_plus1, _, (
typbind_plusright as typbind_plus1right))) :: ( _, ( _, (TYPEleft as 
TYPE1left), _)) :: rest671)) => let val  result = MlyValue.dec (fn _
 => let val  (typbind_plus as typbind_plus1) = typbind_plus1 ()
 in (
 Absyn.TYPEdec(typbind_plus,
			makeInfo lexArg (TYPEleft, typbind_plusright)) 
)
end)
 in ( LrTable.NT 5, ( result, TYPE1left, typbind_plus1right), rest671)

end
|  ( 16, ( ( _, ( MlyValue.withbind withbind1, _, (withbindright as 
withbind1right))) :: ( _, ( MlyValue.datbind_plus datbind_plus1, _, _)
) :: ( _, ( _, (DATATYPEleft as DATATYPE1left), _)) :: rest671)) =>
 let val  result = MlyValue.dec (fn _ => let val  (datbind_plus as 
datbind_plus1) = datbind_plus1 ()
 val  (withbind as withbind1) = withbind1 ()
 in (
 Absyn.DATAdec(datbind_plus, withbind,
			makeInfo lexArg (DATATYPEleft, withbindright)) 
)
end)
 in ( LrTable.NT 5, ( result, DATATYPE1left, withbind1right), rest671)

end
|  ( 17, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: _
 :: ( _, ( MlyValue.ident ident1, _, _)) :: ( _, ( _, (VALleft as 
VAL1left), _)) :: rest671)) => let val  result = MlyValue.dec (fn _ =>
 let val  (ident as ident1) = ident1 ()
 val  (exp as exp1) = exp1 ()
 in (
 Absyn.VALdec(ident, exp,
			makeInfo lexArg (VALleft, expright)) )

end)
 in ( LrTable.NT 5, ( result, VAL1left, exp1right), rest671)
end
|  ( 18, ( ( _, ( MlyValue.relbind_plus relbind_plus1, _, (
relbind_plusright as relbind_plus1right))) :: ( _, ( _, (RELATIONleft
 as RELATION1left), _)) :: rest671)) => let val  result = MlyValue.dec
 (fn _ => let val  (relbind_plus as relbind_plus1) = relbind_plus1 ()
 in (
 Absyn.RELdec(relbind_plus,
			makeInfo lexArg (RELATIONleft, relbind_plusright)) 
)
end)
 in ( LrTable.NT 5, ( result, RELATION1left, relbind_plus1right), 
rest671)
end
|  ( 19, ( ( _, ( MlyValue.relbind_plus relbind_plus1, _, 
relbind_plus1right)) :: _ :: ( _, ( MlyValue.relbind relbind1, 
relbind1left, _)) :: rest671)) => let val  result = 
MlyValue.relbind_plus (fn _ => let val  (relbind as relbind1) = 
relbind1 ()
 val  (relbind_plus as relbind_plus1) = relbind_plus1 ()
 in ( relbind :: relbind_plus )
end)
 in ( LrTable.NT 7, ( result, relbind1left, relbind_plus1right), 
rest671)
end
|  ( 20, ( ( _, ( MlyValue.relbind relbind1, relbind1left, 
relbind1right)) :: rest671)) => let val  result = 
MlyValue.relbind_plus (fn _ => let val  (relbind as relbind1) = 
relbind1 ()
 in ( [relbind] )
end)
 in ( LrTable.NT 7, ( result, relbind1left, relbind1right), rest671)

end
|  ( 21, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.default_opt default_opt1, _, _)) :: ( _, ( 
MlyValue.clause_plus clause_plus1, _, _)) :: _ :: ( _, ( 
MlyValue.relbind_ty_opt relbind_ty_opt1, _, _)) :: ( _, ( 
MlyValue.ident ident1, (identleft as ident1left), _)) :: rest671)) =>
 let val  result = MlyValue.relbind (fn _ => let val  (ident as ident1
) = ident1 ()
 val  (relbind_ty_opt as relbind_ty_opt1) = relbind_ty_opt1 ()
 val  (clause_plus as clause_plus1) = clause_plus1 ()
 val  (default_opt as default_opt1) = default_opt1 ()
 in (
 
		LexArg.addRestriction(
			lexArg, Absyn.identName ident, 
			Cache.FUN,
			Cache.PROTECTED
			);
	
		Absyn.RELBIND(ident, relbind_ty_opt, join_default(clause_plus,default_opt), [],
			makeInfo lexArg (identleft, ENDright)) 
)
end)
 in ( LrTable.NT 6, ( result, ident1left, END1right), rest671)
end
|  ( 22, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: ( _, ( _, 
COLON1left, _)) :: rest671)) => let val  result = 
MlyValue.relbind_ty_opt (fn _ => let val  (ty as ty1) = ty1 ()
 in ( SOME(ty) )
end)
 in ( LrTable.NT 8, ( result, COLON1left, ty1right), rest671)
end
|  ( 23, ( rest671)) => let val  result = MlyValue.relbind_ty_opt (fn
 _ => ( NONE ))
 in ( LrTable.NT 8, ( result, defaultPos, defaultPos), rest671)
end
|  ( 24, ( rest671)) => let val  result = MlyValue.withbind (fn _ => (
 [] ))
 in ( LrTable.NT 9, ( result, defaultPos, defaultPos), rest671)
end
|  ( 25, ( ( _, ( MlyValue.typbind_plus typbind_plus1, _, 
typbind_plus1right)) :: ( _, ( _, WITHTYPE1left, _)) :: rest671)) =>
 let val  result = MlyValue.withbind (fn _ => let val  (typbind_plus
 as typbind_plus1) = typbind_plus1 ()
 in ( typbind_plus )
end)
 in ( LrTable.NT 9, ( result, WITHTYPE1left, typbind_plus1right), 
rest671)
end
|  ( 26, ( ( _, ( MlyValue.typbind_plus typbind_plus1, _, 
typbind_plus1right)) :: _ :: ( _, ( MlyValue.typbind typbind1, 
typbind1left, _)) :: rest671)) => let val  result = 
MlyValue.typbind_plus (fn _ => let val  (typbind as typbind1) = 
typbind1 ()
 val  (typbind_plus as typbind_plus1) = typbind_plus1 ()
 in ( typbind :: typbind_plus )
end)
 in ( LrTable.NT 10, ( result, typbind1left, typbind_plus1right), 
rest671)
end
|  ( 27, ( ( _, ( MlyValue.typbind typbind1, typbind1left, 
typbind1right)) :: rest671)) => let val  result = 
MlyValue.typbind_plus (fn _ => let val  (typbind as typbind1) = 
typbind1 ()
 in ( [typbind] )
end)
 in ( LrTable.NT 10, ( result, typbind1left, typbind1right), rest671)

end
|  ( 28, ( ( _, ( MlyValue.ty ty1, _, (tyright as ty1right))) :: _ :: 
( _, ( MlyValue.ident ident1, _, _)) :: ( _, ( MlyValue.tyvarseq 
tyvarseq1, (tyvarseqleft as tyvarseq1left), _)) :: rest671)) => let
 val  result = MlyValue.typbind (fn _ => let val  (tyvarseq as 
tyvarseq1) = tyvarseq1 ()
 val  (ident as ident1) = ident1 ()
 val  (ty as ty1) = ty1 ()
 in (
 Absyn.TYPBIND(tyvarseq, ident, ty,
			makeInfo lexArg (tyvarseqleft, tyright)) 
)
end)
 in ( LrTable.NT 11, ( result, tyvarseq1left, ty1right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.datbind_plus datbind_plus1, _, 
datbind_plus1right)) :: _ :: ( _, ( MlyValue.datbind datbind1, 
datbind1left, _)) :: rest671)) => let val  result = 
MlyValue.datbind_plus (fn _ => let val  (datbind as datbind1) = 
datbind1 ()
 val  (datbind_plus as datbind_plus1) = datbind_plus1 ()
 in ( datbind :: datbind_plus )
end)
 in ( LrTable.NT 12, ( result, datbind1left, datbind_plus1right), 
rest671)
end
|  ( 30, ( ( _, ( MlyValue.datbind datbind1, datbind1left, 
datbind1right)) :: rest671)) => let val  result = 
MlyValue.datbind_plus (fn _ => let val  (datbind as datbind1) = 
datbind1 ()
 in ( [datbind] )
end)
 in ( LrTable.NT 12, ( result, datbind1left, datbind1right), rest671)

end
|  ( 31, ( ( _, ( MlyValue.conbind_plus conbind_plus1, _, (
conbind_plusright as conbind_plus1right))) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, (
tyvarseqleft as tyvarseq1left), _)) :: rest671)) => let val  result = 
MlyValue.datbind (fn _ => let val  (tyvarseq as tyvarseq1) = tyvarseq1
 ()
 val  (ident as ident1) = ident1 ()
 val  (conbind_plus as conbind_plus1) = conbind_plus1 ()
 in (
 Absyn.DATBIND(tyvarseq, ident, conbind_plus,
			makeInfo lexArg (tyvarseqleft, conbind_plusright)) 
)
end)
 in ( LrTable.NT 13, ( result, tyvarseq1left, conbind_plus1right), 
rest671)
end
|  ( 32, ( ( _, ( MlyValue.conbind_plus conbind_plus1, _, 
conbind_plus1right)) :: _ :: ( _, ( MlyValue.conbind conbind1, 
conbind1left, _)) :: rest671)) => let val  result = 
MlyValue.conbind_plus (fn _ => let val  (conbind as conbind1) = 
conbind1 ()
 val  (conbind_plus as conbind_plus1) = conbind_plus1 ()
 in ( conbind :: conbind_plus )
end)
 in ( LrTable.NT 14, ( result, conbind1left, conbind_plus1right), 
rest671)
end
|  ( 33, ( ( _, ( MlyValue.conbind conbind1, conbind1left, 
conbind1right)) :: rest671)) => let val  result = 
MlyValue.conbind_plus (fn _ => let val  (conbind as conbind1) = 
conbind1 ()
 in ( [conbind] )
end)
 in ( LrTable.NT 14, ( result, conbind1left, conbind1right), rest671)

end
|  ( 34, ( ( _, ( MlyValue.ident ident1, (identleft as ident1left), (
identright as ident1right))) :: rest671)) => let val  result = 
MlyValue.conbind (fn _ => let val  (ident as ident1) = ident1 ()
 in (
 
		LexArg.addRestriction(
			lexArg, 
			Absyn.identName ident,
			Cache.REC,
			!(LexArg.currVisibility lexArg));
			
		Absyn.CONcb(ident,
			makeInfo lexArg (identleft, identright)) 
)
end)
 in ( LrTable.NT 15, ( result, ident1left, ident1right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.tuple_ty tuple_ty1, _, (tuple_tyright as 
tuple_ty1right))) :: _ :: ( _, ( MlyValue.ident ident1, (identleft as 
ident1left), _)) :: rest671)) => let val  result = MlyValue.conbind
 (fn _ => let val  (ident as ident1) = ident1 ()
 val  (tuple_ty as tuple_ty1) = tuple_ty1 ()
 in (
 
		LexArg.addRestriction(
			lexArg, 
			Absyn.identName ident,
			Cache.REC,
			!(LexArg.currVisibility lexArg));
	
		Absyn.CTORcb(ident, tuple_ty,
			makeInfo lexArg (identleft, tuple_tyright)) 
	
)
end)
 in ( LrTable.NT 15, ( result, ident1left, tuple_ty1right), rest671)

end
|  ( 36, ( rest671)) => let val  result = MlyValue.default_opt (fn _
 => ( NONE ))
 in ( LrTable.NT 16, ( result, defaultPos, defaultPos), rest671)
end
|  ( 37, ( ( _, ( MlyValue.clause_plus clause_plus1, _, 
clause_plus1right)) :: ( _, ( _, DEFAULT1left, _)) :: rest671)) => let
 val  result = MlyValue.default_opt (fn _ => let val  (clause_plus as 
clause_plus1) = clause_plus1 ()
 in ( SOME(clause_plus) )
end)
 in ( LrTable.NT 16, ( result, DEFAULT1left, clause_plus1right), 
rest671)
end
|  ( 38, ( ( _, ( MlyValue.clause clause1, clause1left, clause1right))
 :: rest671)) => let val  result = MlyValue.clause_plus (fn _ => let
 val  (clause as clause1) = clause1 ()
 in ( clause )
end)
 in ( LrTable.NT 17, ( result, clause1left, clause1right), rest671)

end
|  ( 39, ( ( _, ( MlyValue.clause_plus clause_plus1, _, (
clause_plusright as clause_plus1right))) :: ( _, ( MlyValue.clause 
clause1, (clauseleft as clause1left), _)) :: rest671)) => let val  
result = MlyValue.clause_plus (fn _ => let val  (clause as clause1) = 
clause1 ()
 val  (clause_plus as clause_plus1) = clause_plus1 ()
 in (
 Absyn.CLAUSE2(clause, clause_plus,
			makeInfo lexArg (clauseleft, clause_plusright)) 
)
end)
 in ( LrTable.NT 17, ( result, clause1left, clause_plus1right), 
rest671)
end
|  ( 40, ( ( _, ( MlyValue.result result1, _, (resultright as 
result1right))) :: ( _, ( MlyValue.seq_pat seq_pat1, _, _)) :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( 
MlyValue.conjunctive_goal_opt conjunctive_goal_opt1, _, _)) :: ( _, (
 _, (RULEleft as RULE1left), _)) :: rest671)) => let val  result = 
MlyValue.clause (fn _ => let val  (conjunctive_goal_opt as 
conjunctive_goal_opt1) = conjunctive_goal_opt1 ()
 val  (ident as ident1) = ident1 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 val  (result as result1) = result1 ()
 in (
 Absyn.CLAUSE1(conjunctive_goal_opt, ident, seq_pat, result, ref [], [], 
			makeInfo lexArg (RULEleft, resultright)) 
)
end)
 in ( LrTable.NT 18, ( result, RULE1left, result1right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.result result1, _, (resultright as 
result1right))) :: ( _, ( MlyValue.seq_pat seq_pat1, _, _)) :: ( _, ( 
MlyValue.ident ident1, _, _)) :: ( _, ( _, (AXIOMleft as AXIOM1left),
 _)) :: rest671)) => let val  result = MlyValue.clause (fn _ => let
 val  (ident as ident1) = ident1 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 val  (result as result1) = result1 ()
 in (
 Absyn.CLAUSE1(NONE, ident, seq_pat, result, ref [], [], 
			makeInfo lexArg (AXIOMleft, resultright)) 
)
end)
 in ( LrTable.NT 18, ( result, AXIOM1left, result1right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: ( _, ( MlyValue.ident ident1, identleft, 
identright)) :: _ :: ( _, ( MlyValue.conjunctive_goal_opt 
conjunctive_goal_opt1, _, _)) :: ( _, ( _, (RULEleft as RULE1left), _)
) :: rest671)) => let val  result = MlyValue.clause (fn _ => let val 
 (conjunctive_goal_opt as conjunctive_goal_opt1) = 
conjunctive_goal_opt1 ()
 val  (ident as ident1) = ident1 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CLAUSE1(conjunctive_goal_opt, ident, seq_pat, 
		    Absyn.RETURN([], makeInfo lexArg (identleft,identright)), ref [], [], 
			makeInfo lexArg (RULEleft, seq_patright)) 
)
end)
 in ( LrTable.NT 18, ( result, RULE1left, seq_pat1right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: ( _, ( MlyValue.ident ident1, identleft, 
identright)) :: ( _, ( _, (AXIOMleft as AXIOM1left), _)) :: rest671))
 => let val  result = MlyValue.clause (fn _ => let val  (ident as 
ident1) = ident1 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CLAUSE1(NONE, ident, seq_pat, 
		    Absyn.RETURN([], makeInfo lexArg (identleft,identright)), ref [], [], 
			makeInfo lexArg (AXIOMleft, seq_patright)) 
)
end)
 in ( LrTable.NT 18, ( result, AXIOM1left, seq_pat1right), rest671)

end
|  ( 44, ( ( _, ( MlyValue.seq_exp seq_exp1, _, (seq_expright as 
seq_exp1right))) :: ( _, ( _, (FATARROWleft as FATARROW1left), _)) :: 
rest671)) => let val  result = MlyValue.result (fn _ => let val  (
seq_exp as seq_exp1) = seq_exp1 ()
 in (
 Absyn.RETURN(seq_exp, 
			makeInfo lexArg (FATARROWleft, seq_expright)) 
)
end)
 in ( LrTable.NT 19, ( result, FATARROW1left, seq_exp1right), rest671)

end
|  ( 45, ( ( _, ( _, _, (FAILright as FAIL1right))) :: ( _, ( _, (
FATARROWleft as FATARROW1left), _)) :: rest671)) => let val  result = 
MlyValue.result (fn _ => (
 Absyn.FAIL (makeInfo lexArg (FATARROWleft, FAILright)) ))
 in ( LrTable.NT 19, ( result, FATARROW1left, FAIL1right), rest671)

end
|  ( 46, ( rest671)) => let val  result = 
MlyValue.conjunctive_goal_opt (fn _ => ( NONE ))
 in ( LrTable.NT 20, ( result, defaultPos, defaultPos), rest671)
end
|  ( 47, ( ( _, ( MlyValue.conjunctive_goal conjunctive_goal1, 
conjunctive_goal1left, conjunctive_goal1right)) :: rest671)) => let
 val  result = MlyValue.conjunctive_goal_opt (fn _ => let val  (
conjunctive_goal as conjunctive_goal1) = conjunctive_goal1 ()
 in ( SOME(conjunctive_goal) )
end)
 in ( LrTable.NT 20, ( result, conjunctive_goal1left, 
conjunctive_goal1right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.atomic_goal atomic_goal1, atomic_goal1left,
 atomic_goal1right)) :: rest671)) => let val  result = 
MlyValue.conjunctive_goal (fn _ => let val  (atomic_goal as 
atomic_goal1) = atomic_goal1 ()
 in ( atomic_goal )
end)
 in ( LrTable.NT 21, ( result, atomic_goal1left, atomic_goal1right), 
rest671)
end
|  ( 49, ( ( _, ( MlyValue.conjunctive_goal conjunctive_goal1, _, (
conjunctive_goalright as conjunctive_goal1right))) :: _ :: ( _, ( 
MlyValue.atomic_goal atomic_goal1, (atomic_goalleft as 
atomic_goal1left), _)) :: rest671)) => let val  result = 
MlyValue.conjunctive_goal (fn _ => let val  (atomic_goal as 
atomic_goal1) = atomic_goal1 ()
 val  (conjunctive_goal as conjunctive_goal1) = conjunctive_goal1 ()
 in (
 Absyn.ANDgoal(atomic_goal, conjunctive_goal,
			makeInfo lexArg (atomic_goalleft, conjunctive_goalright)) 
)
end)
 in ( LrTable.NT 21, ( result, atomic_goal1left, 
conjunctive_goal1right), rest671)
end
|  ( 50, ( ( _, ( _, AMPERSANDleft, (AMPERSANDright as AMPERSAND1right
))) :: ( _, ( MlyValue.atomic_goal atomic_goal1, atomic_goal1left, _))
 :: rest671)) => let val  result = MlyValue.conjunctive_goal (fn _ =>
 let val  (atomic_goal as atomic_goal1) = atomic_goal1 ()
 in (
 
			let val Absyn.INFO(file,_,_,Absyn.LOC(sl,sc,el,ec)) = 
					makeInfo lexArg (AMPERSANDleft, AMPERSANDright)
				fun sayErr s = TextIO.output(TextIO.stdErr, s)
				fun sayErr1 c = TextIO.output1(TextIO.stdErr, c)					
			in
			(    
			sayErr(file^":");
			sayErr(Int.toString sl);
			sayErr1 #".";
			sayErr(Int.toString sc);
			sayErr1 #"-";
			sayErr(Int.toString el);
			sayErr1 #".";
			sayErr(Int.toString ec);
			sayErr1 #" ";
			sayErr "Warning: AMPERSAND (&) before dashes ignored! THIS CODE IS NOT BACKWARDS COMPATIBLE!\n";
			atomic_goal 
			)
			end		
		
)
end)
 in ( LrTable.NT 21, ( result, atomic_goal1left, AMPERSAND1right), 
rest671)
end
|  ( 51, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, ADD_INTleft, ADD_INTright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_add_int (makeInfo lexArg (ADD_INTleft, ADD_INTright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 52, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, SUB_INTleft, SUB_INTright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_sub_int (makeInfo lexArg (SUB_INTleft, SUB_INTright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 53, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d1, _, _)) :: ( _, 
( _, (SUB_INTleft as SUB_INT1left), SUB_INTright)) :: rest671)) => let
 val  result = MlyValue.atomic_goal (fn _ => let val  exp_d1 = exp_d1
 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_neg_int (makeInfo lexArg (SUB_INTleft, SUB_INTright)), 
			[exp_d1], seq_pat, ref [],
			makeInfo lexArg (SUB_INTleft, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, SUB_INT1left, seq_pat1right), rest671)

end
|  ( 54, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, STARleft, STARright)) :: ( _, ( MlyValue.exp_d exp_d1, exp_d1left
, _)) :: rest671)) => let val  result = MlyValue.atomic_goal (fn _ =>
 let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_mul_int (makeInfo lexArg (STARleft, STARright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 55, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, DIV_INTleft, DIV_INTright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_div_int (makeInfo lexArg (DIV_INTleft, DIV_INTright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 56, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, MOD_INTleft, MOD_INTright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_mod_int (makeInfo lexArg (MOD_INTleft, MOD_INTright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 57, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, EQEQ_INTleft, EQEQ_INTright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_eq_int (makeInfo lexArg (EQEQ_INTleft, EQEQ_INTright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 58, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, GE_INTleft, GE_INTright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_ge_int (makeInfo lexArg (GE_INTleft, GE_INTright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 59, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, GT_INTleft, GT_INTright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_gt_int (makeInfo lexArg (GT_INTleft, GT_INTright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 60, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, LE_INTleft, LE_INTright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_le_int (makeInfo lexArg (LE_INTleft, LE_INTright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 61, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, LT_INTleft, LT_INTright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_lt_int (makeInfo lexArg (LT_INTleft, LT_INTright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 62, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, NE_INTleft, NE_INTright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_ne_int (makeInfo lexArg (NE_INTleft, NE_INTright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 63, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, ADD_REALleft, ADD_REALright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_add_real (makeInfo lexArg (ADD_REALleft, ADD_REALright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 64, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, SUB_REALleft, SUB_REALright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_sub_real (makeInfo lexArg (SUB_REALleft, SUB_REALright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 65, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d1, _, _)) :: ( _, 
( _, (SUB_REALleft as SUB_REAL1left), SUB_REALright)) :: rest671)) =>
 let val  result = MlyValue.atomic_goal (fn _ => let val  exp_d1 = 
exp_d1 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_neg_real (makeInfo lexArg (SUB_REALleft, SUB_REALright)), 
			[exp_d1], seq_pat, ref [],
			makeInfo lexArg (SUB_REALleft, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, SUB_REAL1left, seq_pat1right), rest671)

end
|  ( 66, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, MUL_REALleft, MUL_REALright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_mul_real (makeInfo lexArg (MUL_REALleft, MUL_REALright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 67, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, DIV_REALleft, DIV_REALright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_div_real (makeInfo lexArg (DIV_REALleft, DIV_REALright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 68, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, MOD_REALleft, MOD_REALright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_mod_real (makeInfo lexArg (MOD_REALleft, MOD_REALright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 69, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, POW_REALleft, POW_REALright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_pow_real (makeInfo lexArg (POW_REALleft, POW_REALright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 70, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, EQ_REALleft, EQ_REALright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_eq_real (makeInfo lexArg (EQ_REALleft, EQ_REALright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 71, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, GE_REALleft, GE_REALright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_ge_real (makeInfo lexArg (GE_REALleft, GE_REALright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 72, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, GT_REALleft, GT_REALright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_gt_real (makeInfo lexArg (GT_REALleft, GT_REALright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 73, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, LE_REALleft, LE_REALright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_le_real (makeInfo lexArg (LE_REALleft, LE_REALright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 74, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, LT_REALleft, LT_REALright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_lt_real (makeInfo lexArg (LT_REALleft, LT_REALright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 75, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, NE_REALleft, NE_REALright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_ne_real (makeInfo lexArg (NE_REALleft, NE_REALright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 76, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, ADD_STRINGleft, ADD_STRINGright)) :: ( _, ( MlyValue.exp_d exp_d1
, exp_d1left, _)) :: rest671)) => let val  result = 
MlyValue.atomic_goal (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_add_string (makeInfo lexArg (ADD_STRINGleft, ADD_STRINGright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 77, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, EQEQ_STRINGleft, EQEQ_STRINGright)) :: ( _, ( MlyValue.exp_d 
exp_d1, exp_d1left, _)) :: rest671)) => let val  result = 
MlyValue.atomic_goal (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_eq_string (makeInfo lexArg (EQEQ_STRINGleft, EQEQ_STRINGright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 78, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.exp_d exp_d2, _, _)) :: ( _, 
( _, ADD_LISTleft, ADD_LISTright)) :: ( _, ( MlyValue.exp_d exp_d1, 
exp_d1left, _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  exp_d1 = exp_d1 ()
 val  exp_d2 = exp_d2 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(
			op_add_list (makeInfo lexArg (ADD_LISTleft, ADD_LISTright)), 
			[exp_d1, exp_d2], seq_pat, ref [],
			makeInfo lexArg (exp_d1left, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, exp_d1left, seq_pat1right), rest671)

end
|  ( 79, ( ( _, ( MlyValue.seq_pat seq_pat1, _, (seq_patright as 
seq_pat1right))) :: _ :: ( _, ( MlyValue.seq_exp seq_exp1, _, _)) :: (
 _, ( MlyValue.longorshortid longorshortid1, (longorshortidleft as 
longorshortid1left), _)) :: rest671)) => let val  result = 
MlyValue.atomic_goal (fn _ => let val  (longorshortid as 
longorshortid1) = longorshortid1 ()
 val  (seq_exp as seq_exp1) = seq_exp1 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in (
 Absyn.CALLgoal(longorshortid, seq_exp, seq_pat, ref [],
			makeInfo lexArg (longorshortidleft, seq_patright)) 
)
end)
 in ( LrTable.NT 22, ( result, longorshortid1left, seq_pat1right), 
rest671)
end
|  ( 80, ( ( _, ( MlyValue.seq_exp seq_exp1, _, (seq_expright as 
seq_exp1right))) :: ( _, ( MlyValue.longorshortid longorshortid1, (
longorshortidleft as longorshortid1left), _)) :: rest671)) => let val 
 result = MlyValue.atomic_goal (fn _ => let val  (longorshortid as 
longorshortid1) = longorshortid1 ()
 val  (seq_exp as seq_exp1) = seq_exp1 ()
 in (
 Absyn.CALLgoal(longorshortid, seq_exp, [], ref [],
			makeInfo lexArg (longorshortidleft, seq_expright)) 
)
end)
 in ( LrTable.NT 22, ( result, longorshortid1left, seq_exp1right), 
rest671)
end
|  ( 81, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: _
 :: ( _, ( MlyValue.ident ident1, (identleft as ident1left), _)) :: 
rest671)) => let val  result = MlyValue.atomic_goal (fn _ => let val 
 (ident as ident1) = ident1 ()
 val  (exp as exp1) = exp1 ()
 in (
 Absyn.EQUALgoal(ident, exp,
			makeInfo lexArg (identleft, expright)) 
)
end)
 in ( LrTable.NT 22, ( result, ident1left, exp1right), rest671)
end
|  ( 82, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: _
 :: ( _, ( MlyValue.pat pat1, _, _)) :: ( _, ( _, (LETleft as LET1left
), _)) :: rest671)) => let val  result = MlyValue.atomic_goal (fn _ =>
 let val  (pat as pat1) = pat1 ()
 val  (exp as exp1) = exp1 ()
 in (
 Absyn.LETgoal(pat, exp,  ref (NONE),
			makeInfo lexArg (LETleft, expright)) 
)
end)
 in ( LrTable.NT 22, ( result, LET1left, exp1right), rest671)
end
|  ( 83, ( ( _, ( MlyValue.atomic_goal atomic_goal1, _, (
atomic_goalright as atomic_goal1right))) :: ( _, ( _, (NOTleft as 
NOT1left), _)) :: rest671)) => let val  result = MlyValue.atomic_goal
 (fn _ => let val  (atomic_goal as atomic_goal1) = atomic_goal1 ()
 in (
 Absyn.NOTgoal(atomic_goal,
			makeInfo lexArg (NOTleft, atomic_goalright)) 
)
end)
 in ( LrTable.NT 22, ( result, NOT1left, atomic_goal1right), rest671)

end
|  ( 84, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( 
MlyValue.conjunctive_goal conjunctive_goal1, _, _)) :: ( _, ( _, 
LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.atomic_goal (fn _ => let val  (conjunctive_goal as 
conjunctive_goal1) = conjunctive_goal1 ()
 in ( conjunctive_goal )
end)
 in ( LrTable.NT 22, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 85, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: (
 _, ( _, COLONCOLONleft, COLONCOLONright)) :: ( _, ( MlyValue.exp_a 
exp_a1, (exp_aleft as exp_a1left), _)) :: rest671)) => let val  result
 = MlyValue.exp (fn _ => let val  (exp_a as exp_a1) = exp_a1 ()
 val  (exp as exp1) = exp1 ()
 in (
 Absyn.STRUCTexp(
			ctor_cons(makeInfo lexArg (COLONCOLONleft, COLONCOLONright)), 
			[exp_a, exp], 
			makeInfo lexArg (exp_aleft, expright)) 
)
end)
 in ( LrTable.NT 23, ( result, exp_a1left, exp1right), rest671)
end
|  ( 86, ( ( _, ( MlyValue.exp_a exp_a1, exp_a1left, exp_a1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (exp_a
 as exp_a1) = exp_a1 ()
 in ( exp_a )
end)
 in ( LrTable.NT 23, ( result, exp_a1left, exp_a1right), rest671)
end
|  ( 87, ( ( _, ( _, _, (RPARENright as RPAREN1right))) :: ( _, ( _, (
LPARENleft as LPAREN1left), _)) :: rest671)) => let val  result = 
MlyValue.exp_a (fn _ => (
 Absyn.STRUCTexp(NONE, [],
			makeInfo lexArg (LPARENleft, RPARENright)) 
))
 in ( LrTable.NT 24, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 88, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.exp exp1, _,
 _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.exp_a (fn _ => let val  (exp as exp1) = exp1 ()
 in ( exp )
end)
 in ( LrTable.NT 24, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 89, ( ( _, ( _, _, (RPARENright as RPAREN1right))) :: ( _, ( 
MlyValue.exp_comma_plus exp_comma_plus1, _, _)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (LPARENleft as LPAREN1left), _)
) :: rest671)) => let val  result = MlyValue.exp_a (fn _ => let val  (
exp as exp1) = exp1 ()
 val  (exp_comma_plus as exp_comma_plus1) = exp_comma_plus1 ()
 in (
 Absyn.STRUCTexp(NONE, exp :: exp_comma_plus,
			makeInfo lexArg (LPARENleft, RPARENright)) 
)
end)
 in ( LrTable.NT 24, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 90, ( ( _, ( MlyValue.exp_c exp_c1, exp_c1left, exp_c1right)) :: 
rest671)) => let val  result = MlyValue.exp_a (fn _ => let val  (exp_c
 as exp_c1) = exp_c1 ()
 in ( exp_c )
end)
 in ( LrTable.NT 24, ( result, exp_c1left, exp_c1right), rest671)
end
|  ( 91, ( ( _, ( MlyValue.exp_b exp_b1, _, (exp_bright as exp_b1right
))) :: ( _, ( _, COLONCOLONleft, COLONCOLONright)) :: ( _, ( 
MlyValue.exp_c exp_c1, (exp_cleft as exp_c1left), _)) :: rest671)) =>
 let val  result = MlyValue.exp_b (fn _ => let val  (exp_c as exp_c1)
 = exp_c1 ()
 val  (exp_b as exp_b1) = exp_b1 ()
 in (
 Absyn.STRUCTexp(
			ctor_cons(makeInfo lexArg (COLONCOLONleft, COLONCOLONright)), 
			[exp_c, exp_b],
			makeInfo lexArg (exp_cleft, exp_bright)) 
)
end)
 in ( LrTable.NT 25, ( result, exp_c1left, exp_b1right), rest671)
end
|  ( 92, ( ( _, ( MlyValue.exp_c exp_c1, exp_c1left, exp_c1right)) :: 
rest671)) => let val  result = MlyValue.exp_b (fn _ => let val  (exp_c
 as exp_c1) = exp_c1 ()
 in ( exp_c )
end)
 in ( LrTable.NT 25, ( result, exp_c1left, exp_c1right), rest671)
end
|  ( 93, ( ( _, ( MlyValue.exp_star exp_star1, _, (exp_starright as 
exp_star1right))) :: ( _, ( MlyValue.longorshortid longorshortid1, (
longorshortidleft as longorshortid1left), _)) :: rest671)) => let val 
 result = MlyValue.exp_c (fn _ => let val  (longorshortid as 
longorshortid1) = longorshortid1 ()
 val  (exp_star as exp_star1) = exp_star1 ()
 in (
 Absyn.STRUCTexp(SOME longorshortid, exp_star,
			makeInfo lexArg (longorshortidleft, exp_starright)) 
)
end)
 in ( LrTable.NT 26, ( result, longorshortid1left, exp_star1right), 
rest671)
end
|  ( 94, ( ( _, ( MlyValue.exp_d exp_d1, _, (exp_dright as exp_d1right
))) :: ( _, ( MlyValue.longorshortid longorshortid1, (
longorshortidleft as longorshortid1left), _)) :: rest671)) => let val 
 result = MlyValue.exp_c (fn _ => let val  (longorshortid as 
longorshortid1) = longorshortid1 ()
 val  (exp_d as exp_d1) = exp_d1 ()
 in (
 Absyn.STRUCTexp(SOME longorshortid, [exp_d],
			makeInfo lexArg (longorshortidleft, exp_dright)) 
)
end)
 in ( LrTable.NT 26, ( result, longorshortid1left, exp_d1right), 
rest671)
end
|  ( 95, ( ( _, ( MlyValue.exp_d exp_d1, exp_d1left, exp_d1right)) :: 
rest671)) => let val  result = MlyValue.exp_c (fn _ => let val  (exp_d
 as exp_d1) = exp_d1 ()
 in ( exp_d )
end)
 in ( LrTable.NT 26, ( result, exp_d1left, exp_d1right), rest671)
end
|  ( 96, ( ( _, ( MlyValue.literal literal1, literal1left, 
literal1right)) :: rest671)) => let val  result = MlyValue.exp_d (fn _
 => let val  (literal as literal1) = literal1 ()
 in (
 Absyn.LITexp(literal, 
			makeInfo lexArg (literal1left, literal1right)) 
)
end)
 in ( LrTable.NT 27, ( result, literal1left, literal1right), rest671)

end
|  ( 97, ( ( _, ( MlyValue.longorshortid longorshortid1, (
longorshortidleft as longorshortid1left), (longorshortidright as 
longorshortid1right))) :: rest671)) => let val  result = 
MlyValue.exp_d (fn _ => let val  (longorshortid as longorshortid1) = 
longorshortid1 ()
 in (
 Absyn.IDENTexp(longorshortid, ref(Absyn.STRUCTexp(NONE,[], Absyn.dummyInfo)),
			makeInfo lexArg (longorshortidleft, longorshortidright)) 
)
end)
 in ( LrTable.NT 27, ( result, longorshortid1left, longorshortid1right
), rest671)
end
|  ( 98, ( ( _, ( _, _, (RBRACKright as RBRACK1right))) :: ( _, ( 
MlyValue.exp_comma_star exp_comma_star1, _, _)) :: ( _, ( _, (
LBRACKleft as LBRACK1left), _)) :: rest671)) => let val  result = 
MlyValue.exp_d (fn _ => let val  (exp_comma_star as exp_comma_star1) =
 exp_comma_star1 ()
 in (
 mkexplst(
			exp_comma_star,
			makeInfo lexArg (LBRACKleft, RBRACKright)) 
)
end)
 in ( LrTable.NT 27, ( result, LBRACK1left, RBRACK1right), rest671)

end
|  ( 99, ( rest671)) => let val  result = MlyValue.seq_exp (fn _ => (
 [] ))
 in ( LrTable.NT 28, ( result, defaultPos, defaultPos), rest671)
end
|  ( 100, ( ( _, ( MlyValue.exp_b exp_b1, exp_b1left, exp_b1right)) ::
 rest671)) => let val  result = MlyValue.seq_exp (fn _ => let val  (
exp_b as exp_b1) = exp_b1 ()
 in ( [exp_b] )
end)
 in ( LrTable.NT 28, ( result, exp_b1left, exp_b1right), rest671)
end
|  ( 101, ( ( _, ( MlyValue.exp_star exp_star1, exp_star1left, 
exp_star1right)) :: rest671)) => let val  result = MlyValue.seq_exp
 (fn _ => let val  (exp_star as exp_star1) = exp_star1 ()
 in ( exp_star )
end)
 in ( LrTable.NT 28, ( result, exp_star1left, exp_star1right), rest671
)
end
|  ( 102, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( 
MlyValue.exp_comma_star exp_comma_star1, _, _)) :: ( _, ( _, 
LPAREN1left, _)) :: rest671)) => let val  result = MlyValue.exp_star
 (fn _ => let val  (exp_comma_star as exp_comma_star1) = 
exp_comma_star1 ()
 in ( exp_comma_star )
end)
 in ( LrTable.NT 29, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 103, ( rest671)) => let val  result = MlyValue.exp_comma_star (fn
 _ => ( [] ))
 in ( LrTable.NT 30, ( result, defaultPos, defaultPos), rest671)
end
|  ( 104, ( ( _, ( MlyValue.exp_comma_plus exp_comma_plus1, 
exp_comma_plus1left, exp_comma_plus1right)) :: rest671)) => let val  
result = MlyValue.exp_comma_star (fn _ => let val  (exp_comma_plus as 
exp_comma_plus1) = exp_comma_plus1 ()
 in ( exp_comma_plus )
end)
 in ( LrTable.NT 30, ( result, exp_comma_plus1left, 
exp_comma_plus1right), rest671)
end
|  ( 105, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671
)) => let val  result = MlyValue.exp_comma_plus (fn _ => let val  (exp
 as exp1) = exp1 ()
 in ( [exp] )
end)
 in ( LrTable.NT 31, ( result, exp1left, exp1right), rest671)
end
|  ( 106, ( ( _, ( MlyValue.exp_comma_plus exp_comma_plus1, _, 
exp_comma_plus1right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _))
 :: rest671)) => let val  result = MlyValue.exp_comma_plus (fn _ =>
 let val  (exp as exp1) = exp1 ()
 val  (exp_comma_plus as exp_comma_plus1) = exp_comma_plus1 ()
 in ( exp :: exp_comma_plus )
end)
 in ( LrTable.NT 31, ( result, exp1left, exp_comma_plus1right), 
rest671)
end
|  ( 107, ( ( _, ( MlyValue.pat pat1, _, (patright as pat1right))) ::
 _ :: ( _, ( MlyValue.ident ident1, (identleft as ident1left), _)) :: 
rest671)) => let val  result = MlyValue.pat (fn _ => let val  (ident
 as ident1) = ident1 ()
 val  (pat as pat1) = pat1 ()
 in (
 Absyn.BINDpat(ident, pat,
			makeInfo lexArg (identleft, patright)))

end)
 in ( LrTable.NT 32, ( result, ident1left, pat1right), rest671)
end
|  ( 108, ( ( _, ( MlyValue.pat_a pat_a1, pat_a1left, pat_a1right)) ::
 rest671)) => let val  result = MlyValue.pat (fn _ => let val  (pat_a
 as pat_a1) = pat_a1 ()
 in ( pat_a )
end)
 in ( LrTable.NT 32, ( result, pat_a1left, pat_a1right), rest671)
end
|  ( 109, ( ( _, ( MlyValue.pat_a pat_a1, _, (pat_aright as 
pat_a1right))) :: ( _, ( _, COLONCOLONleft, COLONCOLONright)) :: ( _, 
( MlyValue.pat_b pat_b1, (pat_bleft as pat_b1left), _)) :: rest671))
 => let val  result = MlyValue.pat_a (fn _ => let val  (pat_b as 
pat_b1) = pat_b1 ()
 val  (pat_a as pat_a1) = pat_a1 ()
 in (
 Absyn.STRUCTpat(
			ctor_cons(makeInfo lexArg (COLONCOLONleft, COLONCOLONright)), 
			[pat_b, pat_a],
			ref [],  
			makeInfo lexArg (pat_bleft, pat_aright)) 
)
end)
 in ( LrTable.NT 33, ( result, pat_b1left, pat_a1right), rest671)
end
|  ( 110, ( ( _, ( MlyValue.pat_b pat_b1, pat_b1left, pat_b1right)) ::
 rest671)) => let val  result = MlyValue.pat_a (fn _ => let val  (
pat_b as pat_b1) = pat_b1 ()
 in ( pat_b )
end)
 in ( LrTable.NT 33, ( result, pat_b1left, pat_b1right), rest671)
end
|  ( 111, ( ( _, ( _, _, (RPARENright as RPAREN1right))) :: ( _, ( _,
 (LPARENleft as LPAREN1left), _)) :: rest671)) => let val  result = 
MlyValue.pat_b (fn _ => (
 Absyn.STRUCTpat(NONE, [], 
			ref [],
			makeInfo lexArg (LPARENleft, RPARENright)) 
))
 in ( LrTable.NT 34, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 112, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.pat pat1, _
, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.pat_b (fn _ => let val  (pat as pat1) = pat1 ()
 in ( pat )
end)
 in ( LrTable.NT 34, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 113, ( ( _, ( _, _, (RPARENright as RPAREN1right))) :: ( _, ( 
MlyValue.pat_comma_plus pat_comma_plus1, _, _)) :: _ :: ( _, ( 
MlyValue.pat pat1, _, _)) :: ( _, ( _, (LPARENleft as LPAREN1left), _)
) :: rest671)) => let val  result = MlyValue.pat_b (fn _ => let val  (
pat as pat1) = pat1 ()
 val  (pat_comma_plus as pat_comma_plus1) = pat_comma_plus1 ()
 in (
 Absyn.STRUCTpat(NONE, pat :: pat_comma_plus, 
			ref [],
			makeInfo lexArg (LPARENleft, RPARENright)) 
)
end)
 in ( LrTable.NT 34, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 114, ( ( _, ( MlyValue.pat_d pat_d1, pat_d1left, pat_d1right)) ::
 rest671)) => let val  result = MlyValue.pat_b (fn _ => let val  (
pat_d as pat_d1) = pat_d1 ()
 in ( pat_d )
end)
 in ( LrTable.NT 34, ( result, pat_d1left, pat_d1right), rest671)
end
|  ( 115, ( ( _, ( _, _, (RPARENright as RPAREN1right))) :: ( _, ( 
MlyValue.pat_comma_plus pat_comma_plus1, _, _)) :: _ :: ( _, ( 
MlyValue.pat pat1, _, patright)) :: _ :: ( _, ( MlyValue.ident ident1,
 identleft, _)) :: ( _, ( _, (LPARENleft as LPAREN1left), _)) :: 
rest671)) => let val  result = MlyValue.pat_b (fn _ => let val  (ident
 as ident1) = ident1 ()
 val  (pat as pat1) = pat1 ()
 val  (pat_comma_plus as pat_comma_plus1) = pat_comma_plus1 ()
 in (
 Absyn.STRUCTpat(NONE, 
			Absyn.NAMEDpat(ident, pat, makeInfo lexArg (identleft, patright)) :: pat_comma_plus,
			ref [],
			makeInfo lexArg (LPARENleft, RPARENright))
		
)
end)
 in ( LrTable.NT 34, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 116, ( ( _, ( MlyValue.pat_c pat_c1, _, (pat_cright as 
pat_c1right))) :: ( _, ( _, COLONCOLONleft, COLONCOLONright)) :: ( _, 
( MlyValue.pat_d pat_d1, (pat_dleft as pat_d1left), _)) :: rest671))
 => let val  result = MlyValue.pat_c (fn _ => let val  (pat_d as 
pat_d1) = pat_d1 ()
 val  (pat_c as pat_c1) = pat_c1 ()
 in (
 Absyn.STRUCTpat(
			ctor_cons(makeInfo lexArg (COLONCOLONleft, COLONCOLONright)), 
			[pat_d, pat_c],
			ref [],
			makeInfo lexArg (pat_dleft, pat_cright)) 
)
end)
 in ( LrTable.NT 35, ( result, pat_d1left, pat_c1right), rest671)
end
|  ( 117, ( ( _, ( MlyValue.pat_d pat_d1, pat_d1left, pat_d1right)) ::
 rest671)) => let val  result = MlyValue.pat_c (fn _ => let val  (
pat_d as pat_d1) = pat_d1 ()
 in ( pat_d )
end)
 in ( LrTable.NT 35, ( result, pat_d1left, pat_d1right), rest671)
end
|  ( 118, ( ( _, ( MlyValue.pat_star pat_star1, _, (pat_starright as 
pat_star1right))) :: ( _, ( MlyValue.longorshortid longorshortid1, (
longorshortidleft as longorshortid1left), _)) :: rest671)) => let val 
 result = MlyValue.pat_d (fn _ => let val  (longorshortid as 
longorshortid1) = longorshortid1 ()
 val  (pat_star as pat_star1) = pat_star1 ()
 in (
 Absyn.STRUCTpat(SOME longorshortid, pat_star,
			ref [],
			makeInfo lexArg (longorshortidleft, pat_starright)) 
)
end)
 in ( LrTable.NT 36, ( result, longorshortid1left, pat_star1right), 
rest671)
end
|  ( 119, ( ( _, ( MlyValue.pat_e pat_e1, _, (pat_eright as 
pat_e1right))) :: ( _, ( MlyValue.longorshortid longorshortid1, (
longorshortidleft as longorshortid1left), _)) :: rest671)) => let val 
 result = MlyValue.pat_d (fn _ => let val  (longorshortid as 
longorshortid1) = longorshortid1 ()
 val  (pat_e as pat_e1) = pat_e1 ()
 in (
 Absyn.STRUCTpat(SOME longorshortid, [pat_e],
			ref [],
			makeInfo lexArg (longorshortidleft, pat_eright)) 
)
end)
 in ( LrTable.NT 36, ( result, longorshortid1left, pat_e1right), 
rest671)
end
|  ( 120, ( ( _, ( MlyValue.pat_e pat_e1, pat_e1left, pat_e1right)) ::
 rest671)) => let val  result = MlyValue.pat_d (fn _ => let val  (
pat_e as pat_e1) = pat_e1 ()
 in ( pat_e )
end)
 in ( LrTable.NT 36, ( result, pat_e1left, pat_e1right), rest671)
end
|  ( 121, ( ( _, ( _, (WILDleft as WILD1left), (WILDright as 
WILD1right))) :: rest671)) => let val  result = MlyValue.pat_e (fn _
 => ( Absyn.WILDpat(makeInfo lexArg (WILDleft, WILDright)) ))
 in ( LrTable.NT 37, ( result, WILD1left, WILD1right), rest671)
end
|  ( 122, ( ( _, ( MlyValue.literal literal1, (literalleft as 
literal1left), (literalright as literal1right))) :: rest671)) => let
 val  result = MlyValue.pat_e (fn _ => let val  (literal as literal1)
 = literal1 ()
 in (
 Absyn.LITpat(literal, 
			makeInfo lexArg (literalleft, literalright)) 
)
end)
 in ( LrTable.NT 37, ( result, literal1left, literal1right), rest671)

end
|  ( 123, ( ( _, ( MlyValue.longid longid1, (longidleft as longid1left
), (longidright as longid1right))) :: rest671)) => let val  result = 
MlyValue.pat_e (fn _ => let val  (longid as longid1) = longid1 ()
 in (
 Absyn.CONpat(longid,
			makeInfo lexArg (longidleft, longidright)) )

end)
 in ( LrTable.NT 37, ( result, longid1left, longid1right), rest671)

end
|  ( 124, ( ( _, ( MlyValue.ident ident1, (identleft as ident1left), (
identright as ident1right))) :: rest671)) => let val  result = 
MlyValue.pat_e (fn _ => let val  (ident as ident1) = ident1 ()
 in (
 Absyn.IDENTpat(ident, ref(Absyn.WILDpat(Absyn.dummyInfo)),
			makeInfo lexArg (identleft, identright)) 
)
end)
 in ( LrTable.NT 37, ( result, ident1left, ident1right), rest671)
end
|  ( 125, ( ( _, ( _, _, (RBRACKright as RBRACK1right))) :: ( _, ( 
MlyValue.pat_comma_star_list pat_comma_star_list1, _, _)) :: ( _, ( _,
 (LBRACKleft as LBRACK1left), _)) :: rest671)) => let val  result = 
MlyValue.pat_e (fn _ => let val  (pat_comma_star_list as 
pat_comma_star_list1) = pat_comma_star_list1 ()
 in (
 mkpatlst(
			pat_comma_star_list,
			makeInfo lexArg (LBRACKleft, RBRACKright)
			) 
)
end)
 in ( LrTable.NT 37, ( result, LBRACK1left, RBRACK1right), rest671)

end
|  ( 126, ( rest671)) => let val  result = MlyValue.seq_pat (fn _ => (
 [] ))
 in ( LrTable.NT 39, ( result, defaultPos, defaultPos), rest671)
end
|  ( 127, ( ( _, ( MlyValue.pat_c pat_c1, pat_c1left, pat_c1right)) ::
 rest671)) => let val  result = MlyValue.seq_pat (fn _ => let val  (
pat_c as pat_c1) = pat_c1 ()
 in ( [pat_c] )
end)
 in ( LrTable.NT 39, ( result, pat_c1left, pat_c1right), rest671)
end
|  ( 128, ( ( _, ( MlyValue.pat_star pat_star1, pat_star1left, 
pat_star1right)) :: rest671)) => let val  result = MlyValue.seq_pat
 (fn _ => let val  (pat_star as pat_star1) = pat_star1 ()
 in ( pat_star )
end)
 in ( LrTable.NT 39, ( result, pat_star1left, pat_star1right), rest671
)
end
|  ( 129, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( 
MlyValue.pat_comma_star pat_comma_star1, _, _)) :: ( _, ( _, 
LPAREN1left, _)) :: rest671)) => let val  result = MlyValue.pat_star
 (fn _ => let val  (pat_comma_star as pat_comma_star1) = 
pat_comma_star1 ()
 in ( pat_comma_star )
end)
 in ( LrTable.NT 40, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 130, ( rest671)) => let val  result = 
MlyValue.pat_comma_star_list (fn _ => ( [] ))
 in ( LrTable.NT 43, ( result, defaultPos, defaultPos), rest671)
end
|  ( 131, ( ( _, ( MlyValue.pat_comma_plus_list pat_comma_plus_list1, 
pat_comma_plus_list1left, pat_comma_plus_list1right)) :: rest671)) =>
 let val  result = MlyValue.pat_comma_star_list (fn _ => let val  (
pat_comma_plus_list as pat_comma_plus_list1) = pat_comma_plus_list1 ()
 in ( pat_comma_plus_list )
end)
 in ( LrTable.NT 43, ( result, pat_comma_plus_list1left, 
pat_comma_plus_list1right), rest671)
end
|  ( 132, ( ( _, ( MlyValue.pat pat1, pat1left, pat1right)) :: rest671
)) => let val  result = MlyValue.pat_comma_plus_list (fn _ => let val 
 (pat as pat1) = pat1 ()
 in ( [pat] )
end)
 in ( LrTable.NT 44, ( result, pat1left, pat1right), rest671)
end
|  ( 133, ( ( _, ( MlyValue.pat_comma_plus pat_comma_plus1, _, 
pat_comma_plus1right)) :: _ :: ( _, ( MlyValue.pat pat1, pat1left, _))
 :: rest671)) => let val  result = MlyValue.pat_comma_plus_list (fn _
 => let val  (pat as pat1) = pat1 ()
 val  (pat_comma_plus as pat_comma_plus1) = pat_comma_plus1 ()
 in ( pat :: pat_comma_plus )
end)
 in ( LrTable.NT 44, ( result, pat1left, pat_comma_plus1right), 
rest671)
end
|  ( 134, ( rest671)) => let val  result = MlyValue.pat_comma_star (fn
 _ => ( [] ))
 in ( LrTable.NT 41, ( result, defaultPos, defaultPos), rest671)
end
|  ( 135, ( ( _, ( MlyValue.pat_comma_plus pat_comma_plus1, 
pat_comma_plus1left, pat_comma_plus1right)) :: rest671)) => let val  
result = MlyValue.pat_comma_star (fn _ => let val  (pat_comma_plus as 
pat_comma_plus1) = pat_comma_plus1 ()
 in ( pat_comma_plus )
end)
 in ( LrTable.NT 41, ( result, pat_comma_plus1left, 
pat_comma_plus1right), rest671)
end
|  ( 136, ( ( _, ( MlyValue.pat pat1, pat1left, pat1right)) :: rest671
)) => let val  result = MlyValue.pat_comma_plus (fn _ => let val  (pat
 as pat1) = pat1 ()
 in ( [pat] )
end)
 in ( LrTable.NT 42, ( result, pat1left, pat1right), rest671)
end
|  ( 137, ( ( _, ( MlyValue.pat_comma_plus pat_comma_plus1, _, 
pat_comma_plus1right)) :: _ :: ( _, ( MlyValue.pat pat1, pat1left, _))
 :: rest671)) => let val  result = MlyValue.pat_comma_plus (fn _ =>
 let val  (pat as pat1) = pat1 ()
 val  (pat_comma_plus as pat_comma_plus1) = pat_comma_plus1 ()
 in ( pat :: pat_comma_plus )
end)
 in ( LrTable.NT 42, ( result, pat1left, pat_comma_plus1right), 
rest671)
end
|  ( 138, ( ( _, ( MlyValue.pat pat1, _, (patright as pat1right))) ::
 _ :: ( _, ( MlyValue.ident ident1, (identleft as ident1left), _)) :: 
rest671)) => let val  result = MlyValue.pat_comma_plus (fn _ => let
 val  (ident as ident1) = ident1 ()
 val  (pat as pat1) = pat1 ()
 in (
 [ Absyn.NAMEDpat(ident, pat, makeInfo lexArg (identleft, patright)) ] 
)
end)
 in ( LrTable.NT 42, ( result, ident1left, pat1right), rest671)
end
|  ( 139, ( ( _, ( MlyValue.pat_comma_plus pat_comma_plus1, _, 
pat_comma_plus1right)) :: _ :: ( _, ( MlyValue.pat pat1, _, patright))
 :: _ :: ( _, ( MlyValue.ident ident1, (identleft as ident1left), _))
 :: rest671)) => let val  result = MlyValue.pat_comma_plus (fn _ =>
 let val  (ident as ident1) = ident1 ()
 val  (pat as pat1) = pat1 ()
 val  (pat_comma_plus as pat_comma_plus1) = pat_comma_plus1 ()
 in (
 Absyn.NAMEDpat(ident, pat, makeInfo lexArg (identleft, patright)) :: pat_comma_plus 
)
end)
 in ( LrTable.NT 42, ( result, ident1left, pat_comma_plus1right), 
rest671)
end
|  ( 140, ( ( _, ( MlyValue.CCON CCON1, (CCONleft as CCON1left), (
CCONright as CCON1right))) :: rest671)) => let val  result = 
MlyValue.literal (fn _ => let val  (CCON as CCON1) = CCON1 ()
 in ( Absyn.CCONlit(CCON,
			makeInfo lexArg (CCONleft, CCONright)) )

end)
 in ( LrTable.NT 45, ( result, CCON1left, CCON1right), rest671)
end
|  ( 141, ( ( _, ( MlyValue.ICON ICON1, (ICONleft as ICON1left), (
ICONright as ICON1right))) :: rest671)) => let val  result = 
MlyValue.literal (fn _ => let val  (ICON as ICON1) = ICON1 ()
 in ( Absyn.ICONlit(ICON,
			makeInfo lexArg (ICONleft, ICONright)) )

end)
 in ( LrTable.NT 45, ( result, ICON1left, ICON1right), rest671)
end
|  ( 142, ( ( _, ( MlyValue.RCON RCON1, (RCONleft as RCON1left), (
RCONright as RCON1right))) :: rest671)) => let val  result = 
MlyValue.literal (fn _ => let val  (RCON as RCON1) = RCON1 ()
 in ( Absyn.RCONlit(RCON,
			makeInfo lexArg (RCONleft, RCONright)) )

end)
 in ( LrTable.NT 45, ( result, RCON1left, RCON1right), rest671)
end
|  ( 143, ( ( _, ( MlyValue.SCON SCON1, (SCONleft as SCON1left), (
SCONright as SCON1right))) :: rest671)) => let val  result = 
MlyValue.literal (fn _ => let val  (SCON as SCON1) = SCON1 ()
 in ( Absyn.SCONlit(SCON,
			makeInfo lexArg (SCONleft, SCONright)) )

end)
 in ( LrTable.NT 45, ( result, SCON1left, SCON1right), rest671)
end
|  ( 144, ( ( _, ( MlyValue.seq_ty seq_ty2, _, seq_ty2right)) :: _ :: 
( _, ( MlyValue.seq_ty seq_ty1, seq_ty1left, _)) :: rest671)) => let
 val  result = MlyValue.ty (fn _ => let val  seq_ty1 = seq_ty1 ()
 val  seq_ty2 = seq_ty2 ()
 in (
 Absyn.RELty(seq_ty1, seq_ty2,
			makeInfo lexArg (seq_ty1left, seq_ty2right)) 
)
end)
 in ( LrTable.NT 46, ( result, seq_ty1left, seq_ty2right), rest671)

end
|  ( 145, ( ( _, ( MlyValue.tuple_ty tuple_ty1, (tuple_tyleft as 
tuple_ty1left), (tuple_tyright as tuple_ty1right))) :: rest671)) =>
 let val  result = MlyValue.ty (fn _ => let val  (tuple_ty as 
tuple_ty1) = tuple_ty1 ()
 in (
 mktuplety(tuple_ty,makeInfo lexArg (tuple_tyleft,tuple_tyright)) )

end)
 in ( LrTable.NT 46, ( result, tuple_ty1left, tuple_ty1right), rest671
)
end
|  ( 146, ( ( _, ( MlyValue.tuple_ty tuple_ty1, _, tuple_ty1right)) ::
 _ :: ( _, ( MlyValue.ty_sans_star ty_sans_star1, ty_sans_star1left, _
)) :: rest671)) => let val  result = MlyValue.tuple_ty (fn _ => let
 val  (ty_sans_star as ty_sans_star1) = ty_sans_star1 ()
 val  (tuple_ty as tuple_ty1) = tuple_ty1 ()
 in ( ty_sans_star :: tuple_ty )
end)
 in ( LrTable.NT 47, ( result, ty_sans_star1left, tuple_ty1right), 
rest671)
end
|  ( 147, ( ( _, ( MlyValue.ty_sans_star ty_sans_star1, 
ty_sans_star1left, ty_sans_star1right)) :: rest671)) => let val  
result = MlyValue.tuple_ty (fn _ => let val  (ty_sans_star as 
ty_sans_star1) = ty_sans_star1 ()
 in ( [ty_sans_star] )
end)
 in ( LrTable.NT 47, ( result, ty_sans_star1left, ty_sans_star1right),
 rest671)
end
|  ( 148, ( ( _, ( MlyValue.ty_sans_star ty_sans_star1, _, (
ty_sans_starright as ty_sans_star1right))) :: _ :: ( _, ( 
MlyValue.ident ident1, (identleft as ident1left), _)) :: rest671)) =>
 let val  result = MlyValue.tuple_ty (fn _ => let val  (ident as 
ident1) = ident1 ()
 val  (ty_sans_star as ty_sans_star1) = ty_sans_star1 ()
 in (
 [ Absyn.NAMEDty(ident, ty_sans_star, makeInfo lexArg (identleft, ty_sans_starright)) ] 
)
end)
 in ( LrTable.NT 47, ( result, ident1left, ty_sans_star1right), 
rest671)
end
|  ( 149, ( ( _, ( MlyValue.tuple_ty tuple_ty1, _, (tuple_tyright as 
tuple_ty1right))) :: _ :: ( _, ( MlyValue.ty_sans_star ty_sans_star1,
 _, _)) :: _ :: ( _, ( MlyValue.ident ident1, (identleft as ident1left
), _)) :: rest671)) => let val  result = MlyValue.tuple_ty (fn _ =>
 let val  (ident as ident1) = ident1 ()
 val  (ty_sans_star as ty_sans_star1) = ty_sans_star1 ()
 val  (tuple_ty as tuple_ty1) = tuple_ty1 ()
 in (
 Absyn.NAMEDty(ident, ty_sans_star, makeInfo lexArg (identleft, tuple_tyright)) :: tuple_ty 
)
end)
 in ( LrTable.NT 47, ( result, ident1left, tuple_ty1right), rest671)

end
|  ( 150, ( ( _, ( MlyValue.longorshortid longorshortid1, _, (
longorshortidright as longorshortid1right))) :: ( _, ( 
MlyValue.ty_sans_star ty_sans_star1, (ty_sans_starleft as 
ty_sans_star1left), _)) :: rest671)) => let val  result = 
MlyValue.ty_sans_star (fn _ => let val  (ty_sans_star as ty_sans_star1
) = ty_sans_star1 ()
 val  (longorshortid as longorshortid1) = longorshortid1 ()
 in (
 Absyn.CONSty([ty_sans_star], longorshortid,
			makeInfo lexArg (ty_sans_starleft, longorshortidright)) 
)
end)
 in ( LrTable.NT 48, ( result, ty_sans_star1left, longorshortid1right)
, rest671)
end
|  ( 151, ( ( _, ( MlyValue.longorshortid longorshortid1, _, (
longorshortidright as longorshortid1right))) :: _ :: ( _, ( 
MlyValue.ty_comma_seq2 ty_comma_seq21, _, _)) :: ( _, ( _, (LPARENleft
 as LPAREN1left), _)) :: rest671)) => let val  result = 
MlyValue.ty_sans_star (fn _ => let val  (ty_comma_seq2 as 
ty_comma_seq21) = ty_comma_seq21 ()
 val  (longorshortid as longorshortid1) = longorshortid1 ()
 in (
 Absyn.CONSty(ty_comma_seq2, longorshortid,
			makeInfo lexArg (LPARENleft, longorshortidright)) 
)
end)
 in ( LrTable.NT 48, ( result, LPAREN1left, longorshortid1right), 
rest671)
end
|  ( 152, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ty ty1, _,
 _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.ty_sans_star (fn _ => let val  (ty as ty1) = ty1 ()
 in ( ty )
end)
 in ( LrTable.NT 48, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 153, ( ( _, ( MlyValue.tyvar tyvar1, (tyvarleft as tyvar1left), (
tyvarright as tyvar1right))) :: rest671)) => let val  result = 
MlyValue.ty_sans_star (fn _ => let val  (tyvar as tyvar1) = tyvar1 ()
 in ( Absyn.VARty(tyvar, makeInfo lexArg (tyvarleft, tyvarright)) )

end)
 in ( LrTable.NT 48, ( result, tyvar1left, tyvar1right), rest671)
end
|  ( 154, ( ( _, ( MlyValue.longorshortid longorshortid1, (
longorshortidleft as longorshortid1left), (longorshortidright as 
longorshortid1right))) :: rest671)) => let val  result = 
MlyValue.ty_sans_star (fn _ => let val  (longorshortid as 
longorshortid1) = longorshortid1 ()
 in (
 Absyn.CONSty([], longorshortid,
			makeInfo lexArg (longorshortidleft, longorshortidright)) 
)
end)
 in ( LrTable.NT 48, ( result, longorshortid1left, longorshortid1right
), rest671)
end
|  ( 155, ( ( _, ( MlyValue.ty_comma_seq2 ty_comma_seq21, _, 
ty_comma_seq21right)) :: _ :: ( _, ( MlyValue.ty ty1, ty1left, _)) :: 
rest671)) => let val  result = MlyValue.ty_comma_seq2 (fn _ => let
 val  (ty as ty1) = ty1 ()
 val  (ty_comma_seq2 as ty_comma_seq21) = ty_comma_seq21 ()
 in ( ty :: ty_comma_seq2 )
end)
 in ( LrTable.NT 49, ( result, ty1left, ty_comma_seq21right), rest671)

end
|  ( 156, ( ( _, ( MlyValue.ty ty2, _, ty2right)) :: _ :: ( _, ( 
MlyValue.ty ty1, ty1left, _)) :: rest671)) => let val  result = 
MlyValue.ty_comma_seq2 (fn _ => let val  ty1 = ty1 ()
 val  ty2 = ty2 ()
 in ( [ty1, ty2] )
end)
 in ( LrTable.NT 49, ( result, ty1left, ty2right), rest671)
end
|  ( 157, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _))
 :: rest671)) => let val  result = MlyValue.seq_ty (fn _ => ( [] ))
 in ( LrTable.NT 50, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 158, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( 
MlyValue.ty_comma_seq2 ty_comma_seq21, _, _)) :: ( _, ( _, LPAREN1left
, _)) :: rest671)) => let val  result = MlyValue.seq_ty (fn _ => let
 val  (ty_comma_seq2 as ty_comma_seq21) = ty_comma_seq21 ()
 in ( ty_comma_seq2 )
end)
 in ( LrTable.NT 50, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 159, ( ( _, ( MlyValue.tuple_ty tuple_ty1, (tuple_tyleft as 
tuple_ty1left), (tuple_tyright as tuple_ty1right))) :: rest671)) =>
 let val  result = MlyValue.seq_ty (fn _ => let val  (tuple_ty as 
tuple_ty1) = tuple_ty1 ()
 in (
 [mktuplety(
			tuple_ty,
			makeInfo lexArg (tuple_tyleft, tuple_tyright))] 
)
end)
 in ( LrTable.NT 50, ( result, tuple_ty1left, tuple_ty1right), rest671
)
end
|  ( 160, ( rest671)) => let val  result = MlyValue.tyvarseq (fn _ =>
 ( [] ))
 in ( LrTable.NT 51, ( result, defaultPos, defaultPos), rest671)
end
|  ( 161, ( ( _, ( MlyValue.tyvar tyvar1, tyvar1left, tyvar1right)) ::
 rest671)) => let val  result = MlyValue.tyvarseq (fn _ => let val  (
tyvar as tyvar1) = tyvar1 ()
 in ( [tyvar] )
end)
 in ( LrTable.NT 51, ( result, tyvar1left, tyvar1right), rest671)
end
|  ( 162, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( 
MlyValue.tyvar_comma_plus tyvar_comma_plus1, _, _)) :: ( _, ( _, 
LPAREN1left, _)) :: rest671)) => let val  result = MlyValue.tyvarseq
 (fn _ => let val  (tyvar_comma_plus as tyvar_comma_plus1) = 
tyvar_comma_plus1 ()
 in ( tyvar_comma_plus )
end)
 in ( LrTable.NT 51, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 163, ( ( _, ( MlyValue.tyvar_comma_plus tyvar_comma_plus1, _, 
tyvar_comma_plus1right)) :: _ :: ( _, ( MlyValue.tyvar tyvar1, 
tyvar1left, _)) :: rest671)) => let val  result = 
MlyValue.tyvar_comma_plus (fn _ => let val  (tyvar as tyvar1) = tyvar1
 ()
 val  (tyvar_comma_plus as tyvar_comma_plus1) = tyvar_comma_plus1 ()
 in ( tyvar :: tyvar_comma_plus )
end)
 in ( LrTable.NT 52, ( result, tyvar1left, tyvar_comma_plus1right), 
rest671)
end
|  ( 164, ( ( _, ( MlyValue.tyvar tyvar1, tyvar1left, tyvar1right)) ::
 rest671)) => let val  result = MlyValue.tyvar_comma_plus (fn _ => let
 val  (tyvar as tyvar1) = tyvar1 ()
 in ( [tyvar] )
end)
 in ( LrTable.NT 52, ( result, tyvar1left, tyvar1right), rest671)
end
|  ( 165, ( ( _, ( MlyValue.ident ident2, _, ident2right)) :: _ :: ( _
, ( MlyValue.ident ident1, ident1left, _)) :: rest671)) => let val  
result = MlyValue.longid (fn _ => let val  ident1 = ident1 ()
 val  ident2 = ident2 ()
 in (
 
		LexArg.addExternal(
			lexArg, 
			(Absyn.identName ident1)^"."^(Absyn.identName ident2), 
			ident1left,ident2right);
	
		Absyn.LONGID(SOME ident1, ident2,
			makeInfo lexArg (ident1left, ident2right)) 
	
)
end)
 in ( LrTable.NT 53, ( result, ident1left, ident2right), rest671)
end
|  ( 166, ( ( _, ( MlyValue.longid longid1, longid1left, longid1right)
) :: rest671)) => let val  result = MlyValue.longorshortid (fn _ =>
 let val  (longid as longid1) = longid1 ()
 in ( longid )
end)
 in ( LrTable.NT 54, ( result, longid1left, longid1right), rest671)

end
|  ( 167, ( ( _, ( MlyValue.ident ident1, (identleft as ident1left), (
identright as ident1right))) :: rest671)) => let val  result = 
MlyValue.longorshortid (fn _ => let val  (ident as ident1) = ident1 ()
 in (
 Absyn.LONGID(NONE, ident, 
			makeInfo lexArg (identleft, identright)) 
)
end)
 in ( LrTable.NT 54, ( result, ident1left, ident1right), rest671)
end
|  ( 168, ( ( _, ( MlyValue.IDENT IDENT1, (IDENTleft as IDENT1left), (
IDENTright as IDENT1right))) :: rest671)) => let val  result = 
MlyValue.ident (fn _ => let val  (IDENT as IDENT1) = IDENT1 ()
 in (
 Absyn.makeIdent(IDENT, 
			makeInfo lexArg (IDENTleft, IDENTright)) )

end)
 in ( LrTable.NT 55, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 169, ( ( _, ( MlyValue.TYVAR TYVAR1, (TYVARleft as TYVAR1left), (
TYVARright as TYVAR1right))) :: rest671)) => let val  result = 
MlyValue.tyvar (fn _ => let val  (TYVAR as TYVAR1) = TYVAR1 ()
 in (
 Absyn.makeIdent(TYVAR, 
			makeInfo lexArg (TYVARleft, TYVARright)) )

end)
 in ( LrTable.NT 56, ( result, TYVAR1left, TYVAR1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.module x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : RML_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun AMPERSAND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun AS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun AXIOM (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun BAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun CCON (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.CCON (fn () => i),p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun COLONCOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun DASHES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun DATATYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun DEFAULT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF_HARD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF_SOFT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun EQTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun FAIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun FATARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun ICON (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.ICON (fn () => i),p1,p2))
fun IDENT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.IDENT (fn () => i),p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun MODULE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun NOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun RCON (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.RCON (fn () => i),p1,p2))
fun RELATION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun RULE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun SCON (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.SCON (fn () => i),p1,p2))
fun STAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun START_MODULE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun START_INTERFACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun TYVAR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.TYVAR (fn () => i),p1,p2))
fun VAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun WILD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun WITH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun WITHTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun ADD_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun SUB_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun NEG_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun DIV_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun MOD_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun EQEQ_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun GE_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun GT_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun LE_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun LT_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun NE_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun ADD_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
fun SUB_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.VOID,p1,p2))
fun NEG_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.VOID,p1,p2))
fun MUL_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.VOID,p1,p2))
fun DIV_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.VOID,p1,p2))
fun MOD_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.VOID,p1,p2))
fun POW_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 60,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(
ParserData.MlyValue.VOID,p1,p2))
fun GE_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(
ParserData.MlyValue.VOID,p1,p2))
fun GT_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(
ParserData.MlyValue.VOID,p1,p2))
fun LE_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 64,(
ParserData.MlyValue.VOID,p1,p2))
fun LT_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(
ParserData.MlyValue.VOID,p1,p2))
fun NE_REAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(
ParserData.MlyValue.VOID,p1,p2))
fun ADD_STRING (p1,p2) = Token.TOKEN (ParserData.LrTable.T 67,(
ParserData.MlyValue.VOID,p1,p2))
fun EQEQ_STRING (p1,p2) = Token.TOKEN (ParserData.LrTable.T 68,(
ParserData.MlyValue.VOID,p1,p2))
fun ADD_LIST (p1,p2) = Token.TOKEN (ParserData.LrTable.T 69,(
ParserData.MlyValue.VOID,p1,p2))
fun UNARY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 70,(
ParserData.MlyValue.VOID,p1,p2))
end
end
