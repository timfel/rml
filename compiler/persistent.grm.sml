
functor PERSISTENTLrValsFn(structure Token : TOKEN
			     structure Absyn : ABSYN
			     structure Cache : CACHE
			     structure LexArgSimple : LEXARG_SIMPLE where type poz = Cache.poz
			     sharing type Cache.restriction = LexArgSimple.restriction
			     sharing type Cache.visibility = LexArgSimple.visibility
			     ) : PERSISTENT_LRVALS = 
struct
structure ParserData=
struct
structure Header = 
struct
(* parser/rml.grm -- ML-Yacc grammar for the .mo persistency layer *)

 

end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\001\007\000\255\000\010\000\254\000\014\000\253\000\000\000\
\\001\000\003\000\115\002\011\000\115\002\000\000\
\\001\000\003\000\116\002\011\000\116\002\000\000\
\\001\000\003\000\117\002\011\000\117\002\000\000\
\\001\000\003\000\118\002\011\000\118\002\000\000\
\\001\000\003\000\119\002\011\000\119\002\000\000\
\\001\000\003\000\120\002\011\000\120\002\000\000\
\\001\000\003\000\124\002\011\000\124\002\000\000\
\\001\000\003\000\125\002\011\000\125\002\000\000\
\\001\000\003\000\126\002\011\000\126\002\000\000\
\\001\000\003\000\127\002\011\000\127\002\000\000\
\\001\000\003\000\128\002\011\000\128\002\000\000\
\\001\000\003\000\132\002\004\000\132\002\000\000\
\\001\000\003\000\138\002\004\000\138\002\000\000\
\\001\000\003\000\145\002\004\000\145\002\000\000\
\\001\000\003\000\146\002\004\000\146\002\000\000\
\\001\000\003\000\153\002\004\000\153\002\000\000\
\\001\000\003\000\154\002\004\000\154\002\000\000\
\\001\000\003\000\155\002\004\000\155\002\000\000\
\\001\000\003\000\156\002\004\000\156\002\000\000\
\\001\000\003\000\169\002\004\000\169\002\011\000\169\002\000\000\
\\001\000\003\000\170\002\004\000\170\002\011\000\170\002\000\000\
\\001\000\003\000\171\002\004\000\171\002\011\000\171\002\000\000\
\\001\000\003\000\172\002\004\000\172\002\011\000\172\002\000\000\
\\001\000\003\000\173\002\004\000\173\002\011\000\173\002\000\000\
\\001\000\003\000\177\002\004\000\177\002\011\000\177\002\000\000\
\\001\000\003\000\178\002\004\000\178\002\011\000\178\002\000\000\
\\001\000\003\000\179\002\004\000\179\002\011\000\179\002\000\000\
\\001\000\003\000\180\002\004\000\180\002\011\000\180\002\000\000\
\\001\000\003\000\181\002\004\000\181\002\011\000\181\002\000\000\
\\001\000\003\000\182\002\004\000\182\002\011\000\182\002\000\000\
\\001\000\003\000\183\002\004\000\183\002\011\000\183\002\000\000\
\\001\000\003\000\184\002\004\000\184\002\011\000\184\002\000\000\
\\001\000\003\000\192\002\004\000\192\002\011\000\192\002\000\000\
\\001\000\003\000\193\002\004\000\193\002\011\000\193\002\000\000\
\\001\000\003\000\194\002\004\000\194\002\011\000\194\002\000\000\
\\001\000\003\000\195\002\004\000\195\002\011\000\195\002\000\000\
\\001\000\003\000\196\002\004\000\196\002\011\000\196\002\000\000\
\\001\000\003\000\207\002\004\000\207\002\000\000\
\\001\000\003\000\044\000\000\000\
\\001\000\003\000\066\000\000\000\
\\001\000\003\000\067\000\011\000\113\002\000\000\
\\001\000\003\000\076\000\011\000\122\002\000\000\
\\001\000\003\000\107\000\000\000\
\\001\000\003\000\112\000\004\000\143\002\000\000\
\\001\000\003\000\115\000\004\000\136\002\000\000\
\\001\000\003\000\121\000\004\000\130\002\000\000\
\\001\000\003\000\124\000\004\000\140\002\000\000\
\\001\000\003\000\162\000\000\000\
\\001\000\003\000\174\000\004\000\201\002\000\000\
\\001\000\003\000\226\000\000\000\
\\001\000\003\000\007\001\004\000\198\002\011\000\198\002\000\000\
\\001\000\003\000\050\001\004\000\148\002\000\000\
\\001\000\003\000\073\001\004\000\151\002\000\000\
\\001\000\003\000\110\001\011\000\106\002\000\000\
\\001\000\003\000\127\001\004\000\175\002\000\000\
\\001\000\003\000\235\001\004\000\186\002\011\000\186\002\000\000\
\\001\000\004\000\108\002\000\000\
\\001\000\004\000\109\002\000\000\
\\001\000\004\000\110\002\011\000\110\002\000\000\
\\001\000\004\000\111\002\011\000\111\002\000\000\
\\001\000\004\000\129\002\050\000\100\000\000\000\
\\001\000\004\000\131\002\000\000\
\\001\000\004\000\133\002\000\000\
\\001\000\004\000\134\002\000\000\
\\001\000\004\000\135\002\049\000\093\000\000\000\
\\001\000\004\000\137\002\000\000\
\\001\000\004\000\139\002\048\000\104\000\000\000\
\\001\000\004\000\141\002\000\000\
\\001\000\004\000\142\002\048\000\090\000\000\000\
\\001\000\004\000\144\002\000\000\
\\001\000\004\000\147\002\046\000\015\001\047\000\014\001\000\000\
\\001\000\004\000\149\002\000\000\
\\001\000\004\000\150\002\046\000\040\001\047\000\039\001\000\000\
\\001\000\004\000\152\002\000\000\
\\001\000\004\000\157\002\000\000\
\\001\000\004\000\158\002\000\000\
\\001\000\004\000\159\002\000\000\
\\001\000\004\000\160\002\000\000\
\\001\000\004\000\161\002\000\000\
\\001\000\004\000\162\002\000\000\
\\001\000\004\000\163\002\011\000\163\002\000\000\
\\001\000\004\000\164\002\011\000\164\002\000\000\
\\001\000\004\000\165\002\011\000\165\002\000\000\
\\001\000\004\000\166\002\011\000\166\002\000\000\
\\001\000\004\000\167\002\011\000\167\002\000\000\
\\001\000\004\000\168\002\011\000\168\002\000\000\
\\001\000\004\000\174\002\032\000\156\000\033\000\155\000\035\000\154\000\
\\036\000\153\000\000\000\
\\001\000\004\000\176\002\000\000\
\\001\000\004\000\185\002\011\000\185\002\025\000\189\001\026\000\188\001\
\\027\000\187\001\028\000\186\001\029\000\185\001\030\000\184\001\
\\031\000\183\001\000\000\
\\001\000\004\000\185\002\025\000\189\001\026\000\188\001\027\000\187\001\
\\028\000\186\001\029\000\185\001\030\000\184\001\031\000\183\001\000\000\
\\001\000\004\000\187\002\011\000\187\002\000\000\
\\001\000\004\000\188\002\000\000\
\\001\000\004\000\189\002\000\000\
\\001\000\004\000\190\002\000\000\
\\001\000\004\000\191\002\000\000\
\\001\000\004\000\197\002\011\000\197\002\018\000\137\000\019\000\136\000\
\\020\000\135\000\021\000\134\000\022\000\133\000\000\000\
\\001\000\004\000\197\002\018\000\137\000\019\000\136\000\020\000\135\000\
\\021\000\134\000\022\000\133\000\000\000\
\\001\000\004\000\199\002\011\000\199\002\000\000\
\\001\000\004\000\200\002\016\000\143\000\000\000\
\\001\000\004\000\202\002\000\000\
\\001\000\004\000\203\002\011\000\203\002\000\000\
\\001\000\004\000\204\002\011\000\204\002\000\000\
\\001\000\004\000\205\002\011\000\205\002\000\000\
\\001\000\004\000\206\002\011\000\206\002\000\000\
\\001\000\004\000\021\000\000\000\
\\001\000\004\000\023\000\000\000\
\\001\000\004\000\026\000\000\000\
\\001\000\004\000\032\000\000\000\
\\001\000\004\000\037\000\000\000\
\\001\000\004\000\058\000\000\000\
\\001\000\004\000\085\000\000\000\
\\001\000\004\000\110\000\000\000\
\\001\000\004\000\111\000\000\000\
\\001\000\004\000\113\000\000\000\
\\001\000\004\000\116\000\000\000\
\\001\000\004\000\118\000\000\000\
\\001\000\004\000\119\000\000\000\
\\001\000\004\000\120\000\000\000\
\\001\000\004\000\123\000\000\000\
\\001\000\004\000\125\000\000\000\
\\001\000\004\000\127\000\000\000\
\\001\000\004\000\128\000\000\000\
\\001\000\004\000\130\000\000\000\
\\001\000\004\000\166\000\000\000\
\\001\000\004\000\172\000\000\000\
\\001\000\004\000\173\000\000\000\
\\001\000\004\000\175\000\000\000\
\\001\000\004\000\178\000\000\000\
\\001\000\004\000\179\000\000\000\
\\001\000\004\000\182\000\000\000\
\\001\000\004\000\183\000\000\000\
\\001\000\004\000\188\000\000\000\
\\001\000\004\000\189\000\000\000\
\\001\000\004\000\195\000\000\000\
\\001\000\004\000\231\000\000\000\
\\001\000\004\000\234\000\000\000\
\\001\000\004\000\237\000\000\000\
\\001\000\004\000\238\000\000\000\
\\001\000\004\000\239\000\000\000\
\\001\000\004\000\240\000\000\000\
\\001\000\004\000\242\000\000\000\
\\001\000\004\000\246\000\000\000\
\\001\000\004\000\250\000\000\000\
\\001\000\004\000\252\000\000\000\
\\001\000\004\000\002\001\000\000\
\\001\000\004\000\005\001\000\000\
\\001\000\004\000\019\001\000\000\
\\001\000\004\000\033\001\000\000\
\\001\000\004\000\034\001\000\000\
\\001\000\004\000\035\001\000\000\
\\001\000\004\000\036\001\000\000\
\\001\000\004\000\041\001\000\000\
\\001\000\004\000\044\001\000\000\
\\001\000\004\000\046\001\000\000\
\\001\000\004\000\047\001\000\000\
\\001\000\004\000\048\001\000\000\
\\001\000\004\000\051\001\000\000\
\\001\000\004\000\055\001\000\000\
\\001\000\004\000\058\001\000\000\
\\001\000\004\000\065\001\000\000\
\\001\000\004\000\074\001\000\000\
\\001\000\004\000\099\001\000\000\
\\001\000\004\000\114\001\000\000\
\\001\000\004\000\116\001\000\000\
\\001\000\004\000\117\001\000\000\
\\001\000\004\000\120\001\000\000\
\\001\000\004\000\124\001\000\000\
\\001\000\004\000\126\001\000\000\
\\001\000\004\000\130\001\000\000\
\\001\000\004\000\131\001\000\000\
\\001\000\004\000\132\001\000\000\
\\001\000\004\000\146\001\000\000\
\\001\000\004\000\148\001\000\000\
\\001\000\004\000\151\001\000\000\
\\001\000\004\000\155\001\000\000\
\\001\000\004\000\157\001\000\000\
\\001\000\004\000\159\001\000\000\
\\001\000\004\000\160\001\000\000\
\\001\000\004\000\168\001\000\000\
\\001\000\004\000\172\001\000\000\
\\001\000\004\000\179\001\000\000\
\\001\000\004\000\194\001\000\000\
\\001\000\004\000\200\001\000\000\
\\001\000\004\000\202\001\000\000\
\\001\000\004\000\203\001\000\000\
\\001\000\004\000\204\001\000\000\
\\001\000\004\000\212\001\000\000\
\\001\000\004\000\213\001\000\000\
\\001\000\004\000\219\001\000\000\
\\001\000\004\000\234\001\000\000\
\\001\000\004\000\237\001\000\000\
\\001\000\004\000\239\001\000\000\
\\001\000\004\000\240\001\000\000\
\\001\000\004\000\241\001\000\000\
\\001\000\004\000\242\001\000\000\
\\001\000\004\000\245\001\000\000\
\\001\000\004\000\246\001\000\000\
\\001\000\004\000\248\001\000\000\
\\001\000\004\000\249\001\000\000\
\\001\000\004\000\254\001\000\000\
\\001\000\004\000\010\002\000\000\
\\001\000\004\000\016\002\000\000\
\\001\000\004\000\018\002\000\000\
\\001\000\004\000\019\002\000\000\
\\001\000\004\000\024\002\000\000\
\\001\000\004\000\028\002\000\000\
\\001\000\004\000\035\002\000\000\
\\001\000\004\000\039\002\000\000\
\\001\000\004\000\046\002\000\000\
\\001\000\004\000\054\002\000\000\
\\001\000\004\000\056\002\000\000\
\\001\000\004\000\067\002\000\000\
\\001\000\004\000\069\002\000\000\
\\001\000\004\000\074\002\000\000\
\\001\000\004\000\076\002\000\000\
\\001\000\004\000\078\002\000\000\
\\001\000\004\000\086\002\000\000\
\\001\000\004\000\092\002\000\000\
\\001\000\005\000\000\000\006\000\000\000\065\000\000\000\067\000\000\000\000\000\
\\001\000\005\000\097\002\006\000\097\002\065\000\097\002\067\000\097\002\000\000\
\\001\000\005\000\098\002\006\000\098\002\065\000\098\002\067\000\098\002\000\000\
\\001\000\005\000\099\002\006\000\099\002\065\000\099\002\067\000\099\002\000\000\
\\001\000\005\000\100\002\006\000\100\002\065\000\100\002\067\000\100\002\000\000\
\\001\000\005\000\102\002\006\000\102\002\065\000\102\002\067\000\102\002\000\000\
\\001\000\006\000\101\002\000\000\
\\001\000\006\000\103\002\000\000\
\\001\000\006\000\015\000\000\000\
\\001\000\007\000\036\000\013\000\035\000\000\000\
\\001\000\007\000\040\000\000\000\
\\001\000\007\000\049\000\000\000\
\\001\000\007\000\083\000\000\000\
\\001\000\007\000\094\000\000\000\
\\001\000\007\000\129\000\000\000\
\\001\000\007\000\192\000\000\000\
\\001\000\007\000\004\001\000\000\
\\001\000\007\000\079\001\000\000\
\\001\000\007\000\154\001\000\000\
\\001\000\008\000\046\000\000\000\
\\001\000\009\000\012\000\000\000\
\\001\000\009\000\016\000\000\000\
\\001\000\009\000\018\000\000\000\
\\001\000\009\000\024\000\000\000\
\\001\000\009\000\039\000\000\000\
\\001\000\009\000\045\000\000\000\
\\001\000\009\000\048\000\000\000\
\\001\000\009\000\069\000\000\000\
\\001\000\009\000\070\000\000\000\
\\001\000\009\000\071\000\000\000\
\\001\000\009\000\072\000\000\000\
\\001\000\009\000\073\000\000\000\
\\001\000\009\000\074\000\000\000\
\\001\000\009\000\078\000\000\000\
\\001\000\009\000\079\000\000\000\
\\001\000\009\000\080\000\000\000\
\\001\000\009\000\081\000\000\000\
\\001\000\009\000\082\000\000\000\
\\001\000\009\000\114\000\000\000\
\\001\000\009\000\117\000\000\000\
\\001\000\009\000\122\000\000\000\
\\001\000\009\000\126\000\000\000\
\\001\000\009\000\131\000\000\000\
\\001\000\009\000\167\000\000\000\
\\001\000\009\000\168\000\000\000\
\\001\000\009\000\169\000\000\000\
\\001\000\009\000\170\000\000\000\
\\001\000\009\000\171\000\000\000\
\\001\000\009\000\176\000\000\000\
\\001\000\009\000\180\000\000\000\
\\001\000\009\000\184\000\000\000\
\\001\000\009\000\185\000\000\000\
\\001\000\009\000\186\000\000\000\
\\001\000\009\000\187\000\000\000\
\\001\000\009\000\191\000\000\000\
\\001\000\009\000\197\000\000\000\
\\001\000\009\000\199\000\000\000\
\\001\000\009\000\200\000\000\000\
\\001\000\009\000\222\000\000\000\
\\001\000\009\000\243\000\000\000\
\\001\000\009\000\244\000\000\000\
\\001\000\009\000\247\000\000\000\
\\001\000\009\000\248\000\000\000\
\\001\000\009\000\249\000\000\000\
\\001\000\009\000\251\000\000\000\
\\001\000\009\000\043\001\000\000\
\\001\000\009\000\052\001\000\000\
\\001\000\009\000\053\001\000\000\
\\001\000\009\000\059\001\000\000\
\\001\000\009\000\060\001\000\000\
\\001\000\009\000\062\001\000\000\
\\001\000\009\000\063\001\000\000\
\\001\000\009\000\064\001\000\000\
\\001\000\009\000\075\001\000\000\
\\001\000\009\000\076\001\000\000\
\\001\000\009\000\082\001\000\000\
\\001\000\009\000\121\001\000\000\
\\001\000\009\000\122\001\000\000\
\\001\000\009\000\162\001\000\000\
\\001\000\009\000\163\001\000\000\
\\001\000\009\000\164\001\000\000\
\\001\000\009\000\165\001\000\000\
\\001\000\009\000\166\001\000\000\
\\001\000\009\000\205\001\000\000\
\\001\000\009\000\206\001\000\000\
\\001\000\009\000\207\001\000\000\
\\001\000\009\000\208\001\000\000\
\\001\000\009\000\209\001\000\000\
\\001\000\009\000\210\001\000\000\
\\001\000\009\000\211\001\000\000\
\\001\000\009\000\243\001\000\000\
\\001\000\009\000\244\001\000\000\
\\001\000\009\000\011\002\000\000\
\\001\000\009\000\012\002\000\000\
\\001\000\009\000\015\002\000\000\
\\001\000\009\000\017\002\000\000\
\\001\000\009\000\037\002\000\000\
\\001\000\009\000\041\002\000\000\
\\001\000\009\000\042\002\000\000\
\\001\000\009\000\048\002\000\000\
\\001\000\009\000\051\002\000\000\
\\001\000\009\000\064\002\000\000\
\\001\000\009\000\073\002\000\000\
\\001\000\011\000\104\002\000\000\
\\001\000\011\000\105\002\000\000\
\\001\000\011\000\107\002\000\000\
\\001\000\011\000\112\002\051\000\057\000\053\000\056\000\054\000\055\000\
\\055\000\054\000\056\000\053\000\057\000\052\000\000\000\
\\001\000\011\000\114\002\000\000\
\\001\000\011\000\121\002\058\000\065\000\059\000\064\000\060\000\063\000\
\\061\000\062\000\062\000\061\000\000\000\
\\001\000\011\000\123\002\000\000\
\\001\000\011\000\185\002\025\000\189\001\026\000\188\001\027\000\187\001\
\\028\000\186\001\029\000\185\001\030\000\184\001\031\000\183\001\000\000\
\\001\000\011\000\197\002\018\000\137\000\019\000\136\000\020\000\135\000\
\\021\000\134\000\022\000\133\000\000\000\
\\001\000\011\000\034\000\000\000\
\\001\000\011\000\038\000\000\000\
\\001\000\011\000\041\000\000\000\
\\001\000\011\000\047\000\000\000\
\\001\000\011\000\068\000\000\000\
\\001\000\011\000\077\000\000\000\
\\001\000\011\000\096\000\000\000\
\\001\000\011\000\177\000\000\000\
\\001\000\011\000\181\000\000\000\
\\001\000\011\000\190\000\000\000\
\\001\000\011\000\193\000\000\000\
\\001\000\011\000\194\000\000\000\
\\001\000\011\000\228\000\000\000\
\\001\000\011\000\235\000\000\000\
\\001\000\011\000\236\000\000\000\
\\001\000\011\000\241\000\000\000\
\\001\000\011\000\245\000\000\000\
\\001\000\011\000\001\001\000\000\
\\001\000\011\000\003\001\000\000\
\\001\000\011\000\006\001\000\000\
\\001\000\011\000\009\001\000\000\
\\001\000\011\000\010\001\000\000\
\\001\000\011\000\024\001\000\000\
\\001\000\011\000\029\001\000\000\
\\001\000\011\000\049\001\000\000\
\\001\000\011\000\054\001\000\000\
\\001\000\011\000\056\001\000\000\
\\001\000\011\000\061\001\000\000\
\\001\000\011\000\066\001\000\000\
\\001\000\011\000\067\001\000\000\
\\001\000\011\000\068\001\000\000\
\\001\000\011\000\089\001\000\000\
\\001\000\011\000\095\001\000\000\
\\001\000\011\000\100\001\000\000\
\\001\000\011\000\101\001\000\000\
\\001\000\011\000\102\001\000\000\
\\001\000\011\000\103\001\000\000\
\\001\000\011\000\108\001\000\000\
\\001\000\011\000\109\001\000\000\
\\001\000\011\000\111\001\000\000\
\\001\000\011\000\112\001\000\000\
\\001\000\011\000\115\001\000\000\
\\001\000\011\000\118\001\000\000\
\\001\000\011\000\119\001\000\000\
\\001\000\011\000\123\001\000\000\
\\001\000\011\000\125\001\000\000\
\\001\000\011\000\129\001\000\000\
\\001\000\011\000\134\001\000\000\
\\001\000\011\000\139\001\000\000\
\\001\000\011\000\156\001\000\000\
\\001\000\011\000\158\001\000\000\
\\001\000\011\000\161\001\000\000\
\\001\000\011\000\170\001\000\000\
\\001\000\011\000\173\001\000\000\
\\001\000\011\000\174\001\000\000\
\\001\000\011\000\192\001\000\000\
\\001\000\011\000\195\001\000\000\
\\001\000\011\000\197\001\000\000\
\\001\000\011\000\198\001\000\000\
\\001\000\011\000\199\001\000\000\
\\001\000\011\000\214\001\000\000\
\\001\000\011\000\216\001\000\000\
\\001\000\011\000\233\001\000\000\
\\001\000\011\000\238\001\000\000\
\\001\000\011\000\247\001\000\000\
\\001\000\011\000\004\002\000\000\
\\001\000\011\000\014\002\000\000\
\\001\000\011\000\020\002\000\000\
\\001\000\011\000\021\002\000\000\
\\001\000\011\000\022\002\000\000\
\\001\000\011\000\023\002\000\000\
\\001\000\011\000\038\002\000\000\
\\001\000\011\000\043\002\000\000\
\\001\000\011\000\044\002\000\000\
\\001\000\011\000\045\002\000\000\
\\001\000\011\000\052\002\000\000\
\\001\000\011\000\058\002\000\000\
\\001\000\011\000\059\002\000\000\
\\001\000\011\000\061\002\000\000\
\\001\000\011\000\062\002\000\000\
\\001\000\011\000\066\002\000\000\
\\001\000\011\000\068\002\000\000\
\\001\000\011\000\070\002\000\000\
\\001\000\011\000\071\002\000\000\
\\001\000\011\000\079\002\000\000\
\\001\000\011\000\082\002\000\000\
\\001\000\011\000\084\002\000\000\
\\001\000\011\000\087\002\000\000\
\\001\000\011\000\088\002\000\000\
\\001\000\011\000\089\002\000\000\
\\001\000\011\000\090\002\000\000\
\\001\000\011\000\093\002\000\000\
\\001\000\011\000\095\002\000\000\
\\001\000\012\000\028\000\000\000\
\\001\000\013\000\042\001\000\000\
\\001\000\014\000\017\000\000\000\
\\001\000\014\000\025\000\000\000\
\\001\000\014\000\095\000\000\000\
\\001\000\014\000\106\000\000\000\
\\001\000\014\000\165\000\068\000\164\000\000\000\
\\001\000\014\000\227\000\000\000\
\\001\000\015\000\206\000\000\000\
\\001\000\016\000\031\000\000\000\
\\001\000\016\000\031\000\069\000\030\000\000\000\
\\001\000\016\000\143\000\000\000\
\\001\000\017\000\216\000\000\000\
\\001\000\017\000\220\000\000\000\
\\001\000\018\000\137\000\019\000\136\000\020\000\135\000\021\000\134\000\
\\022\000\133\000\000\000\
\\001\000\023\000\212\000\024\000\211\000\000\000\
\\001\000\023\000\218\000\024\000\217\000\000\000\
\\001\000\023\000\028\001\000\000\
\\001\000\023\000\028\001\024\000\027\001\000\000\
\\001\000\023\000\093\001\024\000\092\001\000\000\
\\001\000\023\000\227\001\024\000\226\001\000\000\
\\001\000\023\000\030\002\024\000\029\002\000\000\
\\001\000\025\000\189\001\026\000\188\001\027\000\187\001\028\000\186\001\
\\029\000\185\001\030\000\184\001\031\000\183\001\000\000\
\\001\000\032\000\156\000\033\000\155\000\035\000\154\000\036\000\153\000\000\000\
\\001\000\037\000\145\001\038\000\144\001\039\000\143\001\040\000\142\001\
\\041\000\141\001\000\000\
\\001\000\042\000\252\001\043\000\251\001\000\000\
\\001\000\044\000\023\001\000\000\
\\001\000\044\000\023\001\045\000\022\001\000\000\
\\001\000\052\000\148\000\000\000\
\\001\000\052\000\161\000\000\000\
\\001\000\052\000\026\001\000\000\
\\001\000\052\000\000\002\000\000\
\\001\000\052\000\002\002\000\000\
\\001\000\052\000\025\002\000\000\
\\001\000\052\000\036\002\000\000\
\\001\000\052\000\040\002\000\000\
\\001\000\052\000\055\002\000\000\
\\001\000\052\000\065\002\000\000\
\\001\000\063\000\020\000\000\000\
\\001\000\064\000\109\000\000\000\
\\001\000\065\000\011\000\000\000\
\\001\000\065\000\014\000\000\000\
\\001\000\067\000\043\000\000\000\
\\001\000\070\000\007\000\000\000\
\\001\000\072\000\005\000\073\000\004\000\074\000\003\000\000\000\
\"
val actionRowNumbers =
"\212\001\211\001\211\001\211\001\
\\208\001\239\000\209\001\222\000\
\\227\000\240\000\170\001\221\000\
\\241\000\220\000\206\001\105\000\
\\206\001\106\000\242\000\171\001\
\\107\000\168\001\178\001\108\000\
\\168\001\075\001\228\000\109\000\
\\076\001\243\000\229\000\077\001\
\\210\001\067\001\039\000\244\000\
\\060\000\238\000\078\001\224\000\
\\225\000\245\000\230\000\069\001\
\\110\000\223\000\071\001\040\000\
\\041\000\079\001\246\000\247\000\
\\248\000\249\000\250\000\251\000\
\\168\001\042\000\080\001\252\000\
\\253\000\254\000\255\000\000\001\
\\231\000\069\001\111\000\177\001\
\\177\001\069\000\065\000\232\000\
\\172\001\081\001\071\001\226\000\
\\061\000\177\001\067\000\065\000\
\\173\001\043\000\070\001\207\001\
\\112\000\113\000\044\000\114\000\
\\001\001\045\000\115\000\002\001\
\\116\000\117\000\104\000\072\001\
\\118\000\046\000\003\001\119\000\
\\047\000\120\000\004\001\121\000\
\\122\000\233\000\123\000\005\001\
\\182\001\182\001\069\000\065\000\
\\099\000\065\000\168\001\099\000\
\\099\000\196\001\168\001\061\000\
\\177\001\191\001\067\000\065\000\
\\099\000\168\001\197\001\048\000\
\\168\001\174\001\124\000\006\001\
\\007\001\008\001\009\001\010\001\
\\125\000\070\000\126\000\049\000\
\\127\000\011\001\066\000\082\001\
\\128\000\129\000\012\001\083\001\
\\062\000\130\000\131\000\013\001\
\\014\001\015\001\016\001\068\000\
\\132\000\133\000\084\001\017\001\
\\234\000\085\001\086\001\134\000\
\\168\001\018\001\177\001\019\001\
\\020\001\179\001\168\001\168\001\
\\099\000\177\001\176\001\003\000\
\\177\001\177\001\206\001\011\000\
\\183\001\168\001\180\001\184\001\
\\181\001\021\001\168\001\177\001\
\\008\000\206\001\050\000\059\000\
\\058\000\175\001\087\001\074\001\
\\135\000\074\001\074\001\136\000\
\\088\001\089\001\100\000\137\000\
\\138\000\139\000\140\000\090\001\
\\141\000\022\001\023\001\091\001\
\\142\000\102\000\024\001\025\001\
\\026\001\143\000\027\001\144\000\
\\000\000\092\001\145\000\093\001\
\\235\000\146\000\006\000\094\001\
\\051\000\182\001\095\001\096\001\
\\168\001\005\000\004\000\071\000\
\\168\001\182\001\168\001\147\000\
\\195\001\097\001\182\001\010\000\
\\198\001\186\001\098\001\180\001\
\\168\001\185\001\168\001\148\000\
\\149\000\150\000\151\000\009\000\
\\073\000\152\000\169\001\028\001\
\\153\000\096\000\154\000\155\000\
\\156\000\099\001\052\000\157\000\
\\029\001\030\001\100\001\158\000\
\\101\001\168\001\075\000\159\000\
\\031\001\032\001\064\000\102\001\
\\033\001\034\001\035\001\160\000\
\\103\001\104\001\105\001\168\001\
\\168\001\168\001\168\001\053\000\
\\161\000\036\001\037\001\168\001\
\\066\001\236\000\168\001\098\000\
\\168\001\038\001\180\001\037\000\
\\071\000\168\001\177\001\177\001\
\\038\000\168\001\002\000\106\001\
\\168\001\194\001\187\001\063\000\
\\191\001\107\001\177\001\087\000\
\\162\000\023\000\022\000\108\001\
\\109\001\110\001\111\001\073\000\
\\168\001\177\001\177\001\112\001\
\\113\001\054\000\114\001\115\001\
\\074\001\163\000\072\000\116\001\
\\164\000\165\000\117\001\001\000\
\\118\001\166\000\039\001\040\001\
\\119\001\167\000\120\001\168\000\
\\055\000\087\000\095\000\094\000\
\\093\000\092\000\074\000\121\001\
\\169\000\170\000\007\000\171\000\
\\236\000\034\000\035\000\122\001\
\\168\001\014\000\097\000\168\001\
\\013\000\012\000\195\001\123\001\
\\192\001\172\000\177\001\173\000\
\\168\001\087\000\174\000\015\000\
\\097\000\168\001\237\000\068\001\
\\175\000\124\001\176\000\125\001\
\\177\000\178\000\126\001\041\001\
\\042\001\043\001\044\001\045\001\
\\168\001\179\000\177\001\127\001\
\\088\000\168\001\180\000\128\001\
\\129\001\168\001\036\000\168\001\
\\018\000\168\001\177\001\181\000\
\\192\001\192\001\190\001\177\001\
\\180\001\130\001\168\001\182\000\
\\021\000\131\001\168\001\016\000\
\\057\000\132\001\133\001\134\001\
\\183\000\177\001\184\000\185\000\
\\186\000\046\001\047\001\048\001\
\\049\001\050\001\051\001\052\001\
\\187\000\188\000\024\000\135\001\
\\168\001\020\000\136\001\033\000\
\\019\000\076\000\090\000\189\000\
\\192\001\168\001\191\001\177\001\
\\177\001\177\001\188\001\180\001\
\\021\001\168\001\191\001\087\000\
\\103\000\137\001\017\000\190\000\
\\056\000\090\000\191\000\138\001\
\\192\000\193\000\194\000\195\000\
\\053\001\054\001\196\000\197\000\
\\139\001\198\000\199\000\101\000\
\\193\001\089\000\200\000\168\001\
\\085\000\199\001\190\001\200\001\
\\190\001\140\001\180\001\168\001\
\\168\001\028\000\168\001\090\000\
\\201\000\055\001\056\001\091\000\
\\193\001\141\001\057\001\202\000\
\\058\001\203\000\204\000\142\001\
\\143\001\144\001\145\001\205\000\
\\201\001\168\001\087\000\206\000\
\\086\000\189\001\168\001\190\001\
\\168\001\090\000\207\000\030\000\
\\029\000\082\000\202\001\059\001\
\\146\001\208\000\203\001\060\001\
\\061\001\147\001\148\001\149\001\
\\209\000\090\000\062\001\073\001\
\\080\000\168\001\063\001\150\001\
\\190\001\032\000\210\000\025\000\
\\204\001\211\000\073\001\151\001\
\\152\001\073\001\153\001\154\001\
\\168\001\064\001\205\001\155\001\
\\212\000\079\000\156\001\213\000\
\\157\001\158\001\073\001\065\001\
\\214\000\168\001\215\000\168\001\
\\216\000\031\000\159\001\073\001\
\\168\001\160\001\168\001\161\001\
\\168\001\217\000\162\001\163\001\
\\078\000\164\001\084\000\165\001\
\\168\001\218\000\081\000\077\000\
\\083\000\166\001\168\001\027\000\
\\167\001\026\000\219\000"
val gotoT =
"\
\\001\000\094\002\000\000\
\\005\000\004\000\000\000\
\\005\000\006\000\000\000\
\\005\000\007\000\000\000\
\\003\000\008\000\000\000\
\\000\000\
\\002\000\011\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\017\000\000\000\
\\000\000\
\\006\000\020\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\025\000\000\000\
\\058\000\027\000\000\000\
\\000\000\
\\060\000\031\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\040\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\049\000\010\000\048\000\000\000\
\\000\000\
\\000\000\
\\011\000\058\000\012\000\057\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\073\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\082\000\010\000\048\000\000\000\
\\000\000\
\\058\000\084\000\000\000\
\\058\000\085\000\000\000\
\\022\000\087\000\023\000\086\000\000\000\
\\016\000\090\000\017\000\089\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\011\000\095\000\012\000\057\000\000\000\
\\000\000\
\\013\000\097\000\014\000\096\000\000\000\
\\058\000\099\000\000\000\
\\018\000\101\000\019\000\100\000\000\000\
\\016\000\103\000\017\000\089\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\106\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\130\000\000\000\
\\052\000\136\000\000\000\
\\022\000\137\000\023\000\086\000\000\000\
\\016\000\138\000\017\000\089\000\000\000\
\\054\000\140\000\059\000\139\000\000\000\
\\016\000\142\000\017\000\089\000\000\000\
\\060\000\143\000\000\000\
\\054\000\144\000\059\000\139\000\000\000\
\\054\000\145\000\059\000\139\000\000\000\
\\000\000\
\\060\000\147\000\000\000\
\\013\000\097\000\014\000\148\000\000\000\
\\058\000\149\000\000\000\
\\030\000\150\000\000\000\
\\018\000\155\000\019\000\100\000\000\000\
\\016\000\156\000\017\000\089\000\000\000\
\\054\000\157\000\059\000\139\000\000\000\
\\060\000\158\000\000\000\
\\000\000\
\\000\000\
\\060\000\161\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\194\000\000\000\
\\000\000\
\\058\000\196\000\000\000\
\\000\000\
\\000\000\
\\059\000\199\000\000\000\
\\060\000\200\000\000\000\
\\060\000\201\000\000\000\
\\054\000\202\000\059\000\139\000\000\000\
\\058\000\203\000\000\000\
\\000\000\
\\000\000\
\\058\000\205\000\000\000\
\\058\000\206\000\000\000\
\\006\000\207\000\000\000\
\\000\000\
\\015\000\208\000\000\000\
\\060\000\211\000\000\000\
\\056\000\213\000\057\000\212\000\000\000\
\\000\000\
\\056\000\217\000\000\000\
\\051\000\219\000\000\000\
\\060\000\221\000\000\000\
\\058\000\222\000\000\000\
\\000\000\
\\006\000\223\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\228\000\053\000\227\000\000\000\
\\000\000\
\\052\000\228\000\053\000\230\000\000\000\
\\052\000\228\000\053\000\231\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\006\001\000\000\
\\000\000\
\\000\000\
\\060\000\009\001\000\000\
\\000\000\
\\000\000\
\\024\000\011\001\025\000\010\001\000\000\
\\060\000\014\001\000\000\
\\052\000\015\001\000\000\
\\060\000\016\001\000\000\
\\000\000\
\\026\000\019\001\027\000\018\001\000\000\
\\000\000\
\\052\000\023\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\056\000\213\000\057\000\028\001\000\000\
\\060\000\029\001\000\000\
\\000\000\
\\060\000\030\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\020\000\036\001\021\000\035\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\228\000\053\000\043\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\055\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\067\001\000\000\
\\060\000\068\001\000\000\
\\060\000\069\001\000\000\
\\060\000\070\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\075\001\000\000\
\\000\000\
\\008\000\076\001\000\000\
\\060\000\078\001\000\000\
\\000\000\
\\060\000\079\001\000\000\
\\000\000\
\\056\000\213\000\057\000\081\001\000\000\
\\000\000\
\\024\000\082\001\025\000\010\001\000\000\
\\060\000\083\001\000\000\
\\058\000\084\001\000\000\
\\058\000\085\001\000\000\
\\000\000\
\\060\000\086\001\000\000\
\\000\000\
\\000\000\
\\060\000\088\001\000\000\
\\027\000\089\001\000\000\
\\000\000\
\\000\000\
\\030\000\092\001\000\000\
\\000\000\
\\058\000\094\001\000\000\
\\030\000\096\001\035\000\095\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\020\000\102\001\021\000\035\001\000\000\
\\060\000\103\001\000\000\
\\058\000\104\001\000\000\
\\058\000\105\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\228\000\053\000\111\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\030\000\096\001\035\000\126\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\131\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\133\001\000\000\
\\000\000\
\\052\000\228\000\053\000\134\001\000\000\
\\060\000\135\001\000\000\
\\000\000\
\\000\000\
\\026\000\136\001\027\000\018\001\000\000\
\\000\000\
\\029\000\138\001\000\000\
\\000\000\
\\058\000\145\001\000\000\
\\000\000\
\\060\000\147\001\000\000\
\\030\000\096\001\035\000\148\001\000\000\
\\000\000\
\\000\000\
\\052\000\228\000\053\000\150\001\000\000\
\\060\000\151\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\165\001\000\000\
\\000\000\
\\058\000\167\001\000\000\
\\000\000\
\\000\000\
\\060\000\169\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\173\001\000\000\
\\000\000\
\\060\000\174\001\000\000\
\\000\000\
\\060\000\175\001\000\000\
\\058\000\176\001\000\000\
\\000\000\
\\029\000\178\001\000\000\
\\029\000\179\001\000\000\
\\039\000\180\001\000\000\
\\058\000\188\001\000\000\
\\056\000\213\000\057\000\189\001\000\000\
\\000\000\
\\060\000\191\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\194\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\058\000\199\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\213\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\039\000\216\001\045\000\215\001\000\000\
\\000\000\
\\029\000\218\001\000\000\
\\060\000\219\001\000\000\
\\030\000\220\001\000\000\
\\058\000\221\001\000\000\
\\058\000\222\001\000\000\
\\058\000\223\001\000\000\
\\000\000\
\\056\000\213\000\057\000\226\001\000\000\
\\051\000\227\001\000\000\
\\060\000\228\001\000\000\
\\030\000\229\001\000\000\
\\030\000\096\001\035\000\230\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\039\000\216\001\045\000\234\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\028\000\248\001\000\000\
\\039\000\216\001\045\000\251\001\000\000\
\\000\000\
\\060\000\253\001\000\000\
\\000\000\
\\000\000\
\\039\000\255\001\000\000\
\\000\000\
\\039\000\001\002\000\000\
\\000\000\
\\056\000\213\000\057\000\003\002\000\000\
\\060\000\004\002\000\000\
\\060\000\005\002\000\000\
\\000\000\
\\060\000\006\002\000\000\
\\039\000\216\001\045\000\007\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\028\000\011\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\024\002\000\000\
\\030\000\096\001\035\000\025\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\029\002\000\000\
\\039\000\030\002\000\000\
\\060\000\031\002\000\000\
\\039\000\216\001\045\000\032\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\039\000\216\001\045\000\045\002\000\000\
\\000\000\
\\039\000\216\001\045\000\047\002\000\000\
\\000\000\
\\060\000\048\002\000\000\
\\000\000\
\\000\000\
\\039\000\051\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\039\000\216\001\045\000\055\002\000\000\
\\000\000\
\\000\000\
\\039\000\216\001\045\000\058\002\000\000\
\\000\000\
\\000\000\
\\060\000\061\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\039\000\216\001\045\000\070\002\000\000\
\\000\000\
\\000\000\
\\060\000\073\002\000\000\
\\000\000\
\\060\000\075\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\039\000\216\001\045\000\078\002\000\000\
\\060\000\079\002\000\000\
\\000\000\
\\060\000\081\002\000\000\
\\000\000\
\\060\000\083\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\089\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\092\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 607
val numrules = 111
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = LexArgSimple.pos
type arg = LexArgSimple.lexarg
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | TYVAR of unit ->  (string) | SCON of unit ->  (string)
 | RCON of unit ->  (real) | IDENT of unit ->  (string)
 | ICON of unit ->  (int) | CCON of unit ->  (char)
 | info of unit ->  (Absyn.info) | tyvar of unit ->  (Absyn.ident)
 | ident of unit ->  (Absyn.ident)
 | longorshortid of unit ->  (Absyn.longid)
 | longid of unit ->  (Absyn.longid)
 | tyvar_comma_plus of unit ->  (Absyn.ident list)
 | tyvarseq of unit ->  (Absyn.ident list)
 | ty_seq of unit ->  (Absyn.ty list) | ty of unit ->  (Absyn.ty)
 | literal of unit ->  (Absyn.lit)
 | pat_comma_plus_list of unit ->  (Absyn.pat list)
 | pat_comma_star_list of unit ->  (Absyn.pat list)
 | pat_comma_plus of unit ->  (Absyn.pat list)
 | pat_comma_star of unit ->  (Absyn.pat list)
 | pat_star of unit ->  (Absyn.pat list)
 | seq_pat of unit ->  (Absyn.pat list)
 | pat_e of unit ->  (Absyn.pat) | pat_d of unit ->  (Absyn.pat)
 | pat_c of unit ->  (Absyn.pat) | pat_b of unit ->  (Absyn.pat)
 | pat_a of unit ->  (Absyn.pat) | pat of unit ->  (Absyn.pat)
 | exp_comma_plus of unit ->  (Absyn.exp list)
 | exp_comma_star of unit ->  (Absyn.exp list)
 | exp_star of unit ->  (Absyn.exp list)
 | seq_exp of unit ->  (Absyn.exp list)
 | exp_d of unit ->  (Absyn.exp) | exp_c of unit ->  (Absyn.exp)
 | exp_b of unit ->  (Absyn.exp) | exp_a of unit ->  (Absyn.exp)
 | exp of unit ->  (Absyn.exp) | goal of unit ->  (Absyn.goal)
 | result of unit ->  (Absyn.result)
 | clause of unit ->  (Absyn.clause)
 | clause_plus of unit ->  (Absyn.clause)
 | conbind of unit ->  (Absyn.conbind)
 | conbind_plus of unit ->  (Absyn.conbind list)
 | datbind of unit ->  (Absyn.datbind)
 | datbind_plus of unit ->  (Absyn.datbind list)
 | conbind_protected of unit ->  (Absyn.conbind)
 | conbind_plus_protected of unit ->  (Absyn.conbind list)
 | datbind_protected of unit ->  (Absyn.datbind)
 | datbind_plus_protected of unit ->  (Absyn.datbind list)
 | typbind of unit ->  (Absyn.typbind)
 | typbind_plus of unit ->  (Absyn.typbind list)
 | relbind_ty_opt of unit ->  (Absyn.ty option)
 | relbind_plus of unit ->  (Absyn.relbind list)
 | relbind of unit ->  (Absyn.relbind) | dec of unit ->  (Absyn.dec)
 | dec_star of unit ->  (Absyn.dec list)
 | spec of unit ->  (Absyn.spec)
 | spec_star of unit ->  (Absyn.spec list)
 | lines of unit ->  (int list)
 | source of unit ->  (Absyn.Source.source)
 | interface of unit ->  (Absyn.interface)
 | serialization_info of unit ->  (Absyn.serializationInfo)
 | declarations of unit ->  (Absyn.dec list)
 | module_interface_and_declarations of unit ->  (Absyn.module option)
 | module_interface of unit ->  (Absyn.module option)
 | module of unit ->  (Absyn.serialized)
end
type svalue = MlyValue.svalue
type result = Absyn.serialized
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 7) => true | (T 15) => true | (T 16) => true | (T 17) => true | 
(T 18) => true | (T 20) => true | (T 19) => true | (T 21) => true | 
(T 22) => true | (T 23) => true | (T 24) => true | (T 25) => true | 
(T 26) => true | (T 27) => true | (T 28) => true | (T 29) => true | 
(T 30) => true | (T 31) => true | (T 32) => true | (T 33) => true | 
(T 34) => true | (T 35) => true | (T 36) => true | (T 37) => true | 
(T 38) => true | (T 39) => true | (T 40) => true | (T 41) => true | 
(T 42) => true | (T 43) => true | (T 44) => true | (T 45) => true | 
(T 46) => true | (T 47) => true | (T 48) => true | (T 49) => true | 
(T 50) => true | (T 51) => true | (T 52) => true | (T 53) => true | 
(T 54) => true | (T 55) => true | (T 56) => true | (T 57) => true | 
(T 58) => true | (T 59) => true | (T 60) => true | (T 61) => true | 
(T 62) => true | (T 63) => true | (T 64) => true | (T 65) => true | 
(T 66) => true | (T 67) => true | (T 68) => true | (T 69) => true | 
(T 70) => true | _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn (T 4) => true | _ => false
val showTerminal =
fn (T 0) => "CCON"
  | (T 1) => "COLON"
  | (T 2) => "COMMA"
  | (T 3) => "SEMICOLON"
  | (T 4) => "EOF_HARD"
  | (T 5) => "EOF_SOFT"
  | (T 6) => "ICON"
  | (T 7) => "IDENT"
  | (T 8) => "LPAR"
  | (T 9) => "RCON"
  | (T 10) => "RPAR"
  | (T 11) => "LBRACE"
  | (T 12) => "RBRACE"
  | (T 13) => "SCON"
  | (T 14) => "TYVAR"
  | (T 15) => "ID"
  | (T 16) => "LONGID"
  | (T 17) => "VARty"
  | (T 18) => "CONSty"
  | (T 19) => "RELty"
  | (T 20) => "NAMEDty"
  | (T 21) => "TUPLEty"
  | (T 22) => "SOM"
  | (T 23) => "NON"
  | (T 24) => "WILDpat"
  | (T 25) => "LITpat"
  | (T 26) => "CONpat"
  | (T 27) => "STRUCTpat"
  | (T 28) => "BINDpat"
  | (T 29) => "IDENTpat"
  | (T 30) => "NAMEDpat"
  | (T 31) => "LITexp"
  | (T 32) => "CONexp"
  | (T 33) => "VARexp"
  | (T 34) => "STRUCTexp"
  | (T 35) => "IDENTexp"
  | (T 36) => "CALLgoal"
  | (T 37) => "EQUALgoal"
  | (T 38) => "LETgoal"
  | (T 39) => "NOTgoal"
  | (T 40) => "ANDgoal"
  | (T 41) => "RETURN"
  | (T 42) => "FAIL"
  | (T 43) => "CLAUSE1"
  | (T 44) => "CLAUSE2"
  | (T 45) => "CONcb"
  | (T 46) => "CTORcb"
  | (T 47) => "DATBIND"
  | (T 48) => "TYPBIND"
  | (T 49) => "RELBIND"
  | (T 50) => "WITHspec"
  | (T 51) => "REF"
  | (T 52) => "ABSTYPEspec"
  | (T 53) => "TYPEspec"
  | (T 54) => "DATAspec"
  | (T 55) => "VALspec"
  | (T 56) => "RELspec"
  | (T 57) => "WITHdec"
  | (T 58) => "TYPEdec"
  | (T 59) => "DATAdec"
  | (T 60) => "VALdec"
  | (T 61) => "RELdec"
  | (T 62) => "INTERFACE"
  | (T 63) => "SOURCE"
  | (T 64) => "MODULE"
  | (T 65) => "INTERFACE_END"
  | (T 66) => "DECLARATIONS"
  | (T 67) => "DUMMY_SOURCE"
  | (T 68) => "DUMMY_INTERFACE"
  | (T 69) => "SERIALIZATION_INFO"
  | (T 70) => "SERIALIZATION_INFO_END"
  | (T 71) => "START_SERIALIZATION_INFO"
  | (T 72) => "START_INTERFACE"
  | (T 73) => "START_MODULE"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 73) $$ (T 72) $$ (T 71) $$ (T 70) $$ (T 69) $$ (T 68) $$ (T 67)
 $$ (T 66) $$ (T 65) $$ (T 64) $$ (T 63) $$ (T 62) $$ (T 61) $$ (T 60)
 $$ (T 59) $$ (T 58) $$ (T 57) $$ (T 56) $$ (T 55) $$ (T 54) $$ (T 53)
 $$ (T 52) $$ (T 51) $$ (T 50) $$ (T 49) $$ (T 48) $$ (T 47) $$ (T 46)
 $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39)
 $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32)
 $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25)
 $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18)
 $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 12) $$ (T 11) $$ (T 10) $$ (T 8)
 $$ (T 5) $$ (T 4) $$ (T 3) $$ (T 2) $$ (T 1)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (lexArg):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( _, _, EOF_SOFT1right)) :: ( _, ( 
MlyValue.module_interface_and_declarations 
module_interface_and_declarations1, _, _)) :: ( _, ( 
MlyValue.serialization_info serialization_info1, _, _)) :: ( _, ( _, 
START_MODULE1left, _)) :: rest671)) => let val  result = 
MlyValue.module (fn _ => let val  (serialization_info as 
serialization_info1) = serialization_info1 ()
 val  (module_interface_and_declarations as 
module_interface_and_declarations1) = 
module_interface_and_declarations1 ()
 in (
 
		  Absyn.SERIALIZED(serialization_info, module_interface_and_declarations) 
		
)
end)
 in ( LrTable.NT 0, ( result, START_MODULE1left, EOF_SOFT1right), 
rest671)
end
|  ( 1, ( ( _, ( MlyValue.module_interface module_interface1, _, 
module_interface1right)) :: ( _, ( MlyValue.serialization_info 
serialization_info1, _, _)) :: ( _, ( _, START_INTERFACE1left, _)) :: 
rest671)) => let val  result = MlyValue.module (fn _ => let val  (
serialization_info as serialization_info1) = serialization_info1 ()
 val  (module_interface as module_interface1) = module_interface1 ()
 in ( 
		  Absyn.SERIALIZED(serialization_info, module_interface) 
		)

end)
 in ( LrTable.NT 0, ( result, START_INTERFACE1left, 
module_interface1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.serialization_info serialization_info1, _, 
serialization_info1right)) :: ( _, ( _, START_SERIALIZATION_INFO1left,
 _)) :: rest671)) => let val  result = MlyValue.module (fn _ => let
 val  (serialization_info as serialization_info1) = 
serialization_info1 ()
 in ( 
		  Absyn.SERIALIZED(serialization_info, NONE) 
		)
end)
 in ( LrTable.NT 0, ( result, START_SERIALIZATION_INFO1left, 
serialization_info1right), rest671)
end
|  ( 3, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.ICON ICON1, _,
 _)) :: _ :: ( _, ( MlyValue.SCON SCON2, _, _)) :: _ :: ( _, ( 
MlyValue.SCON SCON1, _, _)) :: _ :: ( _, ( _, SERIALIZATION_INFO1left,
 _)) :: rest671)) => let val  result = MlyValue.serialization_info (fn
 _ => let val  SCON1 = SCON1 ()
 val  SCON2 = SCON2 ()
 val  (ICON as ICON1) = ICON1 ()
 in (
 
		LexArgSimple.isSerializationOf(lexArg) := SCON1;
		Absyn.SERIALIZE({file=SCON1, date=SCON2, version=ICON}) 
	
)
end)
 in ( LrTable.NT 4, ( result, SERIALIZATION_INFO1left, RPAR1right), 
rest671)
end
|  ( 4, ( ( _, ( MlyValue.declarations declarations1, _, 
declarations1right)) :: _ :: ( _, ( MlyValue.info info1, _, _)) :: _
 :: ( _, ( MlyValue.interface interface1, _, _)) :: _ :: ( _, ( _, 
MODULE1left, _)) :: rest671)) => let val  result = 
MlyValue.module_interface_and_declarations (fn _ => let val  (
interface as interface1) = interface1 ()
 val  (info as info1) = info1 ()
 val  (declarations as declarations1) = declarations1 ()
 in ( SOME(Absyn.MODULE(interface, declarations, info)) )
end)
 in ( LrTable.NT 2, ( result, MODULE1left, declarations1right), 
rest671)
end
|  ( 5, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.interface interface1, _, _)) :: _ :: ( _,
 ( _, MODULE1left, _)) :: rest671)) => let val  result = 
MlyValue.module_interface (fn _ => let val  (interface as interface1)
 = interface1 ()
 val  (info as info1) = info1 ()
 in ( SOME(Absyn.MODULE(interface, [], info)) )
end)
 in ( LrTable.NT 1, ( result, MODULE1left, RPAR1right), rest671)
end
|  ( 6, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.dec_star 
dec_star1, _, _)) :: _ :: ( _, ( _, DECLARATIONS1left, _)) :: rest671)
) => let val  result = MlyValue.declarations (fn _ => let val  (
dec_star as dec_star1) = dec_star1 ()
 in ( dec_star )
end)
 in ( LrTable.NT 3, ( result, DECLARATIONS1left, RPAR1right), rest671)

end
|  ( 7, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ICON ICON6, _
, _)) :: _ :: ( _, ( MlyValue.ICON ICON5, _, _)) :: _ :: ( _, ( 
MlyValue.ICON ICON4, _, _)) :: _ :: ( _, ( MlyValue.ICON ICON3, _, _))
 :: _ :: ( _, ( MlyValue.ICON ICON2, _, _)) :: _ :: ( _, ( 
MlyValue.ICON ICON1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671))
 => let val  result = MlyValue.info (fn _ => let val  ICON1 = ICON1 ()
 val  ICON2 = ICON2 ()
 val  ICON3 = ICON3 ()
 val  ICON4 = ICON4 ()
 val  ICON5 = ICON5 ()
 val  ICON6 = ICON6 ()
 in (

	    Absyn.INFO(!(LexArgSimple.isSerializationOf(lexArg)), ICON1, ICON2, Absyn.LOC(ICON3,ICON4,ICON5,ICON6))
	  
)
end)
 in ( LrTable.NT 59, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 8, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( _, LBRACE1left, _)) ::
 rest671)) => let val  result = MlyValue.info (fn _ => (

	    Absyn.INFO("RML", 0, 0, Absyn.LOC(0,0,0,0))
	  ))
 in ( LrTable.NT 59, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 9, ( ( _, ( MlyValue.ICON ICON1, ICON1left, ICON1right)) :: 
rest671)) => let val  result = MlyValue.lines (fn _ => let val  (ICON
 as ICON1) = ICON1 ()
 in ( [ICON] )
end)
 in ( LrTable.NT 7, ( result, ICON1left, ICON1right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.lines lines1, _, lines1right)) :: _ :: ( _,
 ( MlyValue.ICON ICON1, ICON1left, _)) :: rest671)) => let val  result
 = MlyValue.lines (fn _ => let val  (ICON as ICON1) = ICON1 ()
 val  (lines as lines1) = lines1 ()
 in ( ICON::lines )
end)
 in ( LrTable.NT 7, ( result, ICON1left, lines1right), rest671)
end
|  ( 11, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.ICON ICON1, _,
 _)) :: _ :: _ :: ( _, ( MlyValue.lines lines1, _, _)) :: _ :: _ :: (
 _, ( MlyValue.SCON SCON2, _, _)) :: _ :: ( _, ( MlyValue.SCON SCON1,
 _, _)) :: _ :: ( _, ( _, SOURCE1left, _)) :: rest671)) => let val  
result = MlyValue.source (fn _ => let val  SCON1 = SCON1 ()
 val  SCON2 = SCON2 ()
 val  (lines as lines1) = lines1 ()
 val  (ICON as ICON1) = ICON1 ()
 in ( Absyn.Source.getSource(SCON1,SCON2,lines,ICON) )
end)
 in ( LrTable.NT 6, ( result, SOURCE1left, RPAR2right), rest671)
end
|  ( 12, ( ( _, ( _, _, RPAR1right)) :: _ :: _ :: ( _, ( _, 
SOURCE1left, _)) :: rest671)) => let val  result = MlyValue.source (fn
 _ => ( Absyn.Source.dummy ))
 in ( LrTable.NT 6, ( result, SOURCE1left, RPAR1right), rest671)
end
|  ( 13, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.source source1, _, _)) :: _ :: _ :: ( _, 
( MlyValue.spec_star spec_star1, _, _)) :: _ :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, INTERFACE1left, _)) ::
 rest671)) => let val  result = MlyValue.interface (fn _ => let val  (
ident as ident1) = ident1 ()
 val  (spec_star as spec_star1) = spec_star1 ()
 val  (source as source1) = source1 ()
 val  (info as info1) = info1 ()
 in (
 Absyn.INTERFACE({modid=ident, specs=spec_star, source=source}, info) 
)
end)
 in ( LrTable.NT 5, ( result, INTERFACE1left, RPAR2right), rest671)

end
|  ( 14, ( ( _, ( _, _, RPAR1right)) :: _ :: _ :: ( _, ( _, 
INTERFACE1left, _)) :: rest671)) => let val  result = 
MlyValue.interface (fn _ => ( Absyn.dummyInterface ))
 in ( LrTable.NT 5, ( result, INTERFACE1left, RPAR1right), rest671)

end
|  ( 15, ( rest671)) => let val  result = MlyValue.spec_star (fn _ =>
 ( [] ))
 in ( LrTable.NT 8, ( result, defaultPos, defaultPos), rest671)
end
|  ( 16, ( ( _, ( MlyValue.spec spec1, spec1left, spec1right)) :: 
rest671)) => let val  result = MlyValue.spec_star (fn _ => let val  (
spec as spec1) = spec1 ()
 in ( [spec] )
end)
 in ( LrTable.NT 8, ( result, spec1left, spec1right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.spec_star spec_star1, _, spec_star1right))
 :: _ :: ( _, ( MlyValue.spec spec1, spec1left, _)) :: rest671)) =>
 let val  result = MlyValue.spec_star (fn _ => let val  (spec as spec1
) = spec1 ()
 val  (spec_star as spec_star1) = spec_star1 ()
 in ( spec :: spec_star )
end)
 in ( LrTable.NT 8, ( result, spec1left, spec_star1right), rest671)

end
|  ( 18, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: ( _, ( MlyValue.interface interface1, _, _)) :: _ ::
 _ :: _ :: ( _, ( MlyValue.SCON SCON1, _, _)) :: _ :: ( _, ( _, 
WITHspec1left, _)) :: rest671)) => let val  result = MlyValue.spec (fn
 _ => let val  (SCON as SCON1) = SCON1 ()
 val  (interface as interface1) = interface1 ()
 val  (info as info1) = info1 ()
 in (
 
		let val Absyn.INFO(file, sp, ep, Absyn.LOC(sl,sc,el,ec) ) = info
		in
		 LexArgSimple.addImport(
		 lexArg,
		 SCON, 
		 (sp,sl,sc),(ep,el,ec),
		 Cache.PUBLIC)
		end;
		
		
		Absyn.WITHspec(SCON, ref interface, info ) 
	
)
end)
 in ( LrTable.NT 9, ( result, WITHspec1left, RPAR2right), rest671)
end
|  ( 19, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.ident ident1, _, _)) :: _ :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: _ :: ( _, ( MlyValue.ICON ICON1
, _, _)) :: _ :: ( _, ( _, ABSTYPEspec1left, _)) :: rest671)) => let
 val  result = MlyValue.spec (fn _ => let val  (ICON as ICON1) = ICON1
 ()
 val  (tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (ident as ident1) = ident1 ()
 val  (info as info1) = info1 ()
 in (
 Absyn.ABSTYPEspec(if (ICON=0) then false else true, tyvarseq, ident, info) 
)
end)
 in ( LrTable.NT 9, ( result, ABSTYPEspec1left, RPAR1right), rest671)

end
|  ( 20, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.typbind_plus typbind_plus1, _, _)) :: _
 :: ( _, ( _, TYPEspec1left, _)) :: rest671)) => let val  result = 
MlyValue.spec (fn _ => let val  (typbind_plus as typbind_plus1) = 
typbind_plus1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.TYPEspec(typbind_plus, info) )
end)
 in ( LrTable.NT 9, ( result, TYPEspec1left, RPAR1right), rest671)
end
|  ( 21, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.typbind_plus typbind_plus1, _, _)) :: _
 :: ( _, ( MlyValue.datbind_plus datbind_plus1, _, _)) :: _ :: ( _, (
 _, DATAspec1left, _)) :: rest671)) => let val  result = MlyValue.spec
 (fn _ => let val  (datbind_plus as datbind_plus1) = datbind_plus1 ()
 val  (typbind_plus as typbind_plus1) = typbind_plus1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.DATAspec(datbind_plus, typbind_plus, info) )
end)
 in ( LrTable.NT 9, ( result, DATAspec1left, RPAR1right), rest671)
end
|  ( 22, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.ty ty1, _, _)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, VALspec1left, _)) :: 
rest671)) => let val  result = MlyValue.spec (fn _ => let val  (ident
 as ident1) = ident1 ()
 val  (ty as ty1) = ty1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.VALspec(ident, ty, info) )
end)
 in ( LrTable.NT 9, ( result, VALspec1left, RPAR1right), rest671)
end
|  ( 23, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.ty ty1, _, _)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, RELspec1left, _)) :: 
rest671)) => let val  result = MlyValue.spec (fn _ => let val  (ident
 as ident1) = ident1 ()
 val  (ty as ty1) = ty1 ()
 val  (info as info1) = info1 ()
 in (
 
		LexArgSimple.addRestriction(
			lexArg, Absyn.identName ident,
			Cache.FUN,
			Cache.PUBLIC);
	
		Absyn.RELspec(ident, ty, info) 
	
)
end)
 in ( LrTable.NT 9, ( result, RELspec1left, RPAR1right), rest671)
end
|  ( 24, ( rest671)) => let val  result = MlyValue.dec_star (fn _ => (
 [] ))
 in ( LrTable.NT 10, ( result, defaultPos, defaultPos), rest671)
end
|  ( 25, ( ( _, ( MlyValue.dec dec1, dec1left, dec1right)) :: rest671)
) => let val  result = MlyValue.dec_star (fn _ => let val  (dec as 
dec1) = dec1 ()
 in ( [dec] )
end)
 in ( LrTable.NT 10, ( result, dec1left, dec1right), rest671)
end
|  ( 26, ( ( _, ( MlyValue.dec_star dec_star1, _, dec_star1right)) ::
 _ :: ( _, ( MlyValue.dec dec1, dec1left, _)) :: rest671)) => let val 
 result = MlyValue.dec_star (fn _ => let val  (dec as dec1) = dec1 ()
 val  (dec_star as dec_star1) = dec_star1 ()
 in ( dec :: dec_star )
end)
 in ( LrTable.NT 10, ( result, dec1left, dec_star1right), rest671)
end
|  ( 27, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: ( _, ( MlyValue.interface interface1, _, _)) :: _ ::
 _ :: _ :: ( _, ( MlyValue.SCON SCON1, _, _)) :: _ :: ( _, ( _, 
WITHdec1left, _)) :: rest671)) => let val  result = MlyValue.dec (fn _
 => let val  (SCON as SCON1) = SCON1 ()
 val  (interface as interface1) = interface1 ()
 val  (info as info1) = info1 ()
 in (
 
		let val Absyn.INFO(file, sp, ep, Absyn.LOC(sl,sc,el,ec) ) = info
		in
		 LexArgSimple.addImport(
		 lexArg,
		 SCON, 
		 (sp,sl,sc),(ep,el,ec),
		 Cache.PROTECTED)
		end;
	
		Absyn.WITHdec(SCON, ref interface, info) 
	
)
end)
 in ( LrTable.NT 11, ( result, WITHdec1left, RPAR2right), rest671)
end
|  ( 28, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.typbind_plus typbind_plus1, _, _)) :: _
 :: ( _, ( _, TYPEdec1left, _)) :: rest671)) => let val  result = 
MlyValue.dec (fn _ => let val  (typbind_plus as typbind_plus1) = 
typbind_plus1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.TYPEdec(typbind_plus,info) )
end)
 in ( LrTable.NT 11, ( result, TYPEdec1left, RPAR1right), rest671)
end
|  ( 29, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.typbind_plus typbind_plus1, _, _)) :: _
 :: ( _, ( MlyValue.datbind_plus_protected datbind_plus_protected1, _,
 _)) :: _ :: ( _, ( _, DATAdec1left, _)) :: rest671)) => let val  
result = MlyValue.dec (fn _ => let val  (datbind_plus_protected as 
datbind_plus_protected1) = datbind_plus_protected1 ()
 val  (typbind_plus as typbind_plus1) = typbind_plus1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.DATAdec(datbind_plus_protected, typbind_plus, info) )
end)
 in ( LrTable.NT 11, ( result, DATAdec1left, RPAR1right), rest671)
end
|  ( 30, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, VALdec1left, _)) :: 
rest671)) => let val  result = MlyValue.dec (fn _ => let val  (ident
 as ident1) = ident1 ()
 val  (exp as exp1) = exp1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.VALdec(ident, exp, info) )
end)
 in ( LrTable.NT 11, ( result, VALdec1left, RPAR1right), rest671)
end
|  ( 31, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.relbind_plus relbind_plus1, _, _)) :: _
 :: ( _, ( _, RELdec1left, _)) :: rest671)) => let val  result = 
MlyValue.dec (fn _ => let val  (relbind_plus as relbind_plus1) = 
relbind_plus1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.RELdec(relbind_plus, info) )
end)
 in ( LrTable.NT 11, ( result, RELdec1left, RPAR1right), rest671)
end
|  ( 32, ( rest671)) => let val  result = MlyValue.relbind_plus (fn _
 => ( [] ))
 in ( LrTable.NT 13, ( result, defaultPos, defaultPos), rest671)
end
|  ( 33, ( ( _, ( MlyValue.relbind relbind1, relbind1left, 
relbind1right)) :: rest671)) => let val  result = 
MlyValue.relbind_plus (fn _ => let val  (relbind as relbind1) = 
relbind1 ()
 in ( [relbind] )
end)
 in ( LrTable.NT 13, ( result, relbind1left, relbind1right), rest671)

end
|  ( 34, ( ( _, ( MlyValue.relbind_plus relbind_plus1, _, 
relbind_plus1right)) :: _ :: ( _, ( MlyValue.relbind relbind1, 
relbind1left, _)) :: rest671)) => let val  result = 
MlyValue.relbind_plus (fn _ => let val  (relbind as relbind1) = 
relbind1 ()
 val  (relbind_plus as relbind_plus1) = relbind_plus1 ()
 in ( relbind :: relbind_plus )
end)
 in ( LrTable.NT 13, ( result, relbind1left, relbind_plus1right), 
rest671)
end
|  ( 35, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.clause_plus clause_plus1, _, _)) :: _ :: 
( _, ( MlyValue.relbind_ty_opt relbind_ty_opt1, _, _)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, RELBIND1left, _)) :: 
rest671)) => let val  result = MlyValue.relbind (fn _ => let val  (
ident as ident1) = ident1 ()
 val  (relbind_ty_opt as relbind_ty_opt1) = relbind_ty_opt1 ()
 val  (clause_plus as clause_plus1) = clause_plus1 ()
 val  (info as info1) = info1 ()
 in (
 
		LexArgSimple.addRestriction(
			lexArg, Absyn.identName ident,
			Cache.FUN,
			Cache.PROTECTED					
			);
	
		Absyn.RELBIND(ident, relbind_ty_opt, clause_plus, info) 
	
)
end)
 in ( LrTable.NT 12, ( result, RELBIND1left, RPAR1right), rest671)
end
|  ( 36, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.ty ty1, _, _))
 :: _ :: ( _, ( _, SOM1left, _)) :: rest671)) => let val  result = 
MlyValue.relbind_ty_opt (fn _ => let val  (ty as ty1) = ty1 ()
 in ( SOME(ty) )
end)
 in ( LrTable.NT 14, ( result, SOM1left, RPAR1right), rest671)
end
|  ( 37, ( ( _, ( _, _, RPAR1right)) :: _ :: ( _, ( _, NON1left, _))
 :: rest671)) => let val  result = MlyValue.relbind_ty_opt (fn _ => (
 NONE ))
 in ( LrTable.NT 14, ( result, NON1left, RPAR1right), rest671)
end
|  ( 38, ( rest671)) => let val  result = MlyValue.typbind_plus (fn _
 => ( [] ))
 in ( LrTable.NT 15, ( result, defaultPos, defaultPos), rest671)
end
|  ( 39, ( ( _, ( MlyValue.typbind typbind1, typbind1left, 
typbind1right)) :: rest671)) => let val  result = 
MlyValue.typbind_plus (fn _ => let val  (typbind as typbind1) = 
typbind1 ()
 in ( [typbind] )
end)
 in ( LrTable.NT 15, ( result, typbind1left, typbind1right), rest671)

end
|  ( 40, ( ( _, ( MlyValue.typbind_plus typbind_plus1, _, 
typbind_plus1right)) :: _ :: ( _, ( MlyValue.typbind typbind1, 
typbind1left, _)) :: rest671)) => let val  result = 
MlyValue.typbind_plus (fn _ => let val  (typbind as typbind1) = 
typbind1 ()
 val  (typbind_plus as typbind_plus1) = typbind_plus1 ()
 in ( typbind :: typbind_plus )
end)
 in ( LrTable.NT 15, ( result, typbind1left, typbind_plus1right), 
rest671)
end
|  ( 41, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.ty ty1, _, _)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( MlyValue.tyvarseq 
tyvarseq1, _, _)) :: _ :: ( _, ( _, TYPBIND1left, _)) :: rest671)) =>
 let val  result = MlyValue.typbind (fn _ => let val  (tyvarseq as 
tyvarseq1) = tyvarseq1 ()
 val  (ident as ident1) = ident1 ()
 val  (ty as ty1) = ty1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.TYPBIND(tyvarseq, ident, ty, info) )
end)
 in ( LrTable.NT 16, ( result, TYPBIND1left, RPAR1right), rest671)
end
|  ( 42, ( rest671)) => let val  result = 
MlyValue.datbind_plus_protected (fn _ => ( [] ))
 in ( LrTable.NT 17, ( result, defaultPos, defaultPos), rest671)
end
|  ( 43, ( ( _, ( MlyValue.datbind_protected datbind_protected1, 
datbind_protected1left, datbind_protected1right)) :: rest671)) => let
 val  result = MlyValue.datbind_plus_protected (fn _ => let val  (
datbind_protected as datbind_protected1) = datbind_protected1 ()
 in ( [datbind_protected] )
end)
 in ( LrTable.NT 17, ( result, datbind_protected1left, 
datbind_protected1right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.datbind_plus_protected 
datbind_plus_protected1, _, datbind_plus_protected1right)) :: _ :: ( _
, ( MlyValue.datbind_protected datbind_protected1, 
datbind_protected1left, _)) :: rest671)) => let val  result = 
MlyValue.datbind_plus_protected (fn _ => let val  (datbind_protected
 as datbind_protected1) = datbind_protected1 ()
 val  (datbind_plus_protected as datbind_plus_protected1) = 
datbind_plus_protected1 ()
 in ( datbind_protected :: datbind_plus_protected )
end)
 in ( LrTable.NT 17, ( result, datbind_protected1left, 
datbind_plus_protected1right), rest671)
end
|  ( 45, ( rest671)) => let val  result = MlyValue.datbind_plus (fn _
 => ( [] ))
 in ( LrTable.NT 21, ( result, defaultPos, defaultPos), rest671)
end
|  ( 46, ( ( _, ( MlyValue.datbind datbind1, datbind1left, 
datbind1right)) :: rest671)) => let val  result = 
MlyValue.datbind_plus (fn _ => let val  (datbind as datbind1) = 
datbind1 ()
 in ( [datbind] )
end)
 in ( LrTable.NT 21, ( result, datbind1left, datbind1right), rest671)

end
|  ( 47, ( ( _, ( MlyValue.datbind_plus datbind_plus1, _, 
datbind_plus1right)) :: _ :: ( _, ( MlyValue.datbind datbind1, 
datbind1left, _)) :: rest671)) => let val  result = 
MlyValue.datbind_plus (fn _ => let val  (datbind as datbind1) = 
datbind1 ()
 val  (datbind_plus as datbind_plus1) = datbind_plus1 ()
 in ( datbind :: datbind_plus )
end)
 in ( LrTable.NT 21, ( result, datbind1left, datbind_plus1right), 
rest671)
end
|  ( 48, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.conbind_plus conbind_plus1, _, _)) :: _
 :: ( _, ( MlyValue.ident ident1, _, _)) :: _ :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: _ :: ( _, ( _, DATBIND1left, _)
) :: rest671)) => let val  result = MlyValue.datbind (fn _ => let val 
 (tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (ident as ident1) = ident1 ()
 val  (conbind_plus as conbind_plus1) = conbind_plus1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.DATBIND(tyvarseq, ident, conbind_plus, info) )
end)
 in ( LrTable.NT 22, ( result, DATBIND1left, RPAR1right), rest671)
end
|  ( 49, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.conbind_plus_protected 
conbind_plus_protected1, _, _)) :: _ :: ( _, ( MlyValue.ident ident1,
 _, _)) :: _ :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: _ :: ( _
, ( _, DATBIND1left, _)) :: rest671)) => let val  result = 
MlyValue.datbind_protected (fn _ => let val  (tyvarseq as tyvarseq1) =
 tyvarseq1 ()
 val  (ident as ident1) = ident1 ()
 val  (conbind_plus_protected as conbind_plus_protected1) = 
conbind_plus_protected1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.DATBIND(tyvarseq, ident, conbind_plus_protected, info) )

end)
 in ( LrTable.NT 18, ( result, DATBIND1left, RPAR1right), rest671)
end
|  ( 50, ( rest671)) => let val  result = MlyValue.conbind_plus (fn _
 => ( [] ))
 in ( LrTable.NT 23, ( result, defaultPos, defaultPos), rest671)
end
|  ( 51, ( ( _, ( MlyValue.conbind conbind1, conbind1left, 
conbind1right)) :: rest671)) => let val  result = 
MlyValue.conbind_plus (fn _ => let val  (conbind as conbind1) = 
conbind1 ()
 in ( [conbind] )
end)
 in ( LrTable.NT 23, ( result, conbind1left, conbind1right), rest671)

end
|  ( 52, ( ( _, ( MlyValue.conbind_plus conbind_plus1, _, 
conbind_plus1right)) :: _ :: ( _, ( MlyValue.conbind conbind1, 
conbind1left, _)) :: rest671)) => let val  result = 
MlyValue.conbind_plus (fn _ => let val  (conbind as conbind1) = 
conbind1 ()
 val  (conbind_plus as conbind_plus1) = conbind_plus1 ()
 in ( conbind :: conbind_plus )
end)
 in ( LrTable.NT 23, ( result, conbind1left, conbind_plus1right), 
rest671)
end
|  ( 53, ( rest671)) => let val  result = 
MlyValue.conbind_plus_protected (fn _ => ( [] ))
 in ( LrTable.NT 19, ( result, defaultPos, defaultPos), rest671)
end
|  ( 54, ( ( _, ( MlyValue.conbind_protected conbind_protected1, 
conbind_protected1left, conbind_protected1right)) :: rest671)) => let
 val  result = MlyValue.conbind_plus_protected (fn _ => let val  (
conbind_protected as conbind_protected1) = conbind_protected1 ()
 in ( [conbind_protected] )
end)
 in ( LrTable.NT 19, ( result, conbind_protected1left, 
conbind_protected1right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.conbind_plus_protected 
conbind_plus_protected1, _, conbind_plus_protected1right)) :: _ :: ( _
, ( MlyValue.conbind_protected conbind_protected1, 
conbind_protected1left, _)) :: rest671)) => let val  result = 
MlyValue.conbind_plus_protected (fn _ => let val  (conbind_protected
 as conbind_protected1) = conbind_protected1 ()
 val  (conbind_plus_protected as conbind_plus_protected1) = 
conbind_plus_protected1 ()
 in ( conbind_protected :: conbind_plus_protected )
end)
 in ( LrTable.NT 19, ( result, conbind_protected1left, 
conbind_plus_protected1right), rest671)
end
|  ( 56, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, 
CONcb1left, _)) :: rest671)) => let val  result = 
MlyValue.conbind_protected (fn _ => let val  (ident as ident1) = 
ident1 ()
 val  (info as info1) = info1 ()
 in (
 
		 LexArgSimple.addRestriction(
			lexArg, 
			Absyn.identName ident,
			Cache.REC,
			Cache.PROTECTED
			);
		
		Absyn.CONcb(ident, info) 
	
)
end)
 in ( LrTable.NT 20, ( result, CONcb1left, RPAR1right), rest671)
end
|  ( 57, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.ty_seq ty_seq1, _, _)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, CTORcb1left, _)) :: 
rest671)) => let val  result = MlyValue.conbind_protected (fn _ => let
 val  (ident as ident1) = ident1 ()
 val  (ty_seq as ty_seq1) = ty_seq1 ()
 val  (info as info1) = info1 ()
 in (
 
		 LexArgSimple.addRestriction(
			lexArg, 
			Absyn.identName ident,
			Cache.REC,
			Cache.PROTECTED			
			);
	
		Absyn.CTORcb(ident, ty_seq, info) 
	
)
end)
 in ( LrTable.NT 20, ( result, CTORcb1left, RPAR1right), rest671)
end
|  ( 58, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, 
CONcb1left, _)) :: rest671)) => let val  result = MlyValue.conbind (fn
 _ => let val  (ident as ident1) = ident1 ()
 val  (info as info1) = info1 ()
 in (
 
		 LexArgSimple.addRestriction(
			lexArg, 
			Absyn.identName ident,
			Cache.REC,
			Cache.PUBLIC
			);
		
		Absyn.CONcb(ident, info) 
	
)
end)
 in ( LrTable.NT 24, ( result, CONcb1left, RPAR1right), rest671)
end
|  ( 59, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.ty_seq ty_seq1, _, _)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, CTORcb1left, _)) :: 
rest671)) => let val  result = MlyValue.conbind (fn _ => let val  (
ident as ident1) = ident1 ()
 val  (ty_seq as ty_seq1) = ty_seq1 ()
 val  (info as info1) = info1 ()
 in (
 
		 LexArgSimple.addRestriction(
			lexArg, 
			Absyn.identName ident,
			Cache.REC,
			Cache.PUBLIC			
			);
	
		Absyn.CTORcb(ident, ty_seq, info) 
	
)
end)
 in ( LrTable.NT 24, ( result, CTORcb1left, RPAR1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.clause clause1, clause1left, clause1right))
 :: rest671)) => let val  result = MlyValue.clause_plus (fn _ => let
 val  (clause as clause1) = clause1 ()
 in ( clause )
end)
 in ( LrTable.NT 25, ( result, clause1left, clause1right), rest671)

end
|  ( 61, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.clause_plus clause_plus1, _, _)) :: _ :: 
( _, ( MlyValue.clause clause1, _, _)) :: _ :: ( _, ( _, CLAUSE21left,
 _)) :: rest671)) => let val  result = MlyValue.clause_plus (fn _ =>
 let val  (clause as clause1) = clause1 ()
 val  (clause_plus as clause_plus1) = clause_plus1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.CLAUSE2(clause, clause_plus, info) )
end)
 in ( LrTable.NT 25, ( result, CLAUSE21left, RPAR1right), rest671)
end
|  ( 62, ( ( _, ( _, _, RPAR3right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: ( _, ( MlyValue.seq_pat seq_pat2, _, _)) :: _ :: _
 :: _ :: ( _, ( MlyValue.result result1, _, _)) :: _ :: ( _, ( 
MlyValue.seq_pat seq_pat1, _, _)) :: _ :: ( _, ( MlyValue.ident ident1
, _, _)) :: _ :: _ :: ( _, ( MlyValue.goal goal1, _, _)) :: _ :: _ ::
 _ :: ( _, ( _, CLAUSE11left, _)) :: rest671)) => let val  result = 
MlyValue.clause (fn _ => let val  (goal as goal1) = goal1 ()
 val  (ident as ident1) = ident1 ()
 val  seq_pat1 = seq_pat1 ()
 val  (result as result1) = result1 ()
 val  seq_pat2 = seq_pat2 ()
 val  (info as info1) = info1 ()
 in (
 Absyn.CLAUSE1(SOME(goal), ident, seq_pat1, result, ref seq_pat2, info) 
)
end)
 in ( LrTable.NT 26, ( result, CLAUSE11left, RPAR3right), rest671)
end
|  ( 63, ( ( _, ( _, _, RPAR3right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: ( _, ( MlyValue.seq_pat seq_pat2, _, _)) :: _ :: _
 :: _ :: ( _, ( MlyValue.result result1, _, _)) :: _ :: ( _, ( 
MlyValue.seq_pat seq_pat1, _, _)) :: _ :: ( _, ( MlyValue.ident ident1
, _, _)) :: _ :: _ :: _ :: _ :: _ :: ( _, ( _, CLAUSE11left, _)) :: 
rest671)) => let val  result = MlyValue.clause (fn _ => let val  (
ident as ident1) = ident1 ()
 val  seq_pat1 = seq_pat1 ()
 val  (result as result1) = result1 ()
 val  seq_pat2 = seq_pat2 ()
 val  (info as info1) = info1 ()
 in (
 Absyn.CLAUSE1(NONE, ident, seq_pat1, result, ref seq_pat2, info) )

end)
 in ( LrTable.NT 26, ( result, CLAUSE11left, RPAR3right), rest671)
end
|  ( 64, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.seq_exp seq_exp1, _, _)) :: _ :: ( _, ( _
, RETURN1left, _)) :: rest671)) => let val  result = MlyValue.result
 (fn _ => let val  (seq_exp as seq_exp1) = seq_exp1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.RETURN(seq_exp, info) )
end)
 in ( LrTable.NT 27, ( result, RETURN1left, RPAR1right), rest671)
end
|  ( 65, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( _, FAIL1left, _)) :: rest671)) => let val  result
 = MlyValue.result (fn _ => let val  (info as info1) = info1 ()
 in ( Absyn.FAIL (info) )
end)
 in ( LrTable.NT 27, ( result, FAIL1left, RPAR1right), rest671)
end
|  ( 66, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: ( _, ( MlyValue.seq_pat seq_pat2, _, _)) :: _ :: _
 :: _ :: ( _, ( MlyValue.seq_pat seq_pat1, _, _)) :: _ :: ( _, ( 
MlyValue.seq_exp seq_exp1, _, _)) :: _ :: ( _, ( 
MlyValue.longorshortid longorshortid1, _, _)) :: _ :: ( _, ( _, 
CALLgoal1left, _)) :: rest671)) => let val  result = MlyValue.goal (fn
 _ => let val  (longorshortid as longorshortid1) = longorshortid1 ()
 val  (seq_exp as seq_exp1) = seq_exp1 ()
 val  seq_pat1 = seq_pat1 ()
 val  seq_pat2 = seq_pat2 ()
 val  (info as info1) = info1 ()
 in (
 Absyn.CALLgoal(longorshortid, seq_exp, seq_pat1, ref seq_pat2, info) 
)
end)
 in ( LrTable.NT 28, ( result, CALLgoal1left, RPAR2right), rest671)

end
|  ( 67, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, EQUALgoal1left, _)) ::
 rest671)) => let val  result = MlyValue.goal (fn _ => let val  (ident
 as ident1) = ident1 ()
 val  (exp as exp1) = exp1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.EQUALgoal(ident, exp, info) )
end)
 in ( LrTable.NT 28, ( result, EQUALgoal1left, RPAR1right), rest671)

end
|  ( 68, ( ( _, ( _, _, RPAR3right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: _ :: ( _, ( MlyValue.pat pat2, _, _)) :: _ :: _ :: _
 :: _ :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( 
MlyValue.pat pat1, _, _)) :: _ :: ( _, ( _, LETgoal1left, _)) :: 
rest671)) => let val  result = MlyValue.goal (fn _ => let val  pat1 = 
pat1 ()
 val  (exp as exp1) = exp1 ()
 val  pat2 = pat2 ()
 val  (info as info1) = info1 ()
 in ( Absyn.LETgoal(pat1, exp,  ref(SOME(pat2)), info) )
end)
 in ( LrTable.NT 28, ( result, LETgoal1left, RPAR3right), rest671)
end
|  ( 69, ( ( _, ( _, _, RPAR3right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: ( _, ( MlyValue.exp 
exp1, _, _)) :: _ :: ( _, ( MlyValue.pat pat1, _, _)) :: _ :: ( _, ( _
, LETgoal1left, _)) :: rest671)) => let val  result = MlyValue.goal
 (fn _ => let val  (pat as pat1) = pat1 ()
 val  (exp as exp1) = exp1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.LETgoal(pat, exp,  ref NONE, info) )
end)
 in ( LrTable.NT 28, ( result, LETgoal1left, RPAR3right), rest671)
end
|  ( 70, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.goal goal1, _, _)) :: _ :: ( _, ( _, 
NOTgoal1left, _)) :: rest671)) => let val  result = MlyValue.goal (fn
 _ => let val  (goal as goal1) = goal1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.NOTgoal(goal, info) )
end)
 in ( LrTable.NT 28, ( result, NOTgoal1left, RPAR1right), rest671)
end
|  ( 71, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.goal goal2, _, _)) :: _ :: ( _, ( 
MlyValue.goal goal1, _, _)) :: _ :: ( _, ( _, ANDgoal1left, _)) :: 
rest671)) => let val  result = MlyValue.goal (fn _ => let val  goal1 =
 goal1 ()
 val  goal2 = goal2 ()
 val  (info as info1) = info1 ()
 in ( Absyn.ANDgoal(goal1, goal2, info) )
end)
 in ( LrTable.NT 28, ( result, ANDgoal1left, RPAR1right), rest671)
end
|  ( 72, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.seq_exp seq_exp1, _, _)) :: _ :: _ :: ( _
, ( MlyValue.longorshortid longorshortid1, _, _)) :: _ :: _ :: _ :: (
 _, ( _, STRUCTexp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  (longorshortid as longorshortid1) = 
longorshortid1 ()
 val  (seq_exp as seq_exp1) = seq_exp1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.STRUCTexp(SOME(longorshortid), seq_exp, info) )
end)
 in ( LrTable.NT 29, ( result, STRUCTexp1left, RPAR2right), rest671)

end
|  ( 73, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.seq_exp seq_exp1, _, _)) :: _ :: _ :: _
 :: _ :: _ :: ( _, ( _, STRUCTexp1left, _)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => let val  (seq_exp as seq_exp1) = 
seq_exp1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.STRUCTexp(NONE, seq_exp, info) )
end)
 in ( LrTable.NT 29, ( result, STRUCTexp1left, RPAR2right), rest671)

end
|  ( 74, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.literal literal1, _, _)) :: _ :: ( _, ( _
, LITexp1left, _)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (literal as literal1) = literal1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.LITexp(literal, info) )
end)
 in ( LrTable.NT 29, ( result, LITexp1left, RPAR1right), rest671)
end
|  ( 75, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.longid longid1, _, _)) :: _ :: ( _, ( _, 
CONexp1left, _)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (longid as longid1) = longid1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.CONexp(longid, info) )
end)
 in ( LrTable.NT 29, ( result, CONexp1left, RPAR1right), rest671)
end
|  ( 76, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: _ :: _ :: (
 _, ( MlyValue.longorshortid longorshortid1, _, _)) :: _ :: ( _, ( _, 
IDENTexp1left, _)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (longorshortid as longorshortid1) = longorshortid1 ()
 val  (exp as exp1) = exp1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.IDENTexp(longorshortid, ref exp, info) )
end)
 in ( LrTable.NT 29, ( result, IDENTexp1left, RPAR2right), rest671)

end
|  ( 77, ( rest671)) => let val  result = MlyValue.seq_exp (fn _ => (
 [] ))
 in ( LrTable.NT 34, ( result, defaultPos, defaultPos), rest671)
end
|  ( 78, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.seq_exp (fn _ => let val  (exp as exp1
) = exp1 ()
 in ( [exp] )
end)
 in ( LrTable.NT 34, ( result, exp1left, exp1right), rest671)
end
|  ( 79, ( ( _, ( MlyValue.seq_exp seq_exp1, _, seq_exp1right)) :: _
 :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  
result = MlyValue.seq_exp (fn _ => let val  (exp as exp1) = exp1 ()
 val  (seq_exp as seq_exp1) = seq_exp1 ()
 in ( exp :: seq_exp )
end)
 in ( LrTable.NT 34, ( result, exp1left, seq_exp1right), rest671)
end
|  ( 80, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.pat pat1, _, _)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, BINDpat1left, _)) :: 
rest671)) => let val  result = MlyValue.pat (fn _ => let val  (ident
 as ident1) = ident1 ()
 val  (pat as pat1) = pat1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.BINDpat(ident, pat, info) )
end)
 in ( LrTable.NT 38, ( result, BINDpat1left, RPAR1right), rest671)
end
|  ( 81, ( ( _, ( _, _, RPAR3right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: ( _, ( MlyValue.seq_pat seq_pat2, _, _)) :: _ :: _
 :: _ :: ( _, ( MlyValue.seq_pat seq_pat1, _, _)) :: _ :: _ :: ( _, ( 
MlyValue.longorshortid longorshortid1, _, _)) :: _ :: _ :: _ :: ( _, (
 _, STRUCTpat1left, _)) :: rest671)) => let val  result = MlyValue.pat
 (fn _ => let val  (longorshortid as longorshortid1) = longorshortid1
 ()
 val  seq_pat1 = seq_pat1 ()
 val  seq_pat2 = seq_pat2 ()
 val  (info as info1) = info1 ()
 in (
 Absyn.STRUCTpat(SOME longorshortid, seq_pat1, ref seq_pat2, info) )

end)
 in ( LrTable.NT 38, ( result, STRUCTpat1left, RPAR3right), rest671)

end
|  ( 82, ( ( _, ( _, _, RPAR3right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: ( _, ( MlyValue.seq_pat seq_pat2, _, _)) :: _ :: _
 :: _ :: ( _, ( MlyValue.seq_pat seq_pat1, _, _)) :: _ :: _ :: _ :: _
 :: _ :: ( _, ( _, STRUCTpat1left, _)) :: rest671)) => let val  result
 = MlyValue.pat (fn _ => let val  seq_pat1 = seq_pat1 ()
 val  seq_pat2 = seq_pat2 ()
 val  (info as info1) = info1 ()
 in ( Absyn.STRUCTpat(NONE, seq_pat1, ref seq_pat2, info) )
end)
 in ( LrTable.NT 38, ( result, STRUCTpat1left, RPAR3right), rest671)

end
|  ( 83, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( _, WILDpat1left, _)) :: rest671)) => let val  
result = MlyValue.pat (fn _ => let val  (info as info1) = info1 ()
 in ( Absyn.WILDpat(info) )
end)
 in ( LrTable.NT 38, ( result, WILDpat1left, RPAR1right), rest671)
end
|  ( 84, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.literal literal1, _, _)) :: _ :: ( _, ( _
, LITpat1left, _)) :: rest671)) => let val  result = MlyValue.pat (fn
 _ => let val  (literal as literal1) = literal1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.LITpat(literal, info) )
end)
 in ( LrTable.NT 38, ( result, LITpat1left, RPAR1right), rest671)
end
|  ( 85, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.longorshortid longorshortid1, _, _)) :: _
 :: ( _, ( _, CONpat1left, _)) :: rest671)) => let val  result = 
MlyValue.pat (fn _ => let val  (longorshortid as longorshortid1) = 
longorshortid1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.CONpat(longorshortid, info) )
end)
 in ( LrTable.NT 38, ( result, CONpat1left, RPAR1right), rest671)
end
|  ( 86, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: ( _, ( MlyValue.pat pat1, _, _)) :: _ :: _ :: _ :: (
 _, ( MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, IDENTpat1left, _
)) :: rest671)) => let val  result = MlyValue.pat (fn _ => let val  (
ident as ident1) = ident1 ()
 val  (pat as pat1) = pat1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.IDENTpat(ident, ref pat, info) )
end)
 in ( LrTable.NT 38, ( result, IDENTpat1left, RPAR2right), rest671)

end
|  ( 87, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.pat pat1, _, _)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, NAMEDpat1left, _)) :: 
rest671)) => let val  result = MlyValue.pat (fn _ => let val  (ident
 as ident1) = ident1 ()
 val  (pat as pat1) = pat1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.NAMEDpat(ident, pat, info) )
end)
 in ( LrTable.NT 38, ( result, NAMEDpat1left, RPAR1right), rest671)

end
|  ( 88, ( rest671)) => let val  result = MlyValue.seq_pat (fn _ => (
 [] ))
 in ( LrTable.NT 44, ( result, defaultPos, defaultPos), rest671)
end
|  ( 89, ( ( _, ( MlyValue.pat pat1, pat1left, pat1right)) :: rest671)
) => let val  result = MlyValue.seq_pat (fn _ => let val  (pat as pat1
) = pat1 ()
 in ( [pat] )
end)
 in ( LrTable.NT 44, ( result, pat1left, pat1right), rest671)
end
|  ( 90, ( ( _, ( MlyValue.seq_pat seq_pat1, _, seq_pat1right)) :: _
 :: ( _, ( MlyValue.pat pat1, pat1left, _)) :: rest671)) => let val  
result = MlyValue.seq_pat (fn _ => let val  (pat as pat1) = pat1 ()
 val  (seq_pat as seq_pat1) = seq_pat1 ()
 in ( pat :: seq_pat )
end)
 in ( LrTable.NT 44, ( result, pat1left, seq_pat1right), rest671)
end
|  ( 91, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.CCON CCON1, _, _)) :: ( _, ( _, LPAR1left
, _)) :: rest671)) => let val  result = MlyValue.literal (fn _ => let
 val  (CCON as CCON1) = CCON1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.CCONlit(CCON, info ) )
end)
 in ( LrTable.NT 50, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 92, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.ICON ICON1, _, _)) :: ( _, ( _, LPAR1left
, _)) :: rest671)) => let val  result = MlyValue.literal (fn _ => let
 val  (ICON as ICON1) = ICON1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.ICONlit(ICON, info) )
end)
 in ( LrTable.NT 50, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 93, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.RCON RCON1, _, _)) :: ( _, ( _, LPAR1left
, _)) :: rest671)) => let val  result = MlyValue.literal (fn _ => let
 val  (RCON as RCON1) = RCON1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.RCONlit(RCON, info) )
end)
 in ( LrTable.NT 50, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 94, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.SCON SCON1, _, _)) :: ( _, ( _, LPAR1left
, _)) :: rest671)) => let val  result = MlyValue.literal (fn _ => let
 val  (SCON as SCON1) = SCON1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.SCONlit(SCON, info) )
end)
 in ( LrTable.NT 50, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 95, ( ( _, ( _, _, RPAR3right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: ( _, ( MlyValue.ty_seq ty_seq2, _, _)) :: _ :: _ ::
 _ :: ( _, ( MlyValue.ty_seq ty_seq1, _, _)) :: _ :: _ :: ( _, ( _, 
RELty1left, _)) :: rest671)) => let val  result = MlyValue.ty (fn _ =>
 let val  ty_seq1 = ty_seq1 ()
 val  ty_seq2 = ty_seq2 ()
 val  (info as info1) = info1 ()
 in ( Absyn.RELty(ty_seq1, ty_seq2, info) )
end)
 in ( LrTable.NT 51, ( result, RELty1left, RPAR3right), rest671)
end
|  ( 96, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: _ :: ( _, ( MlyValue.ty_seq ty_seq1, _, _)) :: _ :: _ :: 
( _, ( _, TUPLEty1left, _)) :: rest671)) => let val  result = 
MlyValue.ty (fn _ => let val  (ty_seq as ty_seq1) = ty_seq1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.TUPLEty(ty_seq, info) )
end)
 in ( LrTable.NT 51, ( result, TUPLEty1left, RPAR2right), rest671)
end
|  ( 97, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.ty ty1, _, _)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: _ :: ( _, ( _, NAMEDty1left, _)) :: 
rest671)) => let val  result = MlyValue.ty (fn _ => let val  (ident
 as ident1) = ident1 ()
 val  (ty as ty1) = ty1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.NAMEDty(ident, ty, info) )
end)
 in ( LrTable.NT 51, ( result, NAMEDty1left, RPAR1right), rest671)
end
|  ( 98, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.longorshortid longorshortid1, _, _)) :: _
 :: _ :: ( _, ( MlyValue.ty_seq ty_seq1, _, _)) :: _ :: _ :: ( _, ( _,
 CONSty1left, _)) :: rest671)) => let val  result = MlyValue.ty (fn _
 => let val  (ty_seq as ty_seq1) = ty_seq1 ()
 val  (longorshortid as longorshortid1) = longorshortid1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.CONSty(ty_seq, longorshortid, info) )
end)
 in ( LrTable.NT 51, ( result, CONSty1left, RPAR2right), rest671)
end
|  ( 99, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _,
 _)) :: _ :: ( _, ( MlyValue.tyvar tyvar1, _, _)) :: _ :: ( _, ( _, 
VARty1left, _)) :: rest671)) => let val  result = MlyValue.ty (fn _ =>
 let val  (tyvar as tyvar1) = tyvar1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.VARty(tyvar, info) )
end)
 in ( LrTable.NT 51, ( result, VARty1left, RPAR1right), rest671)
end
|  ( 100, ( rest671)) => let val  result = MlyValue.ty_seq (fn _ => (
 [] ))
 in ( LrTable.NT 52, ( result, defaultPos, defaultPos), rest671)
end
|  ( 101, ( ( _, ( MlyValue.ty ty1, ty1left, ty1right)) :: rest671))
 => let val  result = MlyValue.ty_seq (fn _ => let val  (ty as ty1) = 
ty1 ()
 in ( [ty] )
end)
 in ( LrTable.NT 52, ( result, ty1left, ty1right), rest671)
end
|  ( 102, ( ( _, ( MlyValue.ty_seq ty_seq1, _, ty_seq1right)) :: _ :: 
( _, ( MlyValue.ty ty1, ty1left, _)) :: rest671)) => let val  result =
 MlyValue.ty_seq (fn _ => let val  (ty as ty1) = ty1 ()
 val  (ty_seq as ty_seq1) = ty_seq1 ()
 in ( ty::ty_seq )
end)
 in ( LrTable.NT 52, ( result, ty1left, ty_seq1right), rest671)
end
|  ( 103, ( rest671)) => let val  result = MlyValue.tyvarseq (fn _ =>
 ( [] ))
 in ( LrTable.NT 53, ( result, defaultPos, defaultPos), rest671)
end
|  ( 104, ( ( _, ( MlyValue.tyvar tyvar1, tyvar1left, tyvar1right)) ::
 rest671)) => let val  result = MlyValue.tyvarseq (fn _ => let val  (
tyvar as tyvar1) = tyvar1 ()
 in ( [tyvar] )
end)
 in ( LrTable.NT 53, ( result, tyvar1left, tyvar1right), rest671)
end
|  ( 105, ( ( _, ( MlyValue.tyvarseq tyvarseq1, _, tyvarseq1right)) ::
 _ :: ( _, ( MlyValue.tyvar tyvar1, tyvar1left, _)) :: rest671)) =>
 let val  result = MlyValue.tyvarseq (fn _ => let val  (tyvar as 
tyvar1) = tyvar1 ()
 val  (tyvarseq as tyvarseq1) = tyvarseq1 ()
 in ( tyvar::tyvarseq )
end)
 in ( LrTable.NT 53, ( result, tyvar1left, tyvarseq1right), rest671)

end
|  ( 106, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.info info1, _
, _)) :: _ :: ( _, ( MlyValue.ident ident2, _, _)) :: _ :: _ :: ( _, (
 MlyValue.ident ident1, _, _)) :: _ :: _ :: _ :: ( _, ( _, LONGID1left
, _)) :: rest671)) => let val  result = MlyValue.longid (fn _ => let
 val  ident1 = ident1 ()
 val  ident2 = ident2 ()
 val  (info as info1) = info1 ()
 in (
 
		let val Absyn.INFO(file, sp, ep, Absyn.LOC(sl,sc,el,ec) ) = info
		in
			LexArgSimple.addExternal(
				lexArg, 
				(Absyn.identName ident1)^"."^(Absyn.identName ident2), 
				(sp,sl,sc),(ep,el,ec))
		end;
		
		Absyn.LONGID(SOME ident1, ident2, info) 
	
)
end)
 in ( LrTable.NT 55, ( result, LONGID1left, RPAR2right), rest671)
end
|  ( 107, ( ( _, ( MlyValue.longid longid1, longid1left, longid1right)
) :: rest671)) => let val  result = MlyValue.longorshortid (fn _ =>
 let val  (longid as longid1) = longid1 ()
 in ( longid )
end)
 in ( LrTable.NT 56, ( result, longid1left, longid1right), rest671)

end
|  ( 108, ( ( _, ( _, _, RPAR2right)) :: ( _, ( MlyValue.info info1, _
, _)) :: _ :: ( _, ( MlyValue.ident ident1, _, _)) :: _ :: _ :: _ :: _
 :: _ :: ( _, ( _, LONGID1left, _)) :: rest671)) => let val  result = 
MlyValue.longorshortid (fn _ => let val  (ident as ident1) = ident1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.LONGID(NONE, ident, info) )
end)
 in ( LrTable.NT 56, ( result, LONGID1left, RPAR2right), rest671)
end
|  ( 109, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _
, _)) :: _ :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: _ :: ( _, ( _, 
ID1left, _)) :: rest671)) => let val  result = MlyValue.ident (fn _ =>
 let val  (IDENT as IDENT1) = IDENT1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.makeIdent(IDENT, info) )
end)
 in ( LrTable.NT 57, ( result, ID1left, RPAR1right), rest671)
end
|  ( 110, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.info info1, _
, _)) :: _ :: ( _, ( MlyValue.TYVAR TYVAR1, _, _)) :: _ :: ( _, ( _, 
ID1left, _)) :: rest671)) => let val  result = MlyValue.tyvar (fn _ =>
 let val  (TYVAR as TYVAR1) = TYVAR1 ()
 val  (info as info1) = info1 ()
 in ( Absyn.makeIdent(TYVAR, info) )
end)
 in ( LrTable.NT 58, ( result, ID1left, RPAR1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.module x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : PERSISTENT_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun CCON (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.CCON (fn () => i),p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF_HARD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF_SOFT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun ICON (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.ICON (fn () => i),p1,p2))
fun IDENT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.IDENT (fn () => i),p1,p2))
fun LPAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun RCON (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.RCON (fn () => i),p1,p2))
fun RPAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun SCON (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.SCON (fn () => i),p1,p2))
fun TYVAR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.TYVAR (fn () => i),p1,p2))
fun ID (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun LONGID (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun VARty (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun CONSty (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun RELty (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun NAMEDty (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun TUPLEty (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun SOM (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun NON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun WILDpat (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun LITpat (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun CONpat (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCTpat (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun BINDpat (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun IDENTpat (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun NAMEDpat (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun LITexp (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun CONexp (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun VARexp (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCTexp (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun IDENTexp (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun CALLgoal (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun EQUALgoal (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun LETgoal (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun NOTgoal (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun ANDgoal (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun RETURN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun FAIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun CLAUSE1 (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun CLAUSE2 (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun CONcb (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun CTORcb (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun DATBIND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPBIND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun RELBIND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun WITHspec (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun REF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun ABSTYPEspec (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPEspec (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun DATAspec (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
fun VALspec (p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.VOID,p1,p2))
fun RELspec (p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.VOID,p1,p2))
fun WITHdec (p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPEdec (p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.VOID,p1,p2))
fun DATAdec (p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.VOID,p1,p2))
fun VALdec (p1,p2) = Token.TOKEN (ParserData.LrTable.T 60,(
ParserData.MlyValue.VOID,p1,p2))
fun RELdec (p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(
ParserData.MlyValue.VOID,p1,p2))
fun INTERFACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(
ParserData.MlyValue.VOID,p1,p2))
fun SOURCE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(
ParserData.MlyValue.VOID,p1,p2))
fun MODULE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 64,(
ParserData.MlyValue.VOID,p1,p2))
fun INTERFACE_END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(
ParserData.MlyValue.VOID,p1,p2))
fun DECLARATIONS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(
ParserData.MlyValue.VOID,p1,p2))
fun DUMMY_SOURCE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 67,(
ParserData.MlyValue.VOID,p1,p2))
fun DUMMY_INTERFACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 68,(
ParserData.MlyValue.VOID,p1,p2))
fun SERIALIZATION_INFO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 69
,(ParserData.MlyValue.VOID,p1,p2))
fun SERIALIZATION_INFO_END (p1,p2) = Token.TOKEN (
ParserData.LrTable.T 70,(ParserData.MlyValue.VOID,p1,p2))
fun START_SERIALIZATION_INFO (p1,p2) = Token.TOKEN (
ParserData.LrTable.T 71,(ParserData.MlyValue.VOID,p1,p2))
fun START_INTERFACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 72,(
ParserData.MlyValue.VOID,p1,p2))
fun START_MODULE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 73,(
ParserData.MlyValue.VOID,p1,p2))
end
end
