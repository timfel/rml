module Main:
  datatype tmp   =  V of real list array
                 |  Vec of real list array * real list array  
  relation main: string list => ()
end
 
(* our AST *)
val ast = [[1.0],[2.0],[3.0]]

relation loop =
     rule int_lt(i, max) => true & 
	 int_add(i, 1) => i' &
	 int_real(i') => r &
	 RML.array_update(vli, i', [r]) => vli &
	 array_nth(vli, i) => l &
	 RML.debug_print("\nset:", l) &
	 apply(vli) &
	 loop(i', max, vli)
	 --------------------------------
	 loop(i, max, vli) 
	 
    rule int_ge(i,max) => true
	------------------------------
	loop(i, max, _)
end


relation apply=
   rule let li = [10.0]  & 
        let lli = ast &
        array_vector(arr) => vec &
        array_create(10, li) => vli' &
        list_array(lli) => vli &
        let li_new = [3.0] &
        let k = vli &
        array_setnth(vli', 1, li_new) => vli' &
        array_setnth(vli, 1, li_new) => vli &
        array_setnth(vli', 2, li_new) => vli' &
        array_update(vli', 5, li_new) => vli' &
        array_setnth(vli, 2, li_new) => vli &
        array_add(vli', li_new) => vli' &
        let l = vli' &
        let z = Vec(k, l)
        ------------------------------------
        apply(arr)
end

relation main: string list => () =

   rule let x = [1,2,3,4,5] &
        list_get(x, 2) => z &
        debug_print("list_nth([1,2,3,4,5], 2)", z) &
        list_delete(x, 2) => newX &
        debug_print("list_delete([1,2,3,4,5], 2)", newX) &      
        print arg &
        print "\n" &
	let str1="1.1e-005" &
	real_string(1.1e-005) => str &
  	print str1 & 
	print " -> " & 
	print str & print "\n"
        (* 
        string_list_string_char(arg) => clst &
        listDelete(clst, 0) => clst_1  &
        string_char_list_string(clst_1) => str_1 & print "\n" &
        print str_1
        *)       
        ---------------------------------------
        main (arg::argv)

end
