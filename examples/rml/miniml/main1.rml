(* main1.rml *)
module Main:
  relation main: string list => ()
end

with "parse.rml"
with "static.rml"
with "dynamic.rml"

relation parse =
  rule	Parse.parse file => decs
	----------------
	parse file => decs

  rule	not Parse.parse file => _ & print "parsing failed\n"
	----------------
	parse file => fail
end

relation elaborate =
  rule	Static.elaborate(statenv, dec) => statenv'
	----------------
	elaborate(statenv, dec) => statenv'

  rule	not Static.elaborate(statenv, dec) => _ &
	print "type checking failed\n"
	----------------
	elaborate(statenv, dec) => fail
end

relation evaluate =
  rule	Dynamic.evaluate(dynstate, dynenv, dec) => (dynstate', dynenv')
	----------------
	evaluate(dynstate, dynenv, dec) => (dynstate', dynenv')

  rule	not Dynamic.evaluate(dynstate, dynenv, dec) => (_,_) &
	print "evaluation failed\n"
	----------------
	evaluate(dynstate, dynenv, dec) => fail
end

relation doall =
  axiom	doall([], _, _, _)

  rule	elaborate(statenv, dec) => statenv' &
	evaluate(dynstate, dynenv, dec) => (dynstate', dynenv') &
	doall(decs, statenv', dynstate', dynenv')
	----------------
	doall(dec::decs, statenv, dynstate, dynenv)
end

relation main =
  rule	parse file => decs &
	doall(decs, Static.env0, Dynamic.state0, Dynamic.env0)
	----------------
	main file::_
end
