

module exp2:
  datatype Expression     =  INTconst of  int
                 |  FACop    of  Expression
                 |  PLUSop   of  Expression * Expression
                 |  SUBop    of  Expression * Expression
                 |  MULop    of  Expression * Expression
                 |  DIVop    of  Expression * Expression
                 |  NEGop    of  Expression
  relation eval: Expression => int
end

(* Transformation semantics of Exp1 to myown*)

relation factorial =
 axiom factorial(0) => 1 

  rule 	int_gt(n,0) => true & 
	int_sub(n,1) => n_1 & 
	factorial(n_1) => fac_n_1 & 
	int_mul(fac_n_1,n) => x
  	-----------------------------
  	factorial(n) => x	
end 

relation eval: Expression => int  =

 axiom eval( INTconst(ival) ) => ival   (* eval of an integer node *)
                                         (* is the integer itself *)

  rule eval(e) => v1 & factorial(v1) => v2
  ----------------------------------------
        eval(FACop(e)) => v2

  rule  eval(e1) => v1  &  eval(e2) => v2  &  int_add(v1,v2) => v3
        ----------------------------------------------------------
        eval( PLUSop(e1,e2) ) => v3

  rule  eval(e1) => v1  &  eval(e2) => v2  &  int_sub(v1,v2) => v3
        ----------------------------------------------------------
        eval( SUBop(e1,e2) ) => v3

  rule  eval(e1) => v1  &  eval(e2) => v2  &  int_mul(v1,v2) => v3
        ----------------------------------------------------------
        eval( MULop(e1,e2) ) => v3

  rule  eval(e1) => v1  &  eval(e2) => v2  &  int_div(v1,v2) => v3
        ----------------------------------------------------------
        eval( DIVop(e1,e2) ) => v3

  rule  eval(e) => v1  &  int_neg(v1) => v2
        -----------------------------------
        eval( NEGop(e) ) => v2

end (* eval *)
