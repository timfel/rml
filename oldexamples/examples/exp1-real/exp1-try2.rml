
module exp1:
  datatype Exp   =  INTconst of  int
                 |  ADDop    of  Exp * Exp
                 |  SUBop    of  Exp * Exp
                 |  MULop    of  Exp * Exp
                 |  DIVop    of  Exp * Exp
                 |  NEGop    of  Exp
  relation eval:  Exp => int
end


relation eval: Exp => int  =

  axiom eval(INTconst(v)) => v
  
  rule  print "1\n"  &
	print "2\n"  &
	eval(e1) => v1 &
	RML.debug_print("e1", e1) &
	int_gt(v1,v2)=>true &
	print ("conclusion 1\n")
        --------------------------
        eval( ADDop(e1,INTconst(v2)) ) => 1

(*default*) rule 
	print "1\n"  &
	print "2\n"  &
	eval(e1) => v1 &
	RML.debug_print("e1",e1) &
	int_gt(v1,v2)=>false &
	print ("conclusion 2\n")
        --------------------------
        eval( ADDop(e1,INTconst(v2)) ) => 2
end
