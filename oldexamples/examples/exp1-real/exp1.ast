module exp1:
datatype Exp 
	= RCONST of real
	| ADDop of Exp*Exp
	| SUBop of Exp*Exp
	| MULop of Exp*Exp
	| DIVop of Exp*Exp
	| NEGop of Exp
relation eval: (Exp) => (real)
end
relation eval: (Exp) => (real) =
	rule	RML.debug_push_in01("ival",ival) => () &
		RML.debug("exp1.rml",20,3,20,36,"eval","axiom:eval(RCONST(ival)) => (ival)") => () &
		RML.debug_push_out01("ival",ival) => ()
		----------------
		eval(RCONST(ival)) => (ival)

	rule	RML.debug_push_in01("e1",e1) => () &
		RML.debug("exp1.rml",28,9,28,15,"eval","call:eval(e1) => (v1)") => () &
		eval(e1) => (v1) &
		RML.debug_push_out01("v1",v1) => () &
		RML.debug_push_in01("e2",e2) => () &
		RML.debug("exp1.rml",28,27,28,33,"eval","call:eval(e2) => (v2)") => () &
		eval(e2) => (v2) &
		RML.debug_push_out01("v2",v2) => () &
		RML.debug_push_in02("v1",v1,"v2",v2) => () &
		RML.debug("exp1.rml",28,45,28,58,"eval","call:RML.real_add(v1,v2) => (v3)") => () &
		RML.real_add(v1,v2) => (v3)
		----------------
		eval(ADDop(e1,e2)) => (v3)

	rule	RML.debug_push_in01("e1",e1) => () &
		RML.debug("exp1.rml",32,9,32,16,"eval","call:eval(e1) => (v1)") => () &
		eval(e1) => (v1) &
		RML.debug_push_out01("v1",v1) => () &
		RML.debug_push_in01("e2",e2) => () &
		RML.debug("exp1.rml",32,28,32,35,"eval","call:eval(e2) => (v2)") => () &
		eval(e2) => (v2) &
		RML.debug_push_out01("v2",v2) => () &
		RML.debug_push_in02("v1",v1,"v2",v2) => () &
		RML.debug("exp1.rml",32,47,32,60,"eval","call:RML.real_sub(v1,v2) => (v3)") => () &
		RML.real_sub(v1,v2) => (v3)
		----------------
		eval(SUBop(e1,e2)) => (v3)

	rule	RML.debug_push_in01("e1",e1) => () &
		RML.debug("exp1.rml",36,9,36,16,"eval","call:eval(e1) => (v1)") => () &
		eval(e1) => (v1) &
		RML.debug_push_out01("v1",v1) => () &
		RML.debug_push_in01("e2",e2) => () &
		RML.debug("exp1.rml",36,28,36,35,"eval","call:eval(e2) => (v2)") => () &
		eval(e2) => (v2) &
		RML.debug_push_out01("v2",v2) => () &
		RML.debug_push_in02("v1",v1,"v2",v2) => () &
		RML.debug("exp1.rml",36,47,36,60,"eval","call:RML.real_mul(v1,v2) => (v3)") => () &
		RML.real_mul(v1,v2) => (v3)
		----------------
		eval(MULop(e1,e2)) => (v3)

	rule	RML.debug_push_in01("e1",e1) => () &
		RML.debug("exp1.rml",40,9,40,16,"eval","call:eval(e1) => (v1)") => () &
		eval(e1) => (v1) &
		RML.debug_push_out01("v1",v1) => () &
		RML.debug_push_in01("e2",e2) => () &
		RML.debug("exp1.rml",40,28,40,35,"eval","call:eval(e2) => (v2)") => () &
		eval(e2) => (v2) &
		RML.debug_push_out01("v2",v2) => () &
		RML.debug_push_in02("v1",v1,"v2",v2) => () &
		RML.debug("exp1.rml",40,47,40,60,"eval","call:RML.real_div(v1,v2) => (v3)") => () &
		RML.real_div(v1,v2) => (v3)
		----------------
		eval(DIVop(e1,e2)) => (v3)

	rule	RML.debug_push_in01("e",e) => () &
		RML.debug("exp1.rml",44,9,44,15,"eval","call:eval(e) => (v1)") => () &
		eval(e) => (v1) &
		RML.debug_push_out01("v1",v1) => () &
		RML.debug_push_in01("v1",v1) => () &
		RML.debug("exp1.rml",44,27,44,36,"eval","call:RML.real_neg(v1) => (v2)") => () &
		RML.real_neg(v1) => (v2)
		----------------
		eval(NEGop(e)) => (v2)

end
