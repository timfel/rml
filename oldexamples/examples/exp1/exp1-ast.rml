module exp1:
datatype Exp 
	= INTconst of int
	| ADDop of a:(Exp)*b:(Exp)
	| SUBop of Exp*Exp
	| MULop of Exp*Exp
	| DIVop of Exp*Exp
	| NEGop of Exp
	| TRYop of m:(g:(o:((k:((h:(int))list))array)*m:(int))*l:(int))
relation eval: (ex:(Exp),dummy:(int),g:(ex:(int)*k:(real))) => (l:(int),m:(real))
end
relation eval: (ex:(Exp),dummy:(int),g:(ex:(int)*k:(real))) => (l:(int),m:(real)) =
	rule	
		----------------
		eval(ex = INTconst(ival)) => (ival,1.0)

	rule	eval(e1,1,(1,1.2)) => (v1,r) &
		eval(e1,2,(1,1.2)) => (v2,r) &
		RML.int_add(v1,v2) => (v3)
		----------------
		eval(ex = ADDop(a = e1),g = (k = r)) => (v3,r)

	rule	
		----------------
		eval(ex = TRYop(m = (g = (o = _,m = _)))) => fail

end
