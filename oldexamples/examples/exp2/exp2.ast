module exp2:
datatype UnOp 
	= NEG
datatype BinOp 
	= ADD
	| SUB
	| MUL
	| DIV
datatype Exp 
	= INT of int
	| BINARY of Exp*BinOp*Exp
	| UNARY of UnOp*Exp
relation eval: (Exp) => (int)
end
relation apply_unop: (UnOp,int) => (int) =
	rule	RML.debug_print("NEG","<- match") => () &
		RML.debug_print("NEG",NEG) => () &
		RML.debug_print("v","<- match") => () &
		RML.debug_print("v",v) => () &
		RML.debug("exp2.rml",52,9,52,24,"apply_unop","call:int_neg(v) => (v2)") => () &
		RML.debug_print("v",v) => () &
		int_neg(v) => (v2) &
		RML.debug_print("v2","<- match") => () &
		RML.debug_print("v2",v2) => ()
		----------------
		apply_unop(NEG,v) => (v2)

end
relation apply_binop: (BinOp,int,int) => (int) =
	rule	RML.debug_print("ADD","<- match") => () &
		RML.debug_print("ADD",ADD) => () &
		RML.debug_print("v1","<- match") => () &
		RML.debug_print("v1",v1) => () &
		RML.debug_print("v2","<- match") => () &
		RML.debug_print("v2",v2) => () &
		RML.debug("exp2.rml",32,9,32,28,"apply_binop","call:int_add(v1,v2) => (v3)") => () &
		RML.debug_print("v1",v1) => () &
		RML.debug_print("v2",v2) => () &
		int_add(v1,v2) => (v3) &
		RML.debug_print("v3","<- match") => () &
		RML.debug_print("v3",v3) => ()
		----------------
		apply_binop(ADD,v1,v2) => (v3)

	rule	RML.debug_print("SUB","<- match") => () &
		RML.debug_print("SUB",SUB) => () &
		RML.debug_print("v1","<- match") => () &
		RML.debug_print("v1",v1) => () &
		RML.debug_print("v2","<- match") => () &
		RML.debug_print("v2",v2) => () &
		RML.debug("exp2.rml",36,9,36,28,"apply_binop","call:int_sub(v1,v2) => (v3)") => () &
		RML.debug_print("v1",v1) => () &
		RML.debug_print("v2",v2) => () &
		int_sub(v1,v2) => (v3) &
		RML.debug_print("v3","<- match") => () &
		RML.debug_print("v3",v3) => ()
		----------------
		apply_binop(SUB,v1,v2) => (v3)

	rule	RML.debug_print("MUL","<- match") => () &
		RML.debug_print("MUL",MUL) => () &
		RML.debug_print("v1","<- match") => () &
		RML.debug_print("v1",v1) => () &
		RML.debug_print("v2","<- match") => () &
		RML.debug_print("v2",v2) => () &
		RML.debug("exp2.rml",40,9,40,28,"apply_binop","call:int_mul(v1,v2) => (v3)") => () &
		RML.debug_print("v1",v1) => () &
		RML.debug_print("v2",v2) => () &
		int_mul(v1,v2) => (v3) &
		RML.debug_print("v3","<- match") => () &
		RML.debug_print("v3",v3) => ()
		----------------
		apply_binop(MUL,v1,v2) => (v3)

	rule	RML.debug_print("DIV","<- match") => () &
		RML.debug_print("DIV",DIV) => () &
		RML.debug_print("v1","<- match") => () &
		RML.debug_print("v1",v1) => () &
		RML.debug_print("v2","<- match") => () &
		RML.debug_print("v2",v2) => () &
		RML.debug("exp2.rml",44,9,44,28,"apply_binop","call:int_div(v1,v2) => (v3)") => () &
		RML.debug_print("v1",v1) => () &
		RML.debug_print("v2",v2) => () &
		int_div(v1,v2) => (v3) &
		RML.debug_print("v3","<- match") => () &
		RML.debug_print("v3",v3) => ()
		----------------
		apply_binop(DIV,v1,v2) => (v3)

end
relation eval: (Exp) => (int) =
	rule	RML.debug_print("INT(ival)","<- match") => () &
		RML.debug_print("ival",ival) => () &
		RML.debug("exp2.rml",16,3,16,33,"eval","axiom:") => () &
		RML.debug_print("ival",ival) => ()
		----------------
		eval(INT(ival)) => (ival)

	rule	RML.debug_print("BINARY(e1,binop,e2)","<- match") => () &
		RML.debug_print("e1",e1) => () &
		RML.debug_print("binop",binop) => () &
		RML.debug_print("e2",e2) => () &
		RML.debug("exp2.rml",18,9,18,22,"eval","call:eval(e1) => (v1)") => () &
		RML.debug_print("e1",e1) => () &
		eval(e1) => (v1) &
		RML.debug_print("v1","<- match") => () &
		RML.debug_print("v1",v1) => () &
		RML.debug("exp2.rml",19,9,19,22,"eval","call:eval(e2) => (v2)") => () &
		RML.debug_print("e2",e2) => () &
		eval(e2) => (v2) &
		RML.debug_print("v2","<- match") => () &
		RML.debug_print("v2",v2) => () &
		RML.debug("exp2.rml",20,9,20,38,"eval","call:apply_binop(binop,v1,v2) => (v3)") => () &
		RML.debug_print("binop",binop) => () &
		RML.debug_print("v1",v1) => () &
		RML.debug_print("v2",v2) => () &
		apply_binop(binop,v1,v2) => (v3) &
		RML.debug_print("v3","<- match") => () &
		RML.debug_print("v3",v3) => () &
		RML.debug("exp2.rml",22,37,22,41,"eval","return:(v3)") => () &
		RML.debug_print("v3",v3) => ()
		----------------
		eval(BINARY(e1,binop,e2)) => (v3)

	rule	RML.debug_print("UNARY(unop,e)","<- match") => () &
		RML.debug_print("unop",unop) => () &
		RML.debug_print("e",e) => () &
		RML.debug("exp2.rml",24,9,24,21,"eval","call:eval(e) => (v1)") => () &
		RML.debug_print("e",e) => () &
		eval(e) => (v1) &
		RML.debug_print("v1","<- match") => () &
		RML.debug_print("v1",v1) => () &
		RML.debug("exp2.rml",24,27,24,51,"eval","call:apply_unop(unop,v1) => (v2)") => () &
		RML.debug_print("unop",unop) => () &
		RML.debug_print("v1",v1) => () &
		apply_unop(unop,v1) => (v2) &
		RML.debug_print("v2","<- match") => () &
		RML.debug_print("v2",v2) => () &
		RML.debug("exp2.rml",26,31,26,35,"eval","return:(v2)") => () &
		RML.debug_print("v2",v2) => ()
		----------------
		eval(UNARY(unop,e)) => (v2)

end
