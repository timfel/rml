module Eval:

  datatype ('a,'b) try = Tree of 'a * 'b

  type rel_ty_1 = (string * int) => (string * real)
  type rel_ty_2 = (string,  int) => (string,  real)

  relation relz: rel_ty_1
  relation rely: rel_ty_2
end


relation relz: rel_ty_1 =

  rule let (s1,i1) = s1i1 &
       print s1 & 
       int_real(i1) => r1 &
       let s1r1 = (s1,r1)
       --------------------
       relz(s1i1) => s1r1 

end


relation rely: rel_ty_2 =

  rule print s1 & 
       int_real(i1) => r1 
       --------------------
       rely(s1,i1) => (s1,r1) 

end
