module Eval:
datatype Exp 
	= RCONST of real
	| PLUS of Exp*Exp
	| SUB of Exp*Exp
	| MUL of Exp*Exp
	| DIV of Exp*Exp
	| NEG of Exp
relation eval: (Exp) => (real)
end
relation eval: (Exp) => (real) =
	rule	RML.debug_push_in01("v1",v1) => () &
		RML.debug("eval.mo",19,26,19,28,"eval","axiom:eval(RCONST(v1)) => (v1)") => () &
		RML.debug_push_out01("v1",v1) => ()
		----------------
		eval(RCONST(v1)) => (v1)

	rule	RML.debug_push_in01("e1",e1) => () &
		RML.debug("eval.mo",21,11,21,21,"eval","call:eval(e1) => (v1)") => () &
		eval(e1) => (v1) &
		RML.debug_push_out01("v1",v1) => () &
		RML.debug_push_in01("e2",e2) => () &
		RML.debug("eval.mo",21,26,21,36,"eval","call:eval(e2) => (v2)") => () &
		eval(e2) => (v2) &
		RML.debug_push_in02("v1",v1,"v2",v2) => () &
		RML.debug("eval.mo",22,13,22,21,"eval","call:real_add(v1,v2) => (temp101)") => () &
		real_add(v1,v2) => (temp101)
		----------------
		eval(PLUS(e1,e2)) => (temp101)

	rule	RML.debug_push_in01("e1",e1) => () &
		RML.debug("eval.mo",24,11,24,21,"eval","call:eval(e1) => (v1)") => () &
		eval(e1) => (v1) &
		RML.debug_push_out01("v1",v1) => () &
		RML.debug_push_in01("e2",e2) => () &
		RML.debug("eval.mo",24,26,24,36,"eval","call:eval(e2) => (v2)") => () &
		eval(e2) => (v2) &
		RML.debug_push_in02("v1",v1,"v2",v2) => () &
		RML.debug("eval.mo",25,13,25,21,"eval","call:real_sub(v1,v2) => (temp102)") => () &
		real_sub(v1,v2) => (temp102)
		----------------
		eval(SUB(e1,e2)) => (temp102)

	rule	RML.debug_push_in01("e1",e1) => () &
		RML.debug("eval.mo",27,11,27,21,"eval","call:eval(e1) => (v1)") => () &
		eval(e1) => (v1) &
		RML.debug_push_out01("v1",v1) => () &
		RML.debug_push_in01("e2",e2) => () &
		RML.debug("eval.mo",27,26,27,36,"eval","call:eval(e2) => (v2)") => () &
		eval(e2) => (v2) &
		RML.debug_push_in02("v1",v1,"v2",v2) => () &
		RML.debug("eval.mo",28,13,28,21,"eval","call:real_mul(v1,v2) => (temp103)") => () &
		real_mul(v1,v2) => (temp103)
		----------------
		eval(MUL(e1,e2)) => (temp103)

	rule	RML.debug_push_in01("e1",e1) => () &
		RML.debug("eval.mo",30,11,30,21,"eval","call:eval(e1) => (v1)") => () &
		eval(e1) => (v1) &
		RML.debug_push_out01("v1",v1) => () &
		RML.debug_push_in01("e2",e2) => () &
		RML.debug("eval.mo",30,26,30,36,"eval","call:eval(e2) => (v2)") => () &
		eval(e2) => (v2) &
		RML.debug_push_in02("v1",v1,"v2",v2) => () &
		RML.debug("eval.mo",31,13,31,21,"eval","call:real_div(v1,v2) => (temp104)") => () &
		real_div(v1,v2) => (temp104)
		----------------
		eval(DIV(e1,e2)) => (temp104)

	rule	RML.debug_push_in01("e1",e1) => () &
		RML.debug("eval.mo",33,11,33,21,"eval","call:eval(e1) => (v1)") => () &
		eval(e1) => (v1) &
		RML.debug_push_out01("v1",v1) => () &
		RML.debug_push_in01("v1",v1) => () &
		RML.debug("eval.mo",34,13,34,18,"eval","call:real_neg(v1) => (temp105)") => () &
		real_neg(v1) => (temp105)
		----------------
		eval(NEG(e1)) => (temp105)

end
