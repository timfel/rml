module Absyn:
type Ident = string
datatype RelOp 
	= LT of 
	| LE of 
datatype BinOp 
	= ADD of 
	| SUB of 
	| MUL of 
	| RDIV of 
	| IDIV of 
	| IMOD of 
	| IAND of 
	| IOR of 
datatype UnOp 
	= ADDR of 
	| INDIR of 
	| NOT of 
datatype Constant 
	= INTcon of int
	| REALcon of real
	| IDENTcon of Ident
datatype Ty 
	= NAME of Ident
	| PTR of Ty
	| ARR of Constant*Ty
	| REC of VarBndList

and VarBnd 
	= VARBND of Ident*Ty
withtype VarBndList = (VarBnd)list
datatype Exp 
	= INT of int
	| REAL of real
	| IDENT of Ident
	| CAST of Ty*Exp
	| FIELD of Exp*Ident
	| UNARY of UnOp*Exp
	| BINARY of Exp*BinOp*Exp
	| RELATION of Exp*RelOp*Exp
	| EQUALITY of Exp*Exp
	| FCALL of Ident*ExpList
withtype ExpList = (Exp)list
datatype Stmt 
	= ASSIGN of Exp*Exp
	| PCALL of Ident*ExpList
	| FRETURN of Exp
	| PRETURN of 
	| WHILE of Exp*Stmt
	| IF of Exp*Stmt*Stmt
	| SEQ of Stmt*Stmt
	| SKIP of 
datatype TyBnd 
	= TYBND of Ident*Ty
type TyBndList = (TyBnd)list
datatype ConBnd 
	= CONBND of Ident*Constant
type ConBndList = (ConBnd)list
datatype Block 
	= BLOCK of ConBndList*TyBndList*VarBndList*SubBndList*Stmt

and SubBnd 
	= FUNCBND of Ident*VarBndList*Ty*BlockOption
	| PROCBND of Ident*VarBndList*BlockOption
withtype BlockOption = (Block)option
and SubBndList = (SubBnd)list
datatype Prog 
	= PROG of Ident*Block
end
