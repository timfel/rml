module exp1:
datatype Exp 
	= INTconst of int
	| ADDop of Exp*Exp
	| SUBop of Exp*Exp
	| MULop of Exp*Exp
	| DIVop of Exp*Exp
	| NEGop of Exp
relation eval: (Exp) => (int)
val z: Exp
end
relation eval: (Exp) => (int) =
	rule	
		----------------
		eval(INTconst(ival)) => (ival)

	rule	eval(e1) => (v1) &
		eval(e2) => (v2) &
		int_add(v1,v2) => (temp101)
		----------------
		eval(ADDop(e1,e2)) => (temp101)

	rule	eval(e1) => (v1) &
		eval(e2) => (v2) &
		int_sub(v1,v2) => (temp102)
		----------------
		eval(SUBop(e1,e2)) => (temp102)

	rule	eval(e1) => (v1) &
		eval(e2) => (v2) &
		int_mul(v1,v2) => (temp103)
		----------------
		eval(MULop(e1,e2)) => (temp103)

	rule	eval(e1) => (v1) &
		eval(e2) => (v2) &
		int_div(v1,v2) => (temp104)
		----------------
		eval(DIVop(e1,e2)) => (temp104)

	rule	eval(e) => (v1) &
		int_neg(v1) => (temp105)
		----------------
		eval(NEGop(e)) => (temp105)

end
val z = DIVop(INTconst(10),INTconst(10))
